        -:    0:Source:/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1/memory
        -:    0:Graph:FieldTest.gcno
        -:    0:Data:FieldTest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===-------------------------- memory ------------------------------------===//
        -:    3://
        -:    4://                     The LLVM Compiler Infrastructure
        -:    5://
        -:    6:// This file is dual licensed under the MIT and the University of Illinois Open
        -:    7:// Source Licenses. See LICENSE.TXT for details.
        -:    8://
        -:    9://===----------------------------------------------------------------------===//
        -:   10:
        -:   11:#ifndef _LIBCPP_MEMORY
        -:   12:#define _LIBCPP_MEMORY
        -:   13:
        -:   14:/*
        -:   15:    memory synopsis
        -:   16:
        -:   17:namespace std
        -:   18:{
        -:   19:
        -:   20:struct allocator_arg_t { };
        -:   21:constexpr allocator_arg_t allocator_arg = allocator_arg_t();
        -:   22:
        -:   23:template <class T, class Alloc> struct uses_allocator;
        -:   24:
        -:   25:template <class Ptr>
        -:   26:struct pointer_traits
        -:   27:{
        -:   28:    typedef Ptr pointer;
        -:   29:    typedef <details> element_type;
        -:   30:    typedef <details> difference_type;
        -:   31:
        -:   32:    template <class U> using rebind = <details>;
        -:   33:
        -:   34:    static pointer pointer_to(<details>);
        -:   35:};
        -:   36:
        -:   37:template <class T>
        -:   38:struct pointer_traits<T*>
        -:   39:{
        -:   40:    typedef T* pointer;
        -:   41:    typedef T element_type;
        -:   42:    typedef ptrdiff_t difference_type;
        -:   43:
        -:   44:    template <class U> using rebind = U*;
        -:   45:
        -:   46:    static pointer pointer_to(<details>) noexcept;
        -:   47:};
        -:   48:
        -:   49:template <class Alloc>
        -:   50:struct allocator_traits
        -:   51:{
        -:   52:    typedef Alloc                        allocator_type;
        -:   53:    typedef typename allocator_type::value_type
        -:   54:                                         value_type;
        -:   55:
        -:   56:    typedef Alloc::pointer | value_type* pointer;
        -:   57:    typedef Alloc::const_pointer
        -:   58:          | pointer_traits<pointer>::rebind<const value_type>
        -:   59:                                         const_pointer;
        -:   60:    typedef Alloc::void_pointer
        -:   61:          | pointer_traits<pointer>::rebind<void>
        -:   62:                                         void_pointer;
        -:   63:    typedef Alloc::const_void_pointer
        -:   64:          | pointer_traits<pointer>::rebind<const void>
        -:   65:                                         const_void_pointer;
        -:   66:    typedef Alloc::difference_type
        -:   67:          | pointer_traits<pointer>::difference_type
        -:   68:                                         difference_type;
        -:   69:    typedef Alloc::size_type
        -:   70:          | make_unsigned<difference_type>::type
        -:   71:                                         size_type;
        -:   72:    typedef Alloc::propagate_on_container_copy_assignment
        -:   73:          | false_type                   propagate_on_container_copy_assignment;
        -:   74:    typedef Alloc::propagate_on_container_move_assignment
        -:   75:          | false_type                   propagate_on_container_move_assignment;
        -:   76:    typedef Alloc::propagate_on_container_swap
        -:   77:          | false_type                   propagate_on_container_swap;
        -:   78:
        -:   79:    template <class T> using rebind_alloc  = Alloc::rebind<U>::other | Alloc<T, Args...>;
        -:   80:    template <class T> using rebind_traits = allocator_traits<rebind_alloc<T>>;
        -:   81:
        -:   82:    static pointer allocate(allocator_type& a, size_type n);
        -:   83:    static pointer allocate(allocator_type& a, size_type n, const_void_pointer hint);
        -:   84:
        -:   85:    static void deallocate(allocator_type& a, pointer p, size_type n) noexcept;
        -:   86:
        -:   87:    template <class T, class... Args>
        -:   88:        static void construct(allocator_type& a, T* p, Args&&... args);
        -:   89:
        -:   90:    template <class T>
        -:   91:        static void destroy(allocator_type& a, T* p);
        -:   92:
        -:   93:    static size_type max_size(const allocator_type& a); // noexcept in C++14
        -:   94:
        -:   95:    static allocator_type
        -:   96:        select_on_container_copy_construction(const allocator_type& a);
        -:   97:};
        -:   98:
        -:   99:template <>
        -:  100:class allocator<void>
        -:  101:{
        -:  102:public:
        -:  103:    typedef void*                                 pointer;
        -:  104:    typedef const void*                           const_pointer;
        -:  105:    typedef void                                  value_type;
        -:  106:
        -:  107:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  108:};
        -:  109:
        -:  110:template <class T>
        -:  111:class allocator
        -:  112:{
        -:  113:public:
        -:  114:    typedef size_t                                size_type;
        -:  115:    typedef ptrdiff_t                             difference_type;
        -:  116:    typedef T*                                    pointer;
        -:  117:    typedef const T*                              const_pointer;
        -:  118:    typedef typename add_lvalue_reference<T>::type       reference;
        -:  119:    typedef typename add_lvalue_reference<const T>::type const_reference;
        -:  120:    typedef T                                     value_type;
        -:  121:
        -:  122:    template <class U> struct rebind {typedef allocator<U> other;};
        -:  123:
        -:  124:    allocator() noexcept;
        -:  125:    allocator(const allocator&) noexcept;
        -:  126:    template <class U> allocator(const allocator<U>&) noexcept;
        -:  127:    ~allocator();
        -:  128:    pointer address(reference x) const noexcept;
        -:  129:    const_pointer address(const_reference x) const noexcept;
        -:  130:    pointer allocate(size_type, allocator<void>::const_pointer hint = 0);
        -:  131:    void deallocate(pointer p, size_type n) noexcept;
        -:  132:    size_type max_size() const noexcept;
        -:  133:    template<class U, class... Args>
        -:  134:        void construct(U* p, Args&&... args);
        -:  135:    template <class U>
        -:  136:        void destroy(U* p);
        -:  137:};
        -:  138:
        -:  139:template <class T, class U>
        -:  140:bool operator==(const allocator<T>&, const allocator<U>&) noexcept;
        -:  141:
        -:  142:template <class T, class U>
        -:  143:bool operator!=(const allocator<T>&, const allocator<U>&) noexcept;
        -:  144:
        -:  145:template <class OutputIterator, class T>
        -:  146:class raw_storage_iterator
        -:  147:    : public iterator<output_iterator_tag,
        -:  148:                      T,                               // purposefully not C++03
        -:  149:                      ptrdiff_t,                       // purposefully not C++03
        -:  150:                      T*,                              // purposefully not C++03
        -:  151:                      raw_storage_iterator&>           // purposefully not C++03
        -:  152:{
        -:  153:public:
        -:  154:    explicit raw_storage_iterator(OutputIterator x);
        -:  155:    raw_storage_iterator& operator*();
        -:  156:    raw_storage_iterator& operator=(const T& element);
        -:  157:    raw_storage_iterator& operator++();
        -:  158:    raw_storage_iterator  operator++(int);
        -:  159:};
        -:  160:
        -:  161:template <class T> pair<T*,ptrdiff_t> get_temporary_buffer(ptrdiff_t n) noexcept;
        -:  162:template <class T> void               return_temporary_buffer(T* p) noexcept;
        -:  163:
        -:  164:template <class T> T* addressof(T& r) noexcept;
        -:  165:
        -:  166:template <class InputIterator, class ForwardIterator>
        -:  167:ForwardIterator
        -:  168:uninitialized_copy(InputIterator first, InputIterator last, ForwardIterator result);
        -:  169:
        -:  170:template <class InputIterator, class Size, class ForwardIterator>
        -:  171:ForwardIterator
        -:  172:uninitialized_copy_n(InputIterator first, Size n, ForwardIterator result);
        -:  173:
        -:  174:template <class ForwardIterator, class T>
        -:  175:void uninitialized_fill(ForwardIterator first, ForwardIterator last, const T& x);
        -:  176:
        -:  177:template <class ForwardIterator, class Size, class T>
        -:  178:ForwardIterator
        -:  179:uninitialized_fill_n(ForwardIterator first, Size n, const T& x);
        -:  180:
        -:  181:template <class Y> struct auto_ptr_ref {};
        -:  182:
        -:  183:template<class X>
        -:  184:class auto_ptr
        -:  185:{
        -:  186:public:
        -:  187:    typedef X element_type;
        -:  188:
        -:  189:    explicit auto_ptr(X* p =0) throw();
        -:  190:    auto_ptr(auto_ptr&) throw();
        -:  191:    template<class Y> auto_ptr(auto_ptr<Y>&) throw();
        -:  192:    auto_ptr& operator=(auto_ptr&) throw();
        -:  193:    template<class Y> auto_ptr& operator=(auto_ptr<Y>&) throw();
        -:  194:    auto_ptr& operator=(auto_ptr_ref<X> r) throw();
        -:  195:    ~auto_ptr() throw();
        -:  196:
        -:  197:    typename add_lvalue_reference<X>::type operator*() const throw();
        -:  198:    X* operator->() const throw();
        -:  199:    X* get() const throw();
        -:  200:    X* release() throw();
        -:  201:    void reset(X* p =0) throw();
        -:  202:
        -:  203:    auto_ptr(auto_ptr_ref<X>) throw();
        -:  204:    template<class Y> operator auto_ptr_ref<Y>() throw();
        -:  205:    template<class Y> operator auto_ptr<Y>() throw();
        -:  206:};
        -:  207:
        -:  208:template <class T>
        -:  209:struct default_delete
        -:  210:{
        -:  211:    constexpr default_delete() noexcept = default;
        -:  212:    template <class U> default_delete(const default_delete<U>&) noexcept;
        -:  213:
        -:  214:    void operator()(T*) const noexcept;
        -:  215:};
        -:  216:
        -:  217:template <class T>
        -:  218:struct default_delete<T[]>
        -:  219:{
        -:  220:    constexpr default_delete() noexcept = default;
        -:  221:    void operator()(T*) const noexcept;
        -:  222:    template <class U> void operator()(U*) const = delete;
        -:  223:};
        -:  224:
        -:  225:template <class T, class D = default_delete<T>>
        -:  226:class unique_ptr
        -:  227:{
        -:  228:public:
        -:  229:    typedef see below pointer;
        -:  230:    typedef T element_type;
        -:  231:    typedef D deleter_type;
        -:  232:
        -:  233:    // constructors
        -:  234:    constexpr unique_ptr() noexcept;
        -:  235:    explicit unique_ptr(pointer p) noexcept;
        -:  236:    unique_ptr(pointer p, see below d1) noexcept;
        -:  237:    unique_ptr(pointer p, see below d2) noexcept;
        -:  238:    unique_ptr(unique_ptr&& u) noexcept;
        -:  239:    unique_ptr(nullptr_t) noexcept : unique_ptr() { }
        -:  240:    template <class U, class E>
        -:  241:        unique_ptr(unique_ptr<U, E>&& u) noexcept;
        -:  242:    template <class U>
        -:  243:        unique_ptr(auto_ptr<U>&& u) noexcept;
        -:  244:
        -:  245:    // destructor
        -:  246:    ~unique_ptr();
        -:  247:
        -:  248:    // assignment
        -:  249:    unique_ptr& operator=(unique_ptr&& u) noexcept;
        -:  250:    template <class U, class E> unique_ptr& operator=(unique_ptr<U, E>&& u) noexcept;
        -:  251:    unique_ptr& operator=(nullptr_t) noexcept;
        -:  252:
        -:  253:    // observers
        -:  254:    typename add_lvalue_reference<T>::type operator*() const;
        -:  255:    pointer operator->() const noexcept;
        -:  256:    pointer get() const noexcept;
        -:  257:    deleter_type& get_deleter() noexcept;
        -:  258:    const deleter_type& get_deleter() const noexcept;
        -:  259:    explicit operator bool() const noexcept;
        -:  260:
        -:  261:    // modifiers
        -:  262:    pointer release() noexcept;
        -:  263:    void reset(pointer p = pointer()) noexcept;
        -:  264:    void swap(unique_ptr& u) noexcept;
        -:  265:};
        -:  266:
        -:  267:template <class T, class D>
        -:  268:class unique_ptr<T[], D>
        -:  269:{
        -:  270:public:
        -:  271:    typedef implementation-defined pointer;
        -:  272:    typedef T element_type;
        -:  273:    typedef D deleter_type;
        -:  274:
        -:  275:    // constructors
        -:  276:    constexpr unique_ptr() noexcept;
        -:  277:    explicit unique_ptr(pointer p) noexcept;
        -:  278:    unique_ptr(pointer p, see below d) noexcept;
        -:  279:    unique_ptr(pointer p, see below d) noexcept;
        -:  280:    unique_ptr(unique_ptr&& u) noexcept;
        -:  281:    unique_ptr(nullptr_t) noexcept : unique_ptr() { }
        -:  282:
        -:  283:    // destructor
        -:  284:    ~unique_ptr();
        -:  285:
        -:  286:    // assignment
        -:  287:    unique_ptr& operator=(unique_ptr&& u) noexcept;
        -:  288:    unique_ptr& operator=(nullptr_t) noexcept;
        -:  289:
        -:  290:    // observers
        -:  291:    T& operator[](size_t i) const;
        -:  292:    pointer get() const noexcept;
        -:  293:    deleter_type& get_deleter() noexcept;
        -:  294:    const deleter_type& get_deleter() const noexcept;
        -:  295:    explicit operator bool() const noexcept;
        -:  296:
        -:  297:    // modifiers
        -:  298:    pointer release() noexcept;
        -:  299:    void reset(pointer p = pointer()) noexcept;
        -:  300:    void reset(nullptr_t) noexcept;
        -:  301:    template <class U> void reset(U) = delete;
        -:  302:    void swap(unique_ptr& u) noexcept;
        -:  303:};
        -:  304:
        -:  305:template <class T, class D>
        -:  306:    void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y) noexcept;
        -:  307:
        -:  308:template <class T1, class D1, class T2, class D2>
        -:  309:    bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  310:template <class T1, class D1, class T2, class D2>
        -:  311:    bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  312:template <class T1, class D1, class T2, class D2>
        -:  313:    bool operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  314:template <class T1, class D1, class T2, class D2>
        -:  315:    bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  316:template <class T1, class D1, class T2, class D2>
        -:  317:    bool operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  318:template <class T1, class D1, class T2, class D2>
        -:  319:    bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  320:
        -:  321:template <class T, class D>
        -:  322:    bool operator==(const unique_ptr<T, D>& x, nullptr_t) noexcept;
        -:  323:template <class T, class D>
        -:  324:    bool operator==(nullptr_t, const unique_ptr<T, D>& y) noexcept;
        -:  325:template <class T, class D>
        -:  326:    bool operator!=(const unique_ptr<T, D>& x, nullptr_t) noexcept;
        -:  327:template <class T, class D>
        -:  328:    bool operator!=(nullptr_t, const unique_ptr<T, D>& y) noexcept;
        -:  329:
        -:  330:template <class T, class D>
        -:  331:    bool operator<(const unique_ptr<T, D>& x, nullptr_t);
        -:  332:template <class T, class D>
        -:  333:    bool operator<(nullptr_t, const unique_ptr<T, D>& y);
        -:  334:template <class T, class D>
        -:  335:    bool operator<=(const unique_ptr<T, D>& x, nullptr_t);
        -:  336:template <class T, class D>
        -:  337:    bool operator<=(nullptr_t, const unique_ptr<T, D>& y);
        -:  338:template <class T, class D>
        -:  339:    bool operator>(const unique_ptr<T, D>& x, nullptr_t);
        -:  340:template <class T, class D>
        -:  341:    bool operator>(nullptr_t, const unique_ptr<T, D>& y);
        -:  342:template <class T, class D>
        -:  343:    bool operator>=(const unique_ptr<T, D>& x, nullptr_t);
        -:  344:template <class T, class D>
        -:  345:    bool operator>=(nullptr_t, const unique_ptr<T, D>& y);
        -:  346:
        -:  347:class bad_weak_ptr
        -:  348:    : public std::exception
        -:  349:{
        -:  350:    bad_weak_ptr() noexcept;
        -:  351:};
        -:  352:
        -:  353:template<class T, class... Args> unique_ptr<T> make_unique(Args&&... args);     // C++14
        -:  354:template<class T>                unique_ptr<T> make_unique(size_t n);           // C++14
        -:  355:template<class T, class... Args> unspecified   make_unique(Args&&...) = delete; // C++14, T == U[N]
        -:  356:
        -:  357:template<class T>
        -:  358:class shared_ptr
        -:  359:{
        -:  360:public:
        -:  361:    typedef T element_type;
        -:  362:
        -:  363:    // constructors:
        -:  364:    constexpr shared_ptr() noexcept;
        -:  365:    template<class Y> explicit shared_ptr(Y* p);
        -:  366:    template<class Y, class D> shared_ptr(Y* p, D d);
        -:  367:    template<class Y, class D, class A> shared_ptr(Y* p, D d, A a);
        -:  368:    template <class D> shared_ptr(nullptr_t p, D d);
        -:  369:    template <class D, class A> shared_ptr(nullptr_t p, D d, A a);
        -:  370:    template<class Y> shared_ptr(const shared_ptr<Y>& r, T *p) noexcept;
        -:  371:    shared_ptr(const shared_ptr& r) noexcept;
        -:  372:    template<class Y> shared_ptr(const shared_ptr<Y>& r) noexcept;
        -:  373:    shared_ptr(shared_ptr&& r) noexcept;
        -:  374:    template<class Y> shared_ptr(shared_ptr<Y>&& r) noexcept;
        -:  375:    template<class Y> explicit shared_ptr(const weak_ptr<Y>& r);
        -:  376:    template<class Y> shared_ptr(auto_ptr<Y>&& r);
        -:  377:    template <class Y, class D> shared_ptr(unique_ptr<Y, D>&& r);
        -:  378:    shared_ptr(nullptr_t) : shared_ptr() { }
        -:  379:
        -:  380:    // destructor:
        -:  381:    ~shared_ptr();
        -:  382:
        -:  383:    // assignment:
        -:  384:    shared_ptr& operator=(const shared_ptr& r) noexcept;
        -:  385:    template<class Y> shared_ptr& operator=(const shared_ptr<Y>& r) noexcept;
        -:  386:    shared_ptr& operator=(shared_ptr&& r) noexcept;
        -:  387:    template<class Y> shared_ptr& operator=(shared_ptr<Y>&& r);
        -:  388:    template<class Y> shared_ptr& operator=(auto_ptr<Y>&& r);
        -:  389:    template <class Y, class D> shared_ptr& operator=(unique_ptr<Y, D>&& r);
        -:  390:
        -:  391:    // modifiers:
        -:  392:    void swap(shared_ptr& r) noexcept;
        -:  393:    void reset() noexcept;
        -:  394:    template<class Y> void reset(Y* p);
        -:  395:    template<class Y, class D> void reset(Y* p, D d);
        -:  396:    template<class Y, class D, class A> void reset(Y* p, D d, A a);
        -:  397:
        -:  398:    // observers:
        -:  399:    T* get() const noexcept;
        -:  400:    T& operator*() const noexcept;
        -:  401:    T* operator->() const noexcept;
        -:  402:    long use_count() const noexcept;
        -:  403:    bool unique() const noexcept;
        -:  404:    explicit operator bool() const noexcept;
        -:  405:    template<class U> bool owner_before(shared_ptr<U> const& b) const;
        -:  406:    template<class U> bool owner_before(weak_ptr<U> const& b) const;
        -:  407:};
        -:  408:
        -:  409:// shared_ptr comparisons:
        -:  410:template<class T, class U>
        -:  411:    bool operator==(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  412:template<class T, class U>
        -:  413:    bool operator!=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  414:template<class T, class U>
        -:  415:    bool operator<(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  416:template<class T, class U>
        -:  417:    bool operator>(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  418:template<class T, class U>
        -:  419:    bool operator<=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  420:template<class T, class U>
        -:  421:    bool operator>=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  422:
        -:  423:template <class T>
        -:  424:    bool operator==(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  425:template <class T>
        -:  426:    bool operator==(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  427:template <class T>
        -:  428:    bool operator!=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  429:template <class T>
        -:  430:    bool operator!=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  431:template <class T>
        -:  432:    bool operator<(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  433:template <class T>
        -:  434:bool operator<(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  435:template <class T>
        -:  436:    bool operator<=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  437:template <class T>
        -:  438:    bool operator<=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  439:template <class T>
        -:  440:    bool operator>(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  441:template <class T>
        -:  442:    bool operator>(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  443:template <class T>
        -:  444:    bool operator>=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  445:template <class T>
        -:  446:    bool operator>=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  447:
        -:  448:// shared_ptr specialized algorithms:
        -:  449:template<class T> void swap(shared_ptr<T>& a, shared_ptr<T>& b) noexcept;
        -:  450:
        -:  451:// shared_ptr casts:
        -:  452:template<class T, class U>
        -:  453:    shared_ptr<T> static_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  454:template<class T, class U>
        -:  455:    shared_ptr<T> dynamic_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  456:template<class T, class U>
        -:  457:    shared_ptr<T> const_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  458:
        -:  459:// shared_ptr I/O:
        -:  460:template<class E, class T, class Y>
        -:  461:    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, shared_ptr<Y> const& p);
        -:  462:
        -:  463:// shared_ptr get_deleter:
        -:  464:template<class D, class T> D* get_deleter(shared_ptr<T> const& p) noexcept;
        -:  465:
        -:  466:template<class T, class... Args>
        -:  467:    shared_ptr<T> make_shared(Args&&... args);
        -:  468:template<class T, class A, class... Args>
        -:  469:    shared_ptr<T> allocate_shared(const A& a, Args&&... args);
        -:  470:
        -:  471:template<class T>
        -:  472:class weak_ptr
        -:  473:{
        -:  474:public:
        -:  475:    typedef T element_type;
        -:  476:
        -:  477:    // constructors
        -:  478:    constexpr weak_ptr() noexcept;
        -:  479:    template<class Y> weak_ptr(shared_ptr<Y> const& r) noexcept;
        -:  480:    weak_ptr(weak_ptr const& r) noexcept;
        -:  481:    template<class Y> weak_ptr(weak_ptr<Y> const& r) noexcept;
        -:  482:    weak_ptr(weak_ptr&& r) noexcept;                      // C++14
        -:  483:    template<class Y> weak_ptr(weak_ptr<Y>&& r) noexcept; // C++14
        -:  484:
        -:  485:    // destructor
        -:  486:    ~weak_ptr();
        -:  487:
        -:  488:    // assignment
        -:  489:    weak_ptr& operator=(weak_ptr const& r) noexcept;
        -:  490:    template<class Y> weak_ptr& operator=(weak_ptr<Y> const& r) noexcept;
        -:  491:    template<class Y> weak_ptr& operator=(shared_ptr<Y> const& r) noexcept;
        -:  492:    weak_ptr& operator=(weak_ptr&& r) noexcept;                      // C++14
        -:  493:    template<class Y> weak_ptr& operator=(weak_ptr<Y>&& r) noexcept; // C++14
        -:  494:
        -:  495:    // modifiers
        -:  496:    void swap(weak_ptr& r) noexcept;
        -:  497:    void reset() noexcept;
        -:  498:
        -:  499:    // observers
        -:  500:    long use_count() const noexcept;
        -:  501:    bool expired() const noexcept;
        -:  502:    shared_ptr<T> lock() const noexcept;
        -:  503:    template<class U> bool owner_before(shared_ptr<U> const& b) const;
        -:  504:    template<class U> bool owner_before(weak_ptr<U> const& b) const;
        -:  505:};
        -:  506:
        -:  507:// weak_ptr specialized algorithms:
        -:  508:template<class T> void swap(weak_ptr<T>& a, weak_ptr<T>& b) noexcept;
        -:  509:
        -:  510:// class owner_less:
        -:  511:template<class T> struct owner_less;
        -:  512:
        -:  513:template<class T>
        -:  514:struct owner_less<shared_ptr<T>>
        -:  515:    : binary_function<shared_ptr<T>, shared_ptr<T>, bool>
        -:  516:{
        -:  517:    typedef bool result_type;
        -:  518:    bool operator()(shared_ptr<T> const&, shared_ptr<T> const&) const;
        -:  519:    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const;
        -:  520:    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const;
        -:  521:};
        -:  522:
        -:  523:template<class T>
        -:  524:struct owner_less<weak_ptr<T>>
        -:  525:    : binary_function<weak_ptr<T>, weak_ptr<T>, bool>
        -:  526:{
        -:  527:    typedef bool result_type;
        -:  528:    bool operator()(weak_ptr<T> const&, weak_ptr<T> const&) const;
        -:  529:    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const;
        -:  530:    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const;
        -:  531:};
        -:  532:
        -:  533:template<class T>
        -:  534:class enable_shared_from_this
        -:  535:{
        -:  536:protected:
        -:  537:    constexpr enable_shared_from_this() noexcept;
        -:  538:    enable_shared_from_this(enable_shared_from_this const&) noexcept;
        -:  539:    enable_shared_from_this& operator=(enable_shared_from_this const&) noexcept;
        -:  540:    ~enable_shared_from_this();
        -:  541:public:
        -:  542:    shared_ptr<T> shared_from_this();
        -:  543:    shared_ptr<T const> shared_from_this() const;
        -:  544:};
        -:  545:
        -:  546:template<class T>
        -:  547:    bool atomic_is_lock_free(const shared_ptr<T>* p);
        -:  548:template<class T>
        -:  549:    shared_ptr<T> atomic_load(const shared_ptr<T>* p);
        -:  550:template<class T>
        -:  551:    shared_ptr<T> atomic_load_explicit(const shared_ptr<T>* p, memory_order mo);
        -:  552:template<class T>
        -:  553:    void atomic_store(shared_ptr<T>* p, shared_ptr<T> r);
        -:  554:template<class T>
        -:  555:    void atomic_store_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
        -:  556:template<class T>
        -:  557:    shared_ptr<T> atomic_exchange(shared_ptr<T>* p, shared_ptr<T> r);
        -:  558:template<class T>
        -:  559:    shared_ptr<T>
        -:  560:    atomic_exchange_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
        -:  561:template<class T>
        -:  562:    bool
        -:  563:    atomic_compare_exchange_weak(shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
        -:  564:template<class T>
        -:  565:    bool
        -:  566:    atomic_compare_exchange_strong( shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
        -:  567:template<class T>
        -:  568:    bool
        -:  569:    atomic_compare_exchange_weak_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
        -:  570:                                          shared_ptr<T> w, memory_order success,
        -:  571:                                          memory_order failure);
        -:  572:template<class T>
        -:  573:    bool
        -:  574:    atomic_compare_exchange_strong_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
        -:  575:                                            shared_ptr<T> w, memory_order success,
        -:  576:                                            memory_order failure);
        -:  577:// Hash support
        -:  578:template <class T> struct hash;
        -:  579:template <class T, class D> struct hash<unique_ptr<T, D> >;
        -:  580:template <class T> struct hash<shared_ptr<T> >;
        -:  581:
        -:  582:// Pointer safety
        -:  583:enum class pointer_safety { relaxed, preferred, strict };
        -:  584:void declare_reachable(void *p);
        -:  585:template <class T> T *undeclare_reachable(T *p);
        -:  586:void declare_no_pointers(char *p, size_t n);
        -:  587:void undeclare_no_pointers(char *p, size_t n);
        -:  588:pointer_safety get_pointer_safety() noexcept;
        -:  589:
        -:  590:void* align(size_t alignment, size_t size, void*& ptr, size_t& space);
        -:  591:
        -:  592:}  // std
        -:  593:
        -:  594:*/
        -:  595:
        -:  596:#include <__config>
        -:  597:#include <type_traits>
        -:  598:#include <typeinfo>
        -:  599:#include <cstddef>
        -:  600:#include <cstdint>
        -:  601:#include <new>
        -:  602:#include <utility>
        -:  603:#include <limits>
        -:  604:#include <iterator>
        -:  605:#include <__functional_base>
        -:  606:#include <iosfwd>
        -:  607:#include <tuple>
        -:  608:#include <cstring>
        -:  609:#if defined(_LIBCPP_NO_EXCEPTIONS)
        -:  610:    #include <cassert>
        -:  611:#endif
        -:  612:
        -:  613:#if __has_feature(cxx_atomic) && !defined(_LIBCPP_HAS_NO_THREADS)
        -:  614:#  include <atomic>
        -:  615:#endif
        -:  616:
        -:  617:#include <__undef_min_max>
        -:  618:
        -:  619:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  620:#pragma GCC system_header
        -:  621:#endif
        -:  622:
        -:  623:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  624:
        -:  625:// addressof moved to <__functional_base>
        -:  626:
        -:  627:template <class _Tp> class allocator;
        -:  628:
        -:  629:template <>
        -:  630:class _LIBCPP_TYPE_VIS_ONLY allocator<void>
        -:  631:{
        -:  632:public:
        -:  633:    typedef void*             pointer;
        -:  634:    typedef const void*       const_pointer;
        -:  635:    typedef void              value_type;
        -:  636:
        -:  637:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  638:};
        -:  639:
        -:  640:template <>
        -:  641:class _LIBCPP_TYPE_VIS_ONLY allocator<const void>
        -:  642:{
        -:  643:public:
        -:  644:    typedef const void*       pointer;
        -:  645:    typedef const void*       const_pointer;
        -:  646:    typedef const void        value_type;
        -:  647:
        -:  648:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  649:};
        -:  650:
        -:  651:// pointer_traits
        -:  652:
        -:  653:template <class _Tp>
        -:  654:struct __has_element_type
        -:  655:{
        -:  656:private:
        -:  657:    struct __two {char __lx; char __lxx;};
        -:  658:    template <class _Up> static __two __test(...);
        -:  659:    template <class _Up> static char __test(typename _Up::element_type* = 0);
        -:  660:public:
        -:  661:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  662:};
        -:  663:
        -:  664:template <class _Ptr, bool = __has_element_type<_Ptr>::value>
        -:  665:struct __pointer_traits_element_type;
        -:  666:
        -:  667:template <class _Ptr>
        -:  668:struct __pointer_traits_element_type<_Ptr, true>
        -:  669:{
        -:  670:    typedef typename _Ptr::element_type type;
        -:  671:};
        -:  672:
        -:  673:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -:  674:
        -:  675:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:  676:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, true>
        -:  677:{
        -:  678:    typedef typename _Sp<_Tp, _Args...>::element_type type;
        -:  679:};
        -:  680:
        -:  681:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:  682:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, false>
        -:  683:{
        -:  684:    typedef _Tp type;
        -:  685:};
        -:  686:
        -:  687:#else  // _LIBCPP_HAS_NO_VARIADICS
        -:  688:
        -:  689:template <template <class> class _Sp, class _Tp>
        -:  690:struct __pointer_traits_element_type<_Sp<_Tp>, true>
        -:  691:{
        -:  692:    typedef typename _Sp<_Tp>::element_type type;
        -:  693:};
        -:  694:
        -:  695:template <template <class> class _Sp, class _Tp>
        -:  696:struct __pointer_traits_element_type<_Sp<_Tp>, false>
        -:  697:{
        -:  698:    typedef _Tp type;
        -:  699:};
        -:  700:
        -:  701:template <template <class, class> class _Sp, class _Tp, class _A0>
        -:  702:struct __pointer_traits_element_type<_Sp<_Tp, _A0>, true>
        -:  703:{
        -:  704:    typedef typename _Sp<_Tp, _A0>::element_type type;
        -:  705:};
        -:  706:
        -:  707:template <template <class, class> class _Sp, class _Tp, class _A0>
        -:  708:struct __pointer_traits_element_type<_Sp<_Tp, _A0>, false>
        -:  709:{
        -:  710:    typedef _Tp type;
        -:  711:};
        -:  712:
        -:  713:template <template <class, class, class> class _Sp, class _Tp, class _A0, class _A1>
        -:  714:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1>, true>
        -:  715:{
        -:  716:    typedef typename _Sp<_Tp, _A0, _A1>::element_type type;
        -:  717:};
        -:  718:
        -:  719:template <template <class, class, class> class _Sp, class _Tp, class _A0, class _A1>
        -:  720:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1>, false>
        -:  721:{
        -:  722:    typedef _Tp type;
        -:  723:};
        -:  724:
        -:  725:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  726:                                                           class _A1, class _A2>
        -:  727:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1, _A2>, true>
        -:  728:{
        -:  729:    typedef typename _Sp<_Tp, _A0, _A1, _A2>::element_type type;
        -:  730:};
        -:  731:
        -:  732:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  733:                                                           class _A1, class _A2>
        -:  734:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1, _A2>, false>
        -:  735:{
        -:  736:    typedef _Tp type;
        -:  737:};
        -:  738:
        -:  739:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -:  740:
        -:  741:template <class _Tp>
        -:  742:struct __has_difference_type
        -:  743:{
        -:  744:private:
        -:  745:    struct __two {char __lx; char __lxx;};
        -:  746:    template <class _Up> static __two __test(...);
        -:  747:    template <class _Up> static char __test(typename _Up::difference_type* = 0);
        -:  748:public:
        -:  749:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  750:};
        -:  751:
        -:  752:template <class _Ptr, bool = __has_difference_type<_Ptr>::value>
        -:  753:struct __pointer_traits_difference_type
        -:  754:{
        -:  755:    typedef ptrdiff_t type;
        -:  756:};
        -:  757:
        -:  758:template <class _Ptr>
        -:  759:struct __pointer_traits_difference_type<_Ptr, true>
        -:  760:{
        -:  761:    typedef typename _Ptr::difference_type type;
        -:  762:};
        -:  763:
        -:  764:template <class _Tp, class _Up>
        -:  765:struct __has_rebind
        -:  766:{
        -:  767:private:
        -:  768:    struct __two {char __lx; char __lxx;};
        -:  769:    template <class _Xp> static __two __test(...);
        -:  770:    template <class _Xp> static char __test(typename _Xp::template rebind<_Up>* = 0);
        -:  771:public:
        -:  772:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  773:};
        -:  774:
        -:  775:template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
        -:  776:struct __pointer_traits_rebind
        -:  777:{
        -:  778:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  779:    typedef typename _Tp::template rebind<_Up> type;
        -:  780:#else
        -:  781:    typedef typename _Tp::template rebind<_Up>::other type;
        -:  782:#endif
        -:  783:};
        -:  784:
        -:  785:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -:  786:
        -:  787:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:  788:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, true>
        -:  789:{
        -:  790:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  791:    typedef typename _Sp<_Tp, _Args...>::template rebind<_Up> type;
        -:  792:#else
        -:  793:    typedef typename _Sp<_Tp, _Args...>::template rebind<_Up>::other type;
        -:  794:#endif
        -:  795:};
        -:  796:
        -:  797:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:  798:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, false>
        -:  799:{
        -:  800:    typedef _Sp<_Up, _Args...> type;
        -:  801:};
        -:  802:
        -:  803:#else  // _LIBCPP_HAS_NO_VARIADICS
        -:  804:
        -:  805:template <template <class> class _Sp, class _Tp, class _Up>
        -:  806:struct __pointer_traits_rebind<_Sp<_Tp>, _Up, true>
        -:  807:{
        -:  808:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  809:    typedef typename _Sp<_Tp>::template rebind<_Up> type;
        -:  810:#else
        -:  811:    typedef typename _Sp<_Tp>::template rebind<_Up>::other type;
        -:  812:#endif
        -:  813:};
        -:  814:
        -:  815:template <template <class> class _Sp, class _Tp, class _Up>
        -:  816:struct __pointer_traits_rebind<_Sp<_Tp>, _Up, false>
        -:  817:{
        -:  818:    typedef _Sp<_Up> type;
        -:  819:};
        -:  820:
        -:  821:template <template <class, class> class _Sp, class _Tp, class _A0, class _Up>
        -:  822:struct __pointer_traits_rebind<_Sp<_Tp, _A0>, _Up, true>
        -:  823:{
        -:  824:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  825:    typedef typename _Sp<_Tp, _A0>::template rebind<_Up> type;
        -:  826:#else
        -:  827:    typedef typename _Sp<_Tp, _A0>::template rebind<_Up>::other type;
        -:  828:#endif
        -:  829:};
        -:  830:
        -:  831:template <template <class, class> class _Sp, class _Tp, class _A0, class _Up>
        -:  832:struct __pointer_traits_rebind<_Sp<_Tp, _A0>, _Up, false>
        -:  833:{
        -:  834:    typedef _Sp<_Up, _A0> type;
        -:  835:};
        -:  836:
        -:  837:template <template <class, class, class> class _Sp, class _Tp, class _A0,
        -:  838:                                         class _A1, class _Up>
        -:  839:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1>, _Up, true>
        -:  840:{
        -:  841:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  842:    typedef typename _Sp<_Tp, _A0, _A1>::template rebind<_Up> type;
        -:  843:#else
        -:  844:    typedef typename _Sp<_Tp, _A0, _A1>::template rebind<_Up>::other type;
        -:  845:#endif
        -:  846:};
        -:  847:
        -:  848:template <template <class, class, class> class _Sp, class _Tp, class _A0,
        -:  849:                                         class _A1, class _Up>
        -:  850:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1>, _Up, false>
        -:  851:{
        -:  852:    typedef _Sp<_Up, _A0, _A1> type;
        -:  853:};
        -:  854:
        -:  855:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  856:                                                class _A1, class _A2, class _Up>
        -:  857:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1, _A2>, _Up, true>
        -:  858:{
        -:  859:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  860:    typedef typename _Sp<_Tp, _A0, _A1, _A2>::template rebind<_Up> type;
        -:  861:#else
        -:  862:    typedef typename _Sp<_Tp, _A0, _A1, _A2>::template rebind<_Up>::other type;
        -:  863:#endif
        -:  864:};
        -:  865:
        -:  866:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  867:                                                class _A1, class _A2, class _Up>
        -:  868:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1, _A2>, _Up, false>
        -:  869:{
        -:  870:    typedef _Sp<_Up, _A0, _A1, _A2> type;
        -:  871:};
        -:  872:
        -:  873:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -:  874:
        -:  875:template <class _Ptr>
        -:  876:struct _LIBCPP_TYPE_VIS_ONLY pointer_traits
        -:  877:{
        -:  878:    typedef _Ptr                                                     pointer;
        -:  879:    typedef typename __pointer_traits_element_type<pointer>::type    element_type;
        -:  880:    typedef typename __pointer_traits_difference_type<pointer>::type difference_type;
        -:  881:
        -:  882:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  883:    template <class _Up> using rebind = typename __pointer_traits_rebind<pointer, _Up>::type;
        -:  884:#else
        -:  885:    template <class _Up> struct rebind
        -:  886:        {typedef typename __pointer_traits_rebind<pointer, _Up>::type other;};
        -:  887:#endif  // _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  888:
        -:  889:private:
        -:  890:    struct __nat {};
        -:  891:public:
        -:  892:    _LIBCPP_INLINE_VISIBILITY
        -:  893:    static pointer pointer_to(typename conditional<is_void<element_type>::value,
        -:  894:                                           __nat, element_type>::type& __r)
        -:  895:        {return pointer::pointer_to(__r);}
        -:  896:};
        -:  897:
        -:  898:template <class _Tp>
        -:  899:struct _LIBCPP_TYPE_VIS_ONLY pointer_traits<_Tp*>
        -:  900:{
        -:  901:    typedef _Tp*      pointer;
        -:  902:    typedef _Tp       element_type;
        -:  903:    typedef ptrdiff_t difference_type;
        -:  904:
        -:  905:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  906:    template <class _Up> using rebind = _Up*;
        -:  907:#else
        -:  908:    template <class _Up> struct rebind {typedef _Up* other;};
        -:  909:#endif
        -:  910:
        -:  911:private:
        -:  912:    struct __nat {};
        -:  913:public:
        -:  914:    _LIBCPP_INLINE_VISIBILITY
        -:  915:    static pointer pointer_to(typename conditional<is_void<element_type>::value,
        -:  916:                                      __nat, element_type>::type& __r) _NOEXCEPT
      348:  917:        {return _VSTD::addressof(__r);}
        -:  918:};
        -:  919:
        -:  920:// allocator_traits
        -:  921:
        -:  922:namespace __has_pointer_type_imp
        -:  923:{
        -:  924:    template <class _Up> static __two __test(...);
        -:  925:    template <class _Up> static char __test(typename _Up::pointer* = 0);
        -:  926:}
        -:  927:
        -:  928:template <class _Tp>
        -:  929:struct __has_pointer_type
        -:  930:    : public integral_constant<bool, sizeof(__has_pointer_type_imp::__test<_Tp>(0)) == 1>
        -:  931:{
        -:  932:};
        -:  933:
        -:  934:namespace __pointer_type_imp
        -:  935:{
        -:  936:
        -:  937:template <class _Tp, class _Dp, bool = __has_pointer_type<_Dp>::value>
        -:  938:struct __pointer_type
        -:  939:{
        -:  940:    typedef typename _Dp::pointer type;
        -:  941:};
        -:  942:
        -:  943:template <class _Tp, class _Dp>
        -:  944:struct __pointer_type<_Tp, _Dp, false>
        -:  945:{
        -:  946:    typedef _Tp* type;
        -:  947:};
        -:  948:
        -:  949:}  // __pointer_type_imp
        -:  950:
        -:  951:template <class _Tp, class _Dp>
        -:  952:struct __pointer_type
        -:  953:{
        -:  954:    typedef typename __pointer_type_imp::__pointer_type<_Tp, typename remove_reference<_Dp>::type>::type type;
        -:  955:};
        -:  956:
        -:  957:template <class _Tp>
        -:  958:struct __has_const_pointer
        -:  959:{
        -:  960:private:
        -:  961:    struct __two {char __lx; char __lxx;};
        -:  962:    template <class _Up> static __two __test(...);
        -:  963:    template <class _Up> static char __test(typename _Up::const_pointer* = 0);
        -:  964:public:
        -:  965:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  966:};
        -:  967:
        -:  968:template <class _Tp, class _Ptr, class _Alloc, bool = __has_const_pointer<_Alloc>::value>
        -:  969:struct __const_pointer
        -:  970:{
        -:  971:    typedef typename _Alloc::const_pointer type;
        -:  972:};
        -:  973:
        -:  974:template <class _Tp, class _Ptr, class _Alloc>
        -:  975:struct __const_pointer<_Tp, _Ptr, _Alloc, false>
        -:  976:{
        -:  977:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -:  978:    typedef typename pointer_traits<_Ptr>::template rebind<const _Tp> type;
        -:  979:#else
        -:  980:    typedef typename pointer_traits<_Ptr>::template rebind<const _Tp>::other type;
        -:  981:#endif
        -:  982:};
        -:  983:
        -:  984:template <class _Tp>
        -:  985:struct __has_void_pointer
        -:  986:{
        -:  987:private:
        -:  988:    struct __two {char __lx; char __lxx;};
        -:  989:    template <class _Up> static __two __test(...);
        -:  990:    template <class _Up> static char __test(typename _Up::void_pointer* = 0);
        -:  991:public:
        -:  992:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  993:};
        -:  994:
        -:  995:template <class _Ptr, class _Alloc, bool = __has_void_pointer<_Alloc>::value>
        -:  996:struct __void_pointer
        -:  997:{
        -:  998:    typedef typename _Alloc::void_pointer type;
        -:  999:};
        -: 1000:
        -: 1001:template <class _Ptr, class _Alloc>
        -: 1002:struct __void_pointer<_Ptr, _Alloc, false>
        -: 1003:{
        -: 1004:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1005:    typedef typename pointer_traits<_Ptr>::template rebind<void> type;
        -: 1006:#else
        -: 1007:    typedef typename pointer_traits<_Ptr>::template rebind<void>::other type;
        -: 1008:#endif
        -: 1009:};
        -: 1010:
        -: 1011:template <class _Tp>
        -: 1012:struct __has_const_void_pointer
        -: 1013:{
        -: 1014:private:
        -: 1015:    struct __two {char __lx; char __lxx;};
        -: 1016:    template <class _Up> static __two __test(...);
        -: 1017:    template <class _Up> static char __test(typename _Up::const_void_pointer* = 0);
        -: 1018:public:
        -: 1019:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1020:};
        -: 1021:
        -: 1022:template <class _Ptr, class _Alloc, bool = __has_const_void_pointer<_Alloc>::value>
        -: 1023:struct __const_void_pointer
        -: 1024:{
        -: 1025:    typedef typename _Alloc::const_void_pointer type;
        -: 1026:};
        -: 1027:
        -: 1028:template <class _Ptr, class _Alloc>
        -: 1029:struct __const_void_pointer<_Ptr, _Alloc, false>
        -: 1030:{
        -: 1031:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1032:    typedef typename pointer_traits<_Ptr>::template rebind<const void> type;
        -: 1033:#else
        -: 1034:    typedef typename pointer_traits<_Ptr>::template rebind<const void>::other type;
        -: 1035:#endif
        -: 1036:};
        -: 1037:
        -: 1038:template <class _Tp>
        -: 1039:inline _LIBCPP_INLINE_VISIBILITY
        -: 1040:_Tp*
        -: 1041:__to_raw_pointer(_Tp* __p) _NOEXCEPT
        -: 1042:{
      326: 1043:    return __p;
        -: 1044:}
        -: 1045:
        -: 1046:template <class _Pointer>
        -: 1047:inline _LIBCPP_INLINE_VISIBILITY
        -: 1048:typename pointer_traits<_Pointer>::element_type*
        -: 1049:__to_raw_pointer(_Pointer __p) _NOEXCEPT
        -: 1050:{
        -: 1051:    return _VSTD::__to_raw_pointer(__p.operator->());
        -: 1052:}
        -: 1053:
        -: 1054:template <class _Tp>
        -: 1055:struct __has_size_type
        -: 1056:{
        -: 1057:private:
        -: 1058:    struct __two {char __lx; char __lxx;};
        -: 1059:    template <class _Up> static __two __test(...);
        -: 1060:    template <class _Up> static char __test(typename _Up::size_type* = 0);
        -: 1061:public:
        -: 1062:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1063:};
        -: 1064:
        -: 1065:template <class _Alloc, class _DiffType, bool = __has_size_type<_Alloc>::value>
        -: 1066:struct __size_type
        -: 1067:{
        -: 1068:    typedef typename make_unsigned<_DiffType>::type type;
        -: 1069:};
        -: 1070:
        -: 1071:template <class _Alloc, class _DiffType>
        -: 1072:struct __size_type<_Alloc, _DiffType, true>
        -: 1073:{
        -: 1074:    typedef typename _Alloc::size_type type;
        -: 1075:};
        -: 1076:
        -: 1077:template <class _Tp>
        -: 1078:struct __has_propagate_on_container_copy_assignment
        -: 1079:{
        -: 1080:private:
        -: 1081:    struct __two {char __lx; char __lxx;};
        -: 1082:    template <class _Up> static __two __test(...);
        -: 1083:    template <class _Up> static char __test(typename _Up::propagate_on_container_copy_assignment* = 0);
        -: 1084:public:
        -: 1085:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1086:};
        -: 1087:
        -: 1088:template <class _Alloc, bool = __has_propagate_on_container_copy_assignment<_Alloc>::value>
        -: 1089:struct __propagate_on_container_copy_assignment
        -: 1090:{
        -: 1091:    typedef false_type type;
        -: 1092:};
        -: 1093:
        -: 1094:template <class _Alloc>
        -: 1095:struct __propagate_on_container_copy_assignment<_Alloc, true>
        -: 1096:{
        -: 1097:    typedef typename _Alloc::propagate_on_container_copy_assignment type;
        -: 1098:};
        -: 1099:
        -: 1100:template <class _Tp>
        -: 1101:struct __has_propagate_on_container_move_assignment
        -: 1102:{
        -: 1103:private:
        -: 1104:    struct __two {char __lx; char __lxx;};
        -: 1105:    template <class _Up> static __two __test(...);
        -: 1106:    template <class _Up> static char __test(typename _Up::propagate_on_container_move_assignment* = 0);
        -: 1107:public:
        -: 1108:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1109:};
        -: 1110:
        -: 1111:template <class _Alloc, bool = __has_propagate_on_container_move_assignment<_Alloc>::value>
        -: 1112:struct __propagate_on_container_move_assignment
        -: 1113:{
        -: 1114:    typedef false_type type;
        -: 1115:};
        -: 1116:
        -: 1117:template <class _Alloc>
        -: 1118:struct __propagate_on_container_move_assignment<_Alloc, true>
        -: 1119:{
        -: 1120:    typedef typename _Alloc::propagate_on_container_move_assignment type;
        -: 1121:};
        -: 1122:
        -: 1123:template <class _Tp>
        -: 1124:struct __has_propagate_on_container_swap
        -: 1125:{
        -: 1126:private:
        -: 1127:    struct __two {char __lx; char __lxx;};
        -: 1128:    template <class _Up> static __two __test(...);
        -: 1129:    template <class _Up> static char __test(typename _Up::propagate_on_container_swap* = 0);
        -: 1130:public:
        -: 1131:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1132:};
        -: 1133:
        -: 1134:template <class _Alloc, bool = __has_propagate_on_container_swap<_Alloc>::value>
        -: 1135:struct __propagate_on_container_swap
        -: 1136:{
        -: 1137:    typedef false_type type;
        -: 1138:};
        -: 1139:
        -: 1140:template <class _Alloc>
        -: 1141:struct __propagate_on_container_swap<_Alloc, true>
        -: 1142:{
        -: 1143:    typedef typename _Alloc::propagate_on_container_swap type;
        -: 1144:};
        -: 1145:
        -: 1146:template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
        -: 1147:struct __has_rebind_other
        -: 1148:{
        -: 1149:private:
        -: 1150:    struct __two {char __lx; char __lxx;};
        -: 1151:    template <class _Xp> static __two __test(...);
        -: 1152:    template <class _Xp> static char __test(typename _Xp::template rebind<_Up>::other* = 0);
        -: 1153:public:
        -: 1154:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1155:};
        -: 1156:
        -: 1157:template <class _Tp, class _Up>
        -: 1158:struct __has_rebind_other<_Tp, _Up, false>
        -: 1159:{
        -: 1160:    static const bool value = false;
        -: 1161:};
        -: 1162:
        -: 1163:template <class _Tp, class _Up, bool = __has_rebind_other<_Tp, _Up>::value>
        -: 1164:struct __allocator_traits_rebind
        -: 1165:{
        -: 1166:    typedef typename _Tp::template rebind<_Up>::other type;
        -: 1167:};
        -: 1168:
        -: 1169:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1170:
        -: 1171:template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
        -: 1172:struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, true>
        -: 1173:{
        -: 1174:    typedef typename _Alloc<_Tp, _Args...>::template rebind<_Up>::other type;
        -: 1175:};
        -: 1176:
        -: 1177:template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
        -: 1178:struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, false>
        -: 1179:{
        -: 1180:    typedef _Alloc<_Up, _Args...> type;
        -: 1181:};
        -: 1182:
        -: 1183:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 1184:
        -: 1185:template <template <class> class _Alloc, class _Tp, class _Up>
        -: 1186:struct __allocator_traits_rebind<_Alloc<_Tp>, _Up, true>
        -: 1187:{
        -: 1188:    typedef typename _Alloc<_Tp>::template rebind<_Up>::other type;
        -: 1189:};
        -: 1190:
        -: 1191:template <template <class> class _Alloc, class _Tp, class _Up>
        -: 1192:struct __allocator_traits_rebind<_Alloc<_Tp>, _Up, false>
        -: 1193:{
        -: 1194:    typedef _Alloc<_Up> type;
        -: 1195:};
        -: 1196:
        -: 1197:template <template <class, class> class _Alloc, class _Tp, class _A0, class _Up>
        -: 1198:struct __allocator_traits_rebind<_Alloc<_Tp, _A0>, _Up, true>
        -: 1199:{
        -: 1200:    typedef typename _Alloc<_Tp, _A0>::template rebind<_Up>::other type;
        -: 1201:};
        -: 1202:
        -: 1203:template <template <class, class> class _Alloc, class _Tp, class _A0, class _Up>
        -: 1204:struct __allocator_traits_rebind<_Alloc<_Tp, _A0>, _Up, false>
        -: 1205:{
        -: 1206:    typedef _Alloc<_Up, _A0> type;
        -: 1207:};
        -: 1208:
        -: 1209:template <template <class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1210:                                         class _A1, class _Up>
        -: 1211:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1>, _Up, true>
        -: 1212:{
        -: 1213:    typedef typename _Alloc<_Tp, _A0, _A1>::template rebind<_Up>::other type;
        -: 1214:};
        -: 1215:
        -: 1216:template <template <class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1217:                                         class _A1, class _Up>
        -: 1218:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1>, _Up, false>
        -: 1219:{
        -: 1220:    typedef _Alloc<_Up, _A0, _A1> type;
        -: 1221:};
        -: 1222:
        -: 1223:template <template <class, class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1224:                                                class _A1, class _A2, class _Up>
        -: 1225:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1, _A2>, _Up, true>
        -: 1226:{
        -: 1227:    typedef typename _Alloc<_Tp, _A0, _A1, _A2>::template rebind<_Up>::other type;
        -: 1228:};
        -: 1229:
        -: 1230:template <template <class, class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1231:                                                class _A1, class _A2, class _Up>
        -: 1232:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1, _A2>, _Up, false>
        -: 1233:{
        -: 1234:    typedef _Alloc<_Up, _A0, _A1, _A2> type;
        -: 1235:};
        -: 1236:
        -: 1237:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1238:
        -: 1239:#ifndef _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -: 1240:
        -: 1241:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1242:auto
        -: 1243:__has_allocate_hint_test(_Alloc&& __a, _SizeType&& __sz, _ConstVoidPtr&& __p)
        -: 1244:    -> decltype(__a.allocate(__sz, __p), true_type());
        -: 1245:
        -: 1246:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1247:auto
        -: 1248:__has_allocate_hint_test(const _Alloc& __a, _SizeType&& __sz, _ConstVoidPtr&& __p)
        -: 1249:    -> false_type;
        -: 1250:
        -: 1251:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1252:struct __has_allocate_hint
        -: 1253:    : integral_constant<bool,
        -: 1254:        is_same<
        -: 1255:            decltype(__has_allocate_hint_test(declval<_Alloc>(),
        -: 1256:                                          declval<_SizeType>(),
        -: 1257:                                          declval<_ConstVoidPtr>())),
        -: 1258:            true_type>::value>
        -: 1259:{
        -: 1260:};
        -: 1261:
        -: 1262:#else  // _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -: 1263:
        -: 1264:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1265:struct __has_allocate_hint
        -: 1266:    : true_type
        -: 1267:{
        -: 1268:};
        -: 1269:
        -: 1270:#endif  // _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -: 1271:
        -: 1272:#if !defined(_LIBCPP_HAS_NO_ADVANCED_SFINAE) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1273:
        -: 1274:template <class _Alloc, class _Tp, class ..._Args>
        -: 1275:decltype(_VSTD::declval<_Alloc>().construct(_VSTD::declval<_Tp*>(),
        -: 1276:                                           _VSTD::declval<_Args>()...),
        -: 1277:                                           true_type())
        -: 1278:__has_construct_test(_Alloc&& __a, _Tp* __p, _Args&& ...__args);
        -: 1279:
        -: 1280:template <class _Alloc, class _Pointer, class ..._Args>
        -: 1281:false_type
        -: 1282:__has_construct_test(const _Alloc& __a, _Pointer&& __p, _Args&& ...__args);
        -: 1283:
        -: 1284:template <class _Alloc, class _Pointer, class ..._Args>
        -: 1285:struct __has_construct
        -: 1286:    : integral_constant<bool,
        -: 1287:        is_same<
        -: 1288:            decltype(__has_construct_test(declval<_Alloc>(),
        -: 1289:                                          declval<_Pointer>(),
        -: 1290:                                          declval<_Args>()...)),
        -: 1291:            true_type>::value>
        -: 1292:{
        -: 1293:};
        -: 1294:
        -: 1295:template <class _Alloc, class _Pointer>
        -: 1296:auto
        -: 1297:__has_destroy_test(_Alloc&& __a, _Pointer&& __p)
        -: 1298:    -> decltype(__a.destroy(__p), true_type());
        -: 1299:
        -: 1300:template <class _Alloc, class _Pointer>
        -: 1301:auto
        -: 1302:__has_destroy_test(const _Alloc& __a, _Pointer&& __p)
        -: 1303:    -> false_type;
        -: 1304:
        -: 1305:template <class _Alloc, class _Pointer>
        -: 1306:struct __has_destroy
        -: 1307:    : integral_constant<bool,
        -: 1308:        is_same<
        -: 1309:            decltype(__has_destroy_test(declval<_Alloc>(),
        -: 1310:                                        declval<_Pointer>())),
        -: 1311:            true_type>::value>
        -: 1312:{
        -: 1313:};
        -: 1314:
        -: 1315:template <class _Alloc>
        -: 1316:auto
        -: 1317:__has_max_size_test(_Alloc&& __a)
        -: 1318:    -> decltype(__a.max_size(), true_type());
        -: 1319:
        -: 1320:template <class _Alloc>
        -: 1321:auto
        -: 1322:__has_max_size_test(const volatile _Alloc& __a)
        -: 1323:    -> false_type;
        -: 1324:
        -: 1325:template <class _Alloc>
        -: 1326:struct __has_max_size
        -: 1327:    : integral_constant<bool,
        -: 1328:        is_same<
        -: 1329:            decltype(__has_max_size_test(declval<_Alloc&>())),
        -: 1330:            true_type>::value>
        -: 1331:{
        -: 1332:};
        -: 1333:
        -: 1334:template <class _Alloc>
        -: 1335:auto
        -: 1336:__has_select_on_container_copy_construction_test(_Alloc&& __a)
        -: 1337:    -> decltype(__a.select_on_container_copy_construction(), true_type());
        -: 1338:
        -: 1339:template <class _Alloc>
        -: 1340:auto
        -: 1341:__has_select_on_container_copy_construction_test(const volatile _Alloc& __a)
        -: 1342:    -> false_type;
        -: 1343:
        -: 1344:template <class _Alloc>
        -: 1345:struct __has_select_on_container_copy_construction
        -: 1346:    : integral_constant<bool,
        -: 1347:        is_same<
        -: 1348:            decltype(__has_select_on_container_copy_construction_test(declval<_Alloc&>())),
        -: 1349:            true_type>::value>
        -: 1350:{
        -: 1351:};
        -: 1352:
        -: 1353:#else  // _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -: 1354:
        -: 1355:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1356:
        -: 1357:template <class _Alloc, class _Pointer, class ..._Args>
        -: 1358:struct __has_construct
        -: 1359:    : false_type
        -: 1360:{
        -: 1361:};
        -: 1362:
        -: 1363:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 1364:
        -: 1365:template <class _Alloc, class _Pointer, class _Args>
        -: 1366:struct __has_construct
        -: 1367:    : false_type
        -: 1368:{
        -: 1369:};
        -: 1370:
        -: 1371:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1372:
        -: 1373:template <class _Alloc, class _Pointer>
        -: 1374:struct __has_destroy
        -: 1375:    : false_type
        -: 1376:{
        -: 1377:};
        -: 1378:
        -: 1379:template <class _Alloc>
        -: 1380:struct __has_max_size
        -: 1381:    : true_type
        -: 1382:{
        -: 1383:};
        -: 1384:
        -: 1385:template <class _Alloc>
        -: 1386:struct __has_select_on_container_copy_construction
        -: 1387:    : false_type
        -: 1388:{
        -: 1389:};
        -: 1390:
        -: 1391:#endif  // _LIBCPP_HAS_NO_ADVANCED_SFINAE
        -: 1392:
        -: 1393:template <class _Alloc, class _Ptr, bool = __has_difference_type<_Alloc>::value>
        -: 1394:struct __alloc_traits_difference_type
        -: 1395:{
        -: 1396:    typedef typename pointer_traits<_Ptr>::difference_type type;
        -: 1397:};
        -: 1398:
        -: 1399:template <class _Alloc, class _Ptr>
        -: 1400:struct __alloc_traits_difference_type<_Alloc, _Ptr, true>
        -: 1401:{
        -: 1402:    typedef typename _Alloc::difference_type type;
        -: 1403:};
        -: 1404:
        -: 1405:template <class _Alloc>
        -: 1406:struct _LIBCPP_TYPE_VIS_ONLY allocator_traits
        -: 1407:{
        -: 1408:    typedef _Alloc                              allocator_type;
        -: 1409:    typedef typename allocator_type::value_type value_type;
        -: 1410:
        -: 1411:    typedef typename __pointer_type<value_type, allocator_type>::type pointer;
        -: 1412:    typedef typename __const_pointer<value_type, pointer, allocator_type>::type const_pointer;
        -: 1413:    typedef typename __void_pointer<pointer, allocator_type>::type void_pointer;
        -: 1414:    typedef typename __const_void_pointer<pointer, allocator_type>::type const_void_pointer;
        -: 1415:
        -: 1416:    typedef typename __alloc_traits_difference_type<allocator_type, pointer>::type difference_type;
        -: 1417:    typedef typename __size_type<allocator_type, difference_type>::type size_type;
        -: 1418:
        -: 1419:    typedef typename __propagate_on_container_copy_assignment<allocator_type>::type
        -: 1420:                     propagate_on_container_copy_assignment;
        -: 1421:    typedef typename __propagate_on_container_move_assignment<allocator_type>::type
        -: 1422:                     propagate_on_container_move_assignment;
        -: 1423:    typedef typename __propagate_on_container_swap<allocator_type>::type
        -: 1424:                     propagate_on_container_swap;
        -: 1425:
        -: 1426:#ifndef _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1427:    template <class _Tp> using rebind_alloc =
        -: 1428:                  typename __allocator_traits_rebind<allocator_type, _Tp>::type;
        -: 1429:    template <class _Tp> using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
        -: 1430:#else  // _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1431:    template <class _Tp> struct rebind_alloc
        -: 1432:        {typedef typename __allocator_traits_rebind<allocator_type, _Tp>::type other;};
        -: 1433:    template <class _Tp> struct rebind_traits
        -: 1434:        {typedef allocator_traits<typename rebind_alloc<_Tp>::other> other;};
        -: 1435:#endif  // _LIBCPP_HAS_NO_TEMPLATE_ALIASES
        -: 1436:
        -: 1437:    _LIBCPP_INLINE_VISIBILITY
        -: 1438:    static pointer allocate(allocator_type& __a, size_type __n)
        9: 1439:        {return __a.allocate(__n);}
        -: 1440:    _LIBCPP_INLINE_VISIBILITY
        -: 1441:    static pointer allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
        -: 1442:        {return allocate(__a, __n, __hint,
        -: 1443:            __has_allocate_hint<allocator_type, size_type, const_void_pointer>());}
        -: 1444:
        -: 1445:    _LIBCPP_INLINE_VISIBILITY
        -: 1446:    static void deallocate(allocator_type& __a, pointer __p, size_type __n) _NOEXCEPT
    #####: 1447:        {__a.deallocate(__p, __n);}
        -: 1448:
        -: 1449:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1450:    template <class _Tp, class... _Args>
        -: 1451:        _LIBCPP_INLINE_VISIBILITY
        -: 1452:        static void construct(allocator_type& __a, _Tp* __p, _Args&&... __args)
        -: 1453:            {__construct(__has_construct<allocator_type, _Tp*, _Args...>(),
        -: 1454:                         __a, __p, _VSTD::forward<_Args>(__args)...);}
        -: 1455:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 1456:    template <class _Tp>
        -: 1457:        _LIBCPP_INLINE_VISIBILITY
        -: 1458:        static void construct(allocator_type& __a, _Tp* __p)
        -: 1459:            {
        -: 1460:                ::new ((void*)__p) _Tp();
        -: 1461:            }
        -: 1462:    template <class _Tp, class _A0>
        -: 1463:        _LIBCPP_INLINE_VISIBILITY
        -: 1464:        static void construct(allocator_type& __a, _Tp* __p, const _A0& __a0)
        -: 1465:            {
        -: 1466:                ::new ((void*)__p) _Tp(__a0);
        -: 1467:            }
        -: 1468:    template <class _Tp, class _A0, class _A1>
        -: 1469:        _LIBCPP_INLINE_VISIBILITY
        -: 1470:        static void construct(allocator_type& __a, _Tp* __p, const _A0& __a0,
        -: 1471:                              const _A1& __a1)
        -: 1472:            {
        -: 1473:                ::new ((void*)__p) _Tp(__a0, __a1);
        -: 1474:            }
        -: 1475:    template <class _Tp, class _A0, class _A1, class _A2>
        -: 1476:        _LIBCPP_INLINE_VISIBILITY
        -: 1477:        static void construct(allocator_type& __a, _Tp* __p, const _A0& __a0,
        -: 1478:                              const _A1& __a1, const _A2& __a2)
        -: 1479:            {
        -: 1480:                ::new ((void*)__p) _Tp(__a0, __a1, __a2);
        -: 1481:            }
        -: 1482:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1483:
        -: 1484:    template <class _Tp>
        -: 1485:        _LIBCPP_INLINE_VISIBILITY
        -: 1486:        static void destroy(allocator_type& __a, _Tp* __p)
    #####: 1487:            {__destroy(__has_destroy<allocator_type, _Tp*>(), __a, __p);}
        -: 1488:
        -: 1489:    _LIBCPP_INLINE_VISIBILITY
        -: 1490:    static size_type max_size(const allocator_type& __a) _NOEXCEPT
      102: 1491:        {return __max_size(__has_max_size<const allocator_type>(), __a);}
        -: 1492:
        -: 1493:    _LIBCPP_INLINE_VISIBILITY
        -: 1494:    static allocator_type
        -: 1495:        select_on_container_copy_construction(const allocator_type& __a)
        -: 1496:            {return select_on_container_copy_construction(
        -: 1497:                __has_select_on_container_copy_construction<const allocator_type>(),
        -: 1498:                __a);}
        -: 1499:
        -: 1500:    template <class _Ptr>
        -: 1501:        _LIBCPP_INLINE_VISIBILITY
        -: 1502:        static
        -: 1503:        void
        -: 1504:        __construct_forward(allocator_type& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __begin2)
        -: 1505:        {
        -: 1506:            for (; __begin1 != __end1; ++__begin1, ++__begin2)
        -: 1507:                construct(__a, _VSTD::__to_raw_pointer(__begin2), _VSTD::move_if_noexcept(*__begin1));
        -: 1508:        }
        -: 1509:
        -: 1510:    template <class _Tp>
        -: 1511:        _LIBCPP_INLINE_VISIBILITY
        -: 1512:        static
        -: 1513:        typename enable_if
        -: 1514:        <
        -: 1515:            (is_same<allocator_type, allocator<_Tp> >::value
        -: 1516:                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&
        -: 1517:             is_trivially_move_constructible<_Tp>::value,
        -: 1518:            void
        -: 1519:        >::type
        -: 1520:        __construct_forward(allocator_type& __a, _Tp* __begin1, _Tp* __end1, _Tp*& __begin2)
        -: 1521:        {
        -: 1522:            ptrdiff_t _Np = __end1 - __begin1;
        -: 1523:            _VSTD::memcpy(__begin2, __begin1, _Np * sizeof(_Tp));
        -: 1524:            __begin2 += _Np;
        -: 1525:        }
        -: 1526:
        -: 1527:    template <class _Iter, class _Ptr>
        -: 1528:        _LIBCPP_INLINE_VISIBILITY
        -: 1529:        static
        -: 1530:        void
        -: 1531:        __construct_range_forward(allocator_type& __a, _Iter __begin1, _Iter __end1, _Ptr& __begin2)
        -: 1532:        {
        -: 1533:            for (; __begin1 != __end1; ++__begin1, (void) ++__begin2)
        -: 1534:                construct(__a, _VSTD::__to_raw_pointer(__begin2), *__begin1);
        -: 1535:        }
        -: 1536:
        -: 1537:    template <class _Tp>
        -: 1538:        _LIBCPP_INLINE_VISIBILITY
        -: 1539:        static
        -: 1540:        typename enable_if
        -: 1541:        <
        -: 1542:            (is_same<allocator_type, allocator<_Tp> >::value
        -: 1543:                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&
        -: 1544:             is_trivially_move_constructible<_Tp>::value,
        -: 1545:            void
        -: 1546:        >::type
        -: 1547:        __construct_range_forward(allocator_type& __a, _Tp* __begin1, _Tp* __end1, _Tp*& __begin2)
        -: 1548:        {
        -: 1549:            typedef typename remove_const<_Tp>::type _Vp;
        -: 1550:            ptrdiff_t _Np = __end1 - __begin1;
        -: 1551:            _VSTD::memcpy(const_cast<_Vp*>(__begin2), __begin1, _Np * sizeof(_Tp));
        -: 1552:            __begin2 += _Np;
        -: 1553:        }
        -: 1554:
        -: 1555:    template <class _Ptr>
        -: 1556:        _LIBCPP_INLINE_VISIBILITY
        -: 1557:        static
        -: 1558:        void
        -: 1559:        __construct_backward(allocator_type& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __end2)
        -: 1560:        {
        -: 1561:            while (__end1 != __begin1)
        -: 1562:            {
        -: 1563:                construct(__a, _VSTD::__to_raw_pointer(__end2-1), _VSTD::move_if_noexcept(*--__end1));
        -: 1564:                --__end2;
        -: 1565:            }
        -: 1566:        }
        -: 1567:
        -: 1568:    template <class _Tp>
        -: 1569:        _LIBCPP_INLINE_VISIBILITY
        -: 1570:        static
        -: 1571:        typename enable_if
        -: 1572:        <
        -: 1573:            (is_same<allocator_type, allocator<_Tp> >::value
        -: 1574:                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&
        -: 1575:             is_trivially_move_constructible<_Tp>::value,
        -: 1576:            void
        -: 1577:        >::type
        -: 1578:        __construct_backward(allocator_type& __a, _Tp* __begin1, _Tp* __end1, _Tp*& __end2)
        -: 1579:        {
        -: 1580:            ptrdiff_t _Np = __end1 - __begin1;
        -: 1581:            __end2 -= _Np;
        -: 1582:            _VSTD::memcpy(__end2, __begin1, _Np * sizeof(_Tp));
        -: 1583:        }
        -: 1584:
        -: 1585:private:
        -: 1586:
        -: 1587:    _LIBCPP_INLINE_VISIBILITY
        -: 1588:    static pointer allocate(allocator_type& __a, size_type __n,
        -: 1589:        const_void_pointer __hint, true_type)
        -: 1590:        {return __a.allocate(__n, __hint);}
        -: 1591:    _LIBCPP_INLINE_VISIBILITY
        -: 1592:    static pointer allocate(allocator_type& __a, size_type __n,
        -: 1593:        const_void_pointer, false_type)
        -: 1594:        {return __a.allocate(__n);}
        -: 1595:
        -: 1596:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1597:    template <class _Tp, class... _Args>
        -: 1598:        _LIBCPP_INLINE_VISIBILITY
        -: 1599:        static void __construct(true_type, allocator_type& __a, _Tp* __p, _Args&&... __args)
        -: 1600:            {__a.construct(__p, _VSTD::forward<_Args>(__args)...);}
        -: 1601:    template <class _Tp, class... _Args>
        -: 1602:        _LIBCPP_INLINE_VISIBILITY
        -: 1603:        static void __construct(false_type, allocator_type&, _Tp* __p, _Args&&... __args)
        -: 1604:            {
        -: 1605:                ::new ((void*)__p) _Tp(_VSTD::forward<_Args>(__args)...);
        -: 1606:            }
        -: 1607:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1608:
        -: 1609:    template <class _Tp>
        -: 1610:        _LIBCPP_INLINE_VISIBILITY
        -: 1611:        static void __destroy(true_type, allocator_type& __a, _Tp* __p)
        -: 1612:            {__a.destroy(__p);}
        -: 1613:    template <class _Tp>
        -: 1614:        _LIBCPP_INLINE_VISIBILITY
        -: 1615:        static void __destroy(false_type, allocator_type&, _Tp* __p)
        -: 1616:            {
    #####: 1617:                __p->~_Tp();
    #####: 1618:            }
        -: 1619:
        -: 1620:    _LIBCPP_INLINE_VISIBILITY
        -: 1621:    static size_type __max_size(true_type, const allocator_type& __a)
       51: 1622:            {return __a.max_size();}
        -: 1623:    _LIBCPP_INLINE_VISIBILITY
        -: 1624:    static size_type __max_size(false_type, const allocator_type&)
        -: 1625:            {return numeric_limits<size_type>::max();}
        -: 1626:
        -: 1627:    _LIBCPP_INLINE_VISIBILITY
        -: 1628:    static allocator_type
        -: 1629:        select_on_container_copy_construction(true_type, const allocator_type& __a)
        -: 1630:            {return __a.select_on_container_copy_construction();}
        -: 1631:    _LIBCPP_INLINE_VISIBILITY
        -: 1632:    static allocator_type
        -: 1633:        select_on_container_copy_construction(false_type, const allocator_type& __a)
        -: 1634:            {return __a;}
        -: 1635:};
        -: 1636:
        -: 1637:// allocator
        -: 1638:
        -: 1639:template <class _Tp>
        -: 1640:class _LIBCPP_TYPE_VIS_ONLY allocator
        -: 1641:{
        -: 1642:public:
        -: 1643:    typedef size_t            size_type;
        -: 1644:    typedef ptrdiff_t         difference_type;
        -: 1645:    typedef _Tp*              pointer;
        -: 1646:    typedef const _Tp*        const_pointer;
        -: 1647:    typedef _Tp&              reference;
        -: 1648:    typedef const _Tp&        const_reference;
        -: 1649:    typedef _Tp               value_type;
        -: 1650:
        -: 1651:    typedef true_type propagate_on_container_move_assignment;
        -: 1652:
        -: 1653:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -: 1654:
        5: 1655:    _LIBCPP_INLINE_VISIBILITY allocator() _NOEXCEPT {}
        -: 1656:    template <class _Up> _LIBCPP_INLINE_VISIBILITY allocator(const allocator<_Up>&) _NOEXCEPT {}
        -: 1657:    _LIBCPP_INLINE_VISIBILITY pointer address(reference __x) const _NOEXCEPT
        -: 1658:        {return _VSTD::addressof(__x);}
        -: 1659:    _LIBCPP_INLINE_VISIBILITY const_pointer address(const_reference __x) const _NOEXCEPT
        -: 1660:        {return _VSTD::addressof(__x);}
        -: 1661:    _LIBCPP_INLINE_VISIBILITY pointer allocate(size_type __n, allocator<void>::const_pointer = 0)
        9: 1662:        {return static_cast<pointer>(_VSTD::__allocate(__n * sizeof(_Tp)));}
        -: 1663:    _LIBCPP_INLINE_VISIBILITY void deallocate(pointer __p, size_type) _NOEXCEPT
    #####: 1664:        {_VSTD::__deallocate((void*)__p);}
        -: 1665:    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT
       51: 1666:        {return size_type(~0) / sizeof(_Tp);}
        -: 1667:#if !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1668:    template <class _Up, class... _Args>
        -: 1669:        _LIBCPP_INLINE_VISIBILITY
        -: 1670:        void
        -: 1671:        construct(_Up* __p, _Args&&... __args)
        -: 1672:        {
        -: 1673:            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -: 1674:        }
        -: 1675:#else  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1676:        _LIBCPP_INLINE_VISIBILITY
        -: 1677:        void
        -: 1678:        construct(pointer __p)
        -: 1679:        {
        -: 1680:            ::new((void*)__p) _Tp();
        -: 1681:        }
        -: 1682:# if defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1683:
        -: 1684:    template <class _A0>
        -: 1685:        _LIBCPP_INLINE_VISIBILITY
        -: 1686:        void
        -: 1687:        construct(pointer __p, _A0& __a0)
        -: 1688:        {
        -: 1689:            ::new((void*)__p) _Tp(__a0);
        -: 1690:        }
        -: 1691:    template <class _A0>
        -: 1692:        _LIBCPP_INLINE_VISIBILITY
        -: 1693:        void
        -: 1694:        construct(pointer __p, const _A0& __a0)
        -: 1695:        {
        -: 1696:            ::new((void*)__p) _Tp(__a0);
        -: 1697:        }
        -: 1698:# endif  // defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1699:    template <class _A0, class _A1>
        -: 1700:        _LIBCPP_INLINE_VISIBILITY
        -: 1701:        void
        -: 1702:        construct(pointer __p, _A0& __a0, _A1& __a1)
        -: 1703:        {
        -: 1704:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1705:        }
        -: 1706:    template <class _A0, class _A1>
        -: 1707:        _LIBCPP_INLINE_VISIBILITY
        -: 1708:        void
        -: 1709:        construct(pointer __p, const _A0& __a0, _A1& __a1)
        -: 1710:        {
        -: 1711:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1712:        }
        -: 1713:    template <class _A0, class _A1>
        -: 1714:        _LIBCPP_INLINE_VISIBILITY
        -: 1715:        void
        -: 1716:        construct(pointer __p, _A0& __a0, const _A1& __a1)
        -: 1717:        {
        -: 1718:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1719:        }
        -: 1720:    template <class _A0, class _A1>
        -: 1721:        _LIBCPP_INLINE_VISIBILITY
        -: 1722:        void
        -: 1723:        construct(pointer __p, const _A0& __a0, const _A1& __a1)
        -: 1724:        {
        -: 1725:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1726:        }
        -: 1727:#endif  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1728:    _LIBCPP_INLINE_VISIBILITY void destroy(pointer __p) {__p->~_Tp();}
        -: 1729:};
        -: 1730:
        -: 1731:template <class _Tp>
        -: 1732:class _LIBCPP_TYPE_VIS_ONLY allocator<const _Tp>
        -: 1733:{
        -: 1734:public:
        -: 1735:    typedef size_t            size_type;
        -: 1736:    typedef ptrdiff_t         difference_type;
        -: 1737:    typedef const _Tp*        pointer;
        -: 1738:    typedef const _Tp*        const_pointer;
        -: 1739:    typedef const _Tp&        reference;
        -: 1740:    typedef const _Tp&        const_reference;
        -: 1741:    typedef const _Tp         value_type;
        -: 1742:
        -: 1743:    typedef true_type propagate_on_container_move_assignment;
        -: 1744:
        -: 1745:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -: 1746:
        -: 1747:    _LIBCPP_INLINE_VISIBILITY allocator() _NOEXCEPT {}
        -: 1748:    template <class _Up> _LIBCPP_INLINE_VISIBILITY allocator(const allocator<_Up>&) _NOEXCEPT {}
        -: 1749:    _LIBCPP_INLINE_VISIBILITY const_pointer address(const_reference __x) const _NOEXCEPT
        -: 1750:        {return _VSTD::addressof(__x);}
        -: 1751:    _LIBCPP_INLINE_VISIBILITY pointer allocate(size_type __n, allocator<void>::const_pointer = 0)
        -: 1752:        {return static_cast<pointer>(_VSTD::__allocate(__n * sizeof(_Tp)));}
        -: 1753:    _LIBCPP_INLINE_VISIBILITY void deallocate(pointer __p, size_type) _NOEXCEPT
        -: 1754:        {_VSTD::__deallocate((void*)__p);}
        -: 1755:    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT
        -: 1756:        {return size_type(~0) / sizeof(_Tp);}
        -: 1757:#if !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1758:    template <class _Up, class... _Args>
        -: 1759:        _LIBCPP_INLINE_VISIBILITY
        -: 1760:        void
        -: 1761:        construct(_Up* __p, _Args&&... __args)
        -: 1762:        {
        -: 1763:            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -: 1764:        }
        -: 1765:#else  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1766:        _LIBCPP_INLINE_VISIBILITY
        -: 1767:        void
        -: 1768:        construct(pointer __p)
        -: 1769:        {
        -: 1770:            ::new((void*)__p) _Tp();
        -: 1771:        }
        -: 1772:# if defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1773:
        -: 1774:    template <class _A0>
        -: 1775:        _LIBCPP_INLINE_VISIBILITY
        -: 1776:        void
        -: 1777:        construct(pointer __p, _A0& __a0)
        -: 1778:        {
        -: 1779:            ::new((void*)__p) _Tp(__a0);
        -: 1780:        }
        -: 1781:    template <class _A0>
        -: 1782:        _LIBCPP_INLINE_VISIBILITY
        -: 1783:        void
        -: 1784:        construct(pointer __p, const _A0& __a0)
        -: 1785:        {
        -: 1786:            ::new((void*)__p) _Tp(__a0);
        -: 1787:        }
        -: 1788:# endif  // defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1789:    template <class _A0, class _A1>
        -: 1790:        _LIBCPP_INLINE_VISIBILITY
        -: 1791:        void
        -: 1792:        construct(pointer __p, _A0& __a0, _A1& __a1)
        -: 1793:        {
        -: 1794:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1795:        }
        -: 1796:    template <class _A0, class _A1>
        -: 1797:        _LIBCPP_INLINE_VISIBILITY
        -: 1798:        void
        -: 1799:        construct(pointer __p, const _A0& __a0, _A1& __a1)
        -: 1800:        {
        -: 1801:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1802:        }
        -: 1803:    template <class _A0, class _A1>
        -: 1804:        _LIBCPP_INLINE_VISIBILITY
        -: 1805:        void
        -: 1806:        construct(pointer __p, _A0& __a0, const _A1& __a1)
        -: 1807:        {
        -: 1808:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1809:        }
        -: 1810:    template <class _A0, class _A1>
        -: 1811:        _LIBCPP_INLINE_VISIBILITY
        -: 1812:        void
        -: 1813:        construct(pointer __p, const _A0& __a0, const _A1& __a1)
        -: 1814:        {
        -: 1815:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1816:        }
        -: 1817:#endif  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1818:    _LIBCPP_INLINE_VISIBILITY void destroy(pointer __p) {__p->~_Tp();}
        -: 1819:};
        -: 1820:
        -: 1821:template <class _Tp, class _Up>
        -: 1822:inline _LIBCPP_INLINE_VISIBILITY
        -: 1823:bool operator==(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return true;}
        -: 1824:
        -: 1825:template <class _Tp, class _Up>
        -: 1826:inline _LIBCPP_INLINE_VISIBILITY
        -: 1827:bool operator!=(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return false;}
        -: 1828:
        -: 1829:template <class _OutputIterator, class _Tp>
        -: 1830:class _LIBCPP_TYPE_VIS_ONLY raw_storage_iterator
        -: 1831:    : public iterator<output_iterator_tag,
        -: 1832:                      _Tp,                                         // purposefully not C++03
        -: 1833:                      ptrdiff_t,                                   // purposefully not C++03
        -: 1834:                      _Tp*,                                        // purposefully not C++03
        -: 1835:                      raw_storage_iterator<_OutputIterator, _Tp>&> // purposefully not C++03
        -: 1836:{
        -: 1837:private:
        -: 1838:    _OutputIterator __x_;
        -: 1839:public:
        -: 1840:    _LIBCPP_INLINE_VISIBILITY explicit raw_storage_iterator(_OutputIterator __x) : __x_(__x) {}
        -: 1841:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator*() {return *this;}
        -: 1842:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator=(const _Tp& __element)
        -: 1843:        {::new(&*__x_) _Tp(__element); return *this;}
        -: 1844:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator++() {++__x_; return *this;}
        -: 1845:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator  operator++(int)
        -: 1846:        {raw_storage_iterator __t(*this); ++__x_; return __t;}
        -: 1847:};
        -: 1848:
        -: 1849:template <class _Tp>
        -: 1850:pair<_Tp*, ptrdiff_t>
        -: 1851:get_temporary_buffer(ptrdiff_t __n) _NOEXCEPT
        -: 1852:{
        -: 1853:    pair<_Tp*, ptrdiff_t> __r(0, 0);
        -: 1854:    const ptrdiff_t __m = (~ptrdiff_t(0) ^
        -: 1855:                           ptrdiff_t(ptrdiff_t(1) << (sizeof(ptrdiff_t) * __CHAR_BIT__ - 1)))
        -: 1856:                           / sizeof(_Tp);
        -: 1857:    if (__n > __m)
        -: 1858:        __n = __m;
        -: 1859:    while (__n > 0)
        -: 1860:    {
        -: 1861:        __r.first = static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), nothrow));
        -: 1862:        if (__r.first)
        -: 1863:        {
        -: 1864:            __r.second = __n;
        -: 1865:            break;
        -: 1866:        }
        -: 1867:        __n /= 2;
        -: 1868:    }
        -: 1869:    return __r;
        -: 1870:}
        -: 1871:
        -: 1872:template <class _Tp>
        -: 1873:inline _LIBCPP_INLINE_VISIBILITY
        -: 1874:void return_temporary_buffer(_Tp* __p) _NOEXCEPT {::operator delete(__p);}
        -: 1875:
        -: 1876:template <class _Tp>
        -: 1877:struct auto_ptr_ref
        -: 1878:{
        -: 1879:    _Tp* __ptr_;
        -: 1880:};
        -: 1881:
        -: 1882:template<class _Tp>
        -: 1883:class _LIBCPP_TYPE_VIS_ONLY auto_ptr
        -: 1884:{
        -: 1885:private:
        -: 1886:    _Tp* __ptr_;
        -: 1887:public:
        -: 1888:    typedef _Tp element_type;
        -: 1889:
        -: 1890:    _LIBCPP_INLINE_VISIBILITY explicit auto_ptr(_Tp* __p = 0) throw() : __ptr_(__p) {}
        -: 1891:    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr& __p) throw() : __ptr_(__p.release()) {}
        -: 1892:    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr<_Up>& __p) throw()
        -: 1893:        : __ptr_(__p.release()) {}
        -: 1894:    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr& __p) throw()
        -: 1895:        {reset(__p.release()); return *this;}
        -: 1896:    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr<_Up>& __p) throw()
        -: 1897:        {reset(__p.release()); return *this;}
        -: 1898:    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr_ref<_Tp> __p) throw()
        -: 1899:        {reset(__p.__ptr_); return *this;}
        -: 1900:    _LIBCPP_INLINE_VISIBILITY ~auto_ptr() throw() {delete __ptr_;}
        -: 1901:
        -: 1902:    _LIBCPP_INLINE_VISIBILITY _Tp& operator*() const throw()
        -: 1903:        {return *__ptr_;}
        -: 1904:    _LIBCPP_INLINE_VISIBILITY _Tp* operator->() const throw() {return __ptr_;}
        -: 1905:    _LIBCPP_INLINE_VISIBILITY _Tp* get() const throw() {return __ptr_;}
        -: 1906:    _LIBCPP_INLINE_VISIBILITY _Tp* release() throw()
        -: 1907:    {
        -: 1908:        _Tp* __t = __ptr_;
        -: 1909:        __ptr_ = 0;
        -: 1910:        return __t;
        -: 1911:    }
        -: 1912:    _LIBCPP_INLINE_VISIBILITY void reset(_Tp* __p = 0) throw()
        -: 1913:    {
        -: 1914:        if (__ptr_ != __p)
        -: 1915:            delete __ptr_;
        -: 1916:        __ptr_ = __p;
        -: 1917:    }
        -: 1918:
        -: 1919:    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr_ref<_Tp> __p) throw() : __ptr_(__p.__ptr_) {}
        -: 1920:    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr_ref<_Up>() throw()
        -: 1921:        {auto_ptr_ref<_Up> __t; __t.__ptr_ = release(); return __t;}
        -: 1922:    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr<_Up>() throw()
        -: 1923:        {return auto_ptr<_Up>(release());}
        -: 1924:};
        -: 1925:
        -: 1926:template <>
        -: 1927:class _LIBCPP_TYPE_VIS_ONLY auto_ptr<void>
        -: 1928:{
        -: 1929:public:
        -: 1930:    typedef void element_type;
        -: 1931:};
        -: 1932:
        -: 1933:template <class _T1, class _T2, bool = is_same<typename remove_cv<_T1>::type,
        -: 1934:                                                     typename remove_cv<_T2>::type>::value,
        -: 1935:                                bool = is_empty<_T1>::value
        -: 1936:#if __has_feature(is_final)
        -: 1937:                                       && !__is_final(_T1)
        -: 1938:#endif
        -: 1939:                                ,
        -: 1940:                                bool = is_empty<_T2>::value
        -: 1941:#if __has_feature(is_final)
        -: 1942:                                       && !__is_final(_T2)
        -: 1943:#endif
        -: 1944:         >
        -: 1945:struct __libcpp_compressed_pair_switch;
        -: 1946:
        -: 1947:template <class _T1, class _T2, bool IsSame>
        -: 1948:struct __libcpp_compressed_pair_switch<_T1, _T2, IsSame, false, false> {enum {value = 0};};
        -: 1949:
        -: 1950:template <class _T1, class _T2, bool IsSame>
        -: 1951:struct __libcpp_compressed_pair_switch<_T1, _T2, IsSame, true, false>  {enum {value = 1};};
        -: 1952:
        -: 1953:template <class _T1, class _T2, bool IsSame>
        -: 1954:struct __libcpp_compressed_pair_switch<_T1, _T2, IsSame, false, true>  {enum {value = 2};};
        -: 1955:
        -: 1956:template <class _T1, class _T2>
        -: 1957:struct __libcpp_compressed_pair_switch<_T1, _T2, false, true, true>    {enum {value = 3};};
        -: 1958:
        -: 1959:template <class _T1, class _T2>
        -: 1960:struct __libcpp_compressed_pair_switch<_T1, _T2, true, true, true>     {enum {value = 1};};
        -: 1961:
        -: 1962:template <class _T1, class _T2, unsigned = __libcpp_compressed_pair_switch<_T1, _T2>::value>
        -: 1963:class __libcpp_compressed_pair_imp;
        -: 1964:
        -: 1965:template <class _T1, class _T2>
        -: 1966:class __libcpp_compressed_pair_imp<_T1, _T2, 0>
        -: 1967:{
        -: 1968:private:
        -: 1969:    _T1 __first_;
        -: 1970:    _T2 __second_;
        -: 1971:public:
        -: 1972:    typedef _T1 _T1_param;
        -: 1973:    typedef _T2 _T2_param;
        -: 1974:
        -: 1975:    typedef typename remove_reference<_T1>::type& _T1_reference;
        -: 1976:    typedef typename remove_reference<_T2>::type& _T2_reference;
        -: 1977:
        -: 1978:    typedef const typename remove_reference<_T1>::type& _T1_const_reference;
        -: 1979:    typedef const typename remove_reference<_T2>::type& _T2_const_reference;
        -: 1980:
        -: 1981:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() {}
        -: 1982:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)
        -: 1983:        : __first_(_VSTD::forward<_T1_param>(__t1)) {}
        -: 1984:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)
        -: 1985:        : __second_(_VSTD::forward<_T2_param>(__t2)) {}
        -: 1986:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)
        -: 1987:        : __first_(_VSTD::forward<_T1_param>(__t1)), __second_(_VSTD::forward<_T2_param>(__t2)) {}
        -: 1988:
        -: 1989:#if defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1990:
        -: 1991:    _LIBCPP_INLINE_VISIBILITY
        -: 1992:    __libcpp_compressed_pair_imp(const __libcpp_compressed_pair_imp& __p)
        -: 1993:        _NOEXCEPT_(is_nothrow_copy_constructible<_T1>::value &&
        -: 1994:                   is_nothrow_copy_constructible<_T2>::value)
        -: 1995:        : __first_(__p.first()),
        -: 1996:          __second_(__p.second()) {}
        -: 1997:
        -: 1998:    _LIBCPP_INLINE_VISIBILITY
        -: 1999:    __libcpp_compressed_pair_imp& operator=(const __libcpp_compressed_pair_imp& __p)
        -: 2000:        _NOEXCEPT_(is_nothrow_copy_assignable<_T1>::value &&
        -: 2001:                   is_nothrow_copy_assignable<_T2>::value)
        -: 2002:        {
        -: 2003:            __first_ = __p.first();
        -: 2004:            __second_ = __p.second();
        -: 2005:            return *this;
        -: 2006:        }
        -: 2007:
        -: 2008:    _LIBCPP_INLINE_VISIBILITY
        -: 2009:    __libcpp_compressed_pair_imp(__libcpp_compressed_pair_imp&& __p)
        -: 2010:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2011:                   is_nothrow_move_constructible<_T2>::value)
        -: 2012:        : __first_(_VSTD::forward<_T1>(__p.first())),
        -: 2013:          __second_(_VSTD::forward<_T2>(__p.second())) {}
        -: 2014:
        -: 2015:    _LIBCPP_INLINE_VISIBILITY
        -: 2016:    __libcpp_compressed_pair_imp& operator=(__libcpp_compressed_pair_imp&& __p)
        -: 2017:        _NOEXCEPT_(is_nothrow_move_assignable<_T1>::value &&
        -: 2018:                   is_nothrow_move_assignable<_T2>::value)
        -: 2019:        {
        -: 2020:            __first_ = _VSTD::forward<_T1>(__p.first());
        -: 2021:            __second_ = _VSTD::forward<_T2>(__p.second());
        -: 2022:            return *this;
        -: 2023:        }
        -: 2024:
        -: 2025:#endif  // defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2026:
        -: 2027:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 2028:
        -: 2029:    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
        -: 2030:        _LIBCPP_INLINE_VISIBILITY
        -: 2031:        __libcpp_compressed_pair_imp(piecewise_construct_t __pc,
        -: 2032:                                     tuple<_Args1...> __first_args,
        -: 2033:                                     tuple<_Args2...> __second_args,
        -: 2034:                                     __tuple_indices<_I1...>,
        -: 2035:                                     __tuple_indices<_I2...>)
        -: 2036:            : __first_(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...),
        -: 2037:              __second_(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...)
        -: 2038:            {}
        -: 2039:
        -: 2040:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 2041:
        -: 2042:    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return __first_;}
        -: 2043:    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return __first_;}
        -: 2044:
        -: 2045:    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return __second_;}
        -: 2046:    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return __second_;}
        -: 2047:
        -: 2048:    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp& __x)
        -: 2049:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2050:                   __is_nothrow_swappable<_T2>::value)
        -: 2051:    {
        -: 2052:        using _VSTD::swap;
        -: 2053:        swap(__first_, __x.__first_);
        -: 2054:        swap(__second_, __x.__second_);
        -: 2055:    }
        -: 2056:};
        -: 2057:
        -: 2058:template <class _T1, class _T2>
        -: 2059:class __libcpp_compressed_pair_imp<_T1, _T2, 1>
        -: 2060:    : private _T1
        -: 2061:{
        -: 2062:private:
        -: 2063:    _T2 __second_;
        -: 2064:public:
        -: 2065:    typedef _T1 _T1_param;
        -: 2066:    typedef _T2 _T2_param;
        -: 2067:
        -: 2068:    typedef _T1&                                        _T1_reference;
        -: 2069:    typedef typename remove_reference<_T2>::type& _T2_reference;
        -: 2070:
        -: 2071:    typedef const _T1&                                        _T1_const_reference;
        -: 2072:    typedef const typename remove_reference<_T2>::type& _T2_const_reference;
        -: 2073:
        -: 2074:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() {}
        -: 2075:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)
        -: 2076:        : _T1(_VSTD::forward<_T1_param>(__t1)) {}
        -: 2077:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)
        -: 2078:        : __second_(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2079:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)
        -: 2080:        : _T1(_VSTD::forward<_T1_param>(__t1)), __second_(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2081:
        -: 2082:#if defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2083:
        -: 2084:    _LIBCPP_INLINE_VISIBILITY
        -: 2085:    __libcpp_compressed_pair_imp(const __libcpp_compressed_pair_imp& __p)
        -: 2086:        _NOEXCEPT_(is_nothrow_copy_constructible<_T1>::value &&
        -: 2087:                   is_nothrow_copy_constructible<_T2>::value)
        -: 2088:        : _T1(__p.first()), __second_(__p.second()) {}
        -: 2089:
        -: 2090:    _LIBCPP_INLINE_VISIBILITY
        -: 2091:    __libcpp_compressed_pair_imp& operator=(const __libcpp_compressed_pair_imp& __p)
        -: 2092:        _NOEXCEPT_(is_nothrow_copy_assignable<_T1>::value &&
        -: 2093:                   is_nothrow_copy_assignable<_T2>::value)
        -: 2094:        {
        -: 2095:            _T1::operator=(__p.first());
        -: 2096:            __second_ = __p.second();
        -: 2097:            return *this;
        -: 2098:        }
        -: 2099:
        -: 2100:    _LIBCPP_INLINE_VISIBILITY
        -: 2101:    __libcpp_compressed_pair_imp(__libcpp_compressed_pair_imp&& __p)
        -: 2102:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2103:                   is_nothrow_move_constructible<_T2>::value)
        -: 2104:        : _T1(_VSTD::move(__p.first())), __second_(_VSTD::forward<_T2>(__p.second())) {}
        -: 2105:
        -: 2106:    _LIBCPP_INLINE_VISIBILITY
        -: 2107:    __libcpp_compressed_pair_imp& operator=(__libcpp_compressed_pair_imp&& __p)
        -: 2108:        _NOEXCEPT_(is_nothrow_move_assignable<_T1>::value &&
        -: 2109:                   is_nothrow_move_assignable<_T2>::value)
        -: 2110:        {
        -: 2111:            _T1::operator=(_VSTD::move(__p.first()));
        -: 2112:            __second_ = _VSTD::forward<_T2>(__p.second());
        -: 2113:            return *this;
        -: 2114:        }
        -: 2115:
        -: 2116:#endif  // defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2117:
        -: 2118:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 2119:
        -: 2120:    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
        -: 2121:        _LIBCPP_INLINE_VISIBILITY
        -: 2122:        __libcpp_compressed_pair_imp(piecewise_construct_t __pc,
        -: 2123:                                     tuple<_Args1...> __first_args,
        -: 2124:                                     tuple<_Args2...> __second_args,
        -: 2125:                                     __tuple_indices<_I1...>,
        -: 2126:                                     __tuple_indices<_I2...>)
        -: 2127:            : _T1(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...),
        -: 2128:              __second_(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...)
        -: 2129:            {}
        -: 2130:
        -: 2131:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 2132:
        -: 2133:    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return *this;}
        -: 2134:    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return *this;}
        -: 2135:
        -: 2136:    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return __second_;}
        -: 2137:    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return __second_;}
        -: 2138:
        -: 2139:    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp& __x)
        -: 2140:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2141:                   __is_nothrow_swappable<_T2>::value)
        -: 2142:    {
        -: 2143:        using _VSTD::swap;
        -: 2144:        swap(__second_, __x.__second_);
        -: 2145:    }
        -: 2146:};
        -: 2147:
        -: 2148:template <class _T1, class _T2>
        -: 2149:class __libcpp_compressed_pair_imp<_T1, _T2, 2>
        -: 2150:    : private _T2
        -: 2151:{
        -: 2152:private:
        -: 2153:    _T1 __first_;
        -: 2154:public:
        -: 2155:    typedef _T1 _T1_param;
        -: 2156:    typedef _T2 _T2_param;
        -: 2157:
        -: 2158:    typedef typename remove_reference<_T1>::type& _T1_reference;
        -: 2159:    typedef _T2&                                        _T2_reference;
        -: 2160:
        -: 2161:    typedef const typename remove_reference<_T1>::type& _T1_const_reference;
        -: 2162:    typedef const _T2&                                        _T2_const_reference;
        -: 2163:
        5: 2164:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() {}
        -: 2165:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)
        -: 2166:        : __first_(_VSTD::forward<_T1_param>(__t1)) {}
       51: 2167:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)
      102: 2168:        : _T2(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2169:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)
        -: 2170:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2171:                   is_nothrow_move_constructible<_T2>::value)
        -: 2172:        : _T2(_VSTD::forward<_T2_param>(__t2)), __first_(_VSTD::forward<_T1_param>(__t1)) {}
        -: 2173:
        -: 2174:#if defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2175:
        -: 2176:    _LIBCPP_INLINE_VISIBILITY
        -: 2177:    __libcpp_compressed_pair_imp(const __libcpp_compressed_pair_imp& __p)
        -: 2178:        _NOEXCEPT_(is_nothrow_copy_constructible<_T1>::value &&
        -: 2179:                   is_nothrow_copy_constructible<_T2>::value)
        -: 2180:        : _T2(__p.second()), __first_(__p.first()) {}
        -: 2181:
        -: 2182:    _LIBCPP_INLINE_VISIBILITY
        -: 2183:    __libcpp_compressed_pair_imp& operator=(const __libcpp_compressed_pair_imp& __p)
        -: 2184:        _NOEXCEPT_(is_nothrow_copy_assignable<_T1>::value &&
        -: 2185:                   is_nothrow_copy_assignable<_T2>::value)
        -: 2186:        {
        -: 2187:            _T2::operator=(__p.second());
        -: 2188:            __first_ = __p.first();
        -: 2189:            return *this;
        -: 2190:        }
        -: 2191:
        -: 2192:    _LIBCPP_INLINE_VISIBILITY
        -: 2193:    __libcpp_compressed_pair_imp(__libcpp_compressed_pair_imp&& __p)
        -: 2194:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2195:                   is_nothrow_move_constructible<_T2>::value)
        -: 2196:        : _T2(_VSTD::forward<_T2>(__p.second())), __first_(_VSTD::move(__p.first())) {}
        -: 2197:
        -: 2198:    _LIBCPP_INLINE_VISIBILITY
        -: 2199:    __libcpp_compressed_pair_imp& operator=(__libcpp_compressed_pair_imp&& __p)
        -: 2200:        _NOEXCEPT_(is_nothrow_move_assignable<_T1>::value &&
        -: 2201:                   is_nothrow_move_assignable<_T2>::value)
        -: 2202:        {
        -: 2203:            _T2::operator=(_VSTD::forward<_T2>(__p.second()));
        -: 2204:            __first_ = _VSTD::move(__p.first());
        -: 2205:            return *this;
        -: 2206:        }
        -: 2207:
        -: 2208:#endif  // defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2209:
        -: 2210:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 2211:
        -: 2212:    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
        -: 2213:        _LIBCPP_INLINE_VISIBILITY
        -: 2214:        __libcpp_compressed_pair_imp(piecewise_construct_t __pc,
        -: 2215:                                     tuple<_Args1...> __first_args,
        -: 2216:                                     tuple<_Args2...> __second_args,
        -: 2217:                                     __tuple_indices<_I1...>,
        -: 2218:                                     __tuple_indices<_I2...>)
        -: 2219:            : _T2(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...),
        -: 2220:              __first_(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...)
        -: 2221:              
        -: 2222:            {}
        -: 2223:
        -: 2224:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 2225:
      111: 2226:    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return __first_;}
     1049: 2227:    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return __first_;}
        -: 2228:
        9: 2229:    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return *this;}
      102: 2230:    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return *this;}
        -: 2231:
        -: 2232:    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp& __x)
        -: 2233:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2234:                   __is_nothrow_swappable<_T2>::value)
        -: 2235:    {
        -: 2236:        using _VSTD::swap;
        -: 2237:        swap(__first_, __x.__first_);
        -: 2238:    }
        -: 2239:};
        -: 2240:
        -: 2241:template <class _T1, class _T2>
        -: 2242:class __libcpp_compressed_pair_imp<_T1, _T2, 3>
        -: 2243:    : private _T1,
        -: 2244:      private _T2
        -: 2245:{
        -: 2246:public:
        -: 2247:    typedef _T1 _T1_param;
        -: 2248:    typedef _T2 _T2_param;
        -: 2249:
        -: 2250:    typedef _T1& _T1_reference;
        -: 2251:    typedef _T2& _T2_reference;
        -: 2252:
        -: 2253:    typedef const _T1& _T1_const_reference;
        -: 2254:    typedef const _T2& _T2_const_reference;
        -: 2255:
        -: 2256:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp() {}
        -: 2257:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T1_param __t1)
        -: 2258:        : _T1(_VSTD::forward<_T1_param>(__t1)) {}
        -: 2259:    _LIBCPP_INLINE_VISIBILITY explicit __libcpp_compressed_pair_imp(_T2_param __t2)
        -: 2260:        : _T2(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2261:    _LIBCPP_INLINE_VISIBILITY __libcpp_compressed_pair_imp(_T1_param __t1, _T2_param __t2)
        -: 2262:        : _T1(_VSTD::forward<_T1_param>(__t1)), _T2(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2263:
        -: 2264:#if defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2265:
        -: 2266:    _LIBCPP_INLINE_VISIBILITY
        -: 2267:    __libcpp_compressed_pair_imp(const __libcpp_compressed_pair_imp& __p)
        -: 2268:        _NOEXCEPT_(is_nothrow_copy_constructible<_T1>::value &&
        -: 2269:                   is_nothrow_copy_constructible<_T2>::value)
        -: 2270:        : _T1(__p.first()), _T2(__p.second()) {}
        -: 2271:
        -: 2272:    _LIBCPP_INLINE_VISIBILITY
        -: 2273:    __libcpp_compressed_pair_imp& operator=(const __libcpp_compressed_pair_imp& __p)
        -: 2274:        _NOEXCEPT_(is_nothrow_copy_assignable<_T1>::value &&
        -: 2275:                   is_nothrow_copy_assignable<_T2>::value)
        -: 2276:        {
        -: 2277:            _T1::operator=(__p.first());
        -: 2278:            _T2::operator=(__p.second());
        -: 2279:            return *this;
        -: 2280:        }
        -: 2281:
        -: 2282:    _LIBCPP_INLINE_VISIBILITY
        -: 2283:    __libcpp_compressed_pair_imp(__libcpp_compressed_pair_imp&& __p)
        -: 2284:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2285:                   is_nothrow_move_constructible<_T2>::value)
        -: 2286:        : _T1(_VSTD::move(__p.first())), _T2(_VSTD::move(__p.second())) {}
        -: 2287:
        -: 2288:    _LIBCPP_INLINE_VISIBILITY
        -: 2289:    __libcpp_compressed_pair_imp& operator=(__libcpp_compressed_pair_imp&& __p)
        -: 2290:        _NOEXCEPT_(is_nothrow_move_assignable<_T1>::value &&
        -: 2291:                   is_nothrow_move_assignable<_T2>::value)
        -: 2292:        {
        -: 2293:            _T1::operator=(_VSTD::move(__p.first()));
        -: 2294:            _T2::operator=(_VSTD::move(__p.second()));
        -: 2295:            return *this;
        -: 2296:        }
        -: 2297:
        -: 2298:#endif  // defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2299:
        -: 2300:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 2301:
        -: 2302:    template <class... _Args1, class... _Args2, size_t... _I1, size_t... _I2>
        -: 2303:        _LIBCPP_INLINE_VISIBILITY
        -: 2304:        __libcpp_compressed_pair_imp(piecewise_construct_t __pc,
        -: 2305:                                     tuple<_Args1...> __first_args,
        -: 2306:                                     tuple<_Args2...> __second_args,
        -: 2307:                                     __tuple_indices<_I1...>,
        -: 2308:                                     __tuple_indices<_I2...>)
        -: 2309:            : _T1(_VSTD::forward<_Args1>(_VSTD::get<_I1>(__first_args))...),
        -: 2310:              _T2(_VSTD::forward<_Args2>(_VSTD::get<_I2>(__second_args))...)
        -: 2311:            {}
        -: 2312:
        -: 2313:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 2314:
        -: 2315:    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return *this;}
        -: 2316:    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return *this;}
        -: 2317:
        -: 2318:    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return *this;}
        -: 2319:    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return *this;}
        -: 2320:
        -: 2321:    _LIBCPP_INLINE_VISIBILITY void swap(__libcpp_compressed_pair_imp&)
        -: 2322:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2323:                   __is_nothrow_swappable<_T2>::value)
        -: 2324:    {
        -: 2325:    }
        -: 2326:};
        -: 2327:
        -: 2328:template <class _T1, class _T2>
        -: 2329:class __compressed_pair
        -: 2330:    : private __libcpp_compressed_pair_imp<_T1, _T2>
        -: 2331:{
        -: 2332:    typedef __libcpp_compressed_pair_imp<_T1, _T2> base;
        -: 2333:public:
        -: 2334:    typedef typename base::_T1_param _T1_param;
        -: 2335:    typedef typename base::_T2_param _T2_param;
        -: 2336:
        -: 2337:    typedef typename base::_T1_reference _T1_reference;
        -: 2338:    typedef typename base::_T2_reference _T2_reference;
        -: 2339:
        -: 2340:    typedef typename base::_T1_const_reference _T1_const_reference;
        -: 2341:    typedef typename base::_T2_const_reference _T2_const_reference;
        -: 2342:
       10: 2343:    _LIBCPP_INLINE_VISIBILITY __compressed_pair() {}
        -: 2344:    _LIBCPP_INLINE_VISIBILITY explicit __compressed_pair(_T1_param __t1)
        -: 2345:        : base(_VSTD::forward<_T1_param>(__t1)) {}
        -: 2346:    _LIBCPP_INLINE_VISIBILITY explicit __compressed_pair(_T2_param __t2)
      102: 2347:        : base(_VSTD::forward<_T2_param>(__t2)) {}
        -: 2348:    _LIBCPP_INLINE_VISIBILITY __compressed_pair(_T1_param __t1, _T2_param __t2)
        -: 2349:        : base(_VSTD::forward<_T1_param>(__t1), _VSTD::forward<_T2_param>(__t2)) {}
        -: 2350:
        -: 2351:#if defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2352:
        -: 2353:    _LIBCPP_INLINE_VISIBILITY
        -: 2354:    __compressed_pair(const __compressed_pair& __p)
        -: 2355:        _NOEXCEPT_(is_nothrow_copy_constructible<_T1>::value &&
        -: 2356:                   is_nothrow_copy_constructible<_T2>::value)
        -: 2357:        : base(__p) {}
        -: 2358:
        -: 2359:    _LIBCPP_INLINE_VISIBILITY
        -: 2360:    __compressed_pair& operator=(const __compressed_pair& __p)
        -: 2361:        _NOEXCEPT_(is_nothrow_copy_assignable<_T1>::value &&
        -: 2362:                   is_nothrow_copy_assignable<_T2>::value)
        -: 2363:        {
        -: 2364:            base::operator=(__p);
        -: 2365:            return *this;
        -: 2366:        }
        -: 2367:
        -: 2368:    _LIBCPP_INLINE_VISIBILITY
        -: 2369:    __compressed_pair(__compressed_pair&& __p)
        -: 2370:        _NOEXCEPT_(is_nothrow_move_constructible<_T1>::value &&
        -: 2371:                   is_nothrow_move_constructible<_T2>::value)
        -: 2372:        : base(_VSTD::move(__p)) {}
        -: 2373:
        -: 2374:    _LIBCPP_INLINE_VISIBILITY
        -: 2375:    __compressed_pair& operator=(__compressed_pair&& __p)
        -: 2376:        _NOEXCEPT_(is_nothrow_move_assignable<_T1>::value &&
        -: 2377:                   is_nothrow_move_assignable<_T2>::value)
        -: 2378:        {
        -: 2379:            base::operator=(_VSTD::move(__p));
        -: 2380:            return *this;
        -: 2381:        }
        -: 2382:
        -: 2383:#endif  // defined(_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS) && !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2384:
        -: 2385:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 2386:
        -: 2387:    template <class... _Args1, class... _Args2>
        -: 2388:        _LIBCPP_INLINE_VISIBILITY
        -: 2389:        __compressed_pair(piecewise_construct_t __pc, tuple<_Args1...> __first_args,
        -: 2390:                                                      tuple<_Args2...> __second_args)
        -: 2391:            : base(__pc, _VSTD::move(__first_args), _VSTD::move(__second_args),
        -: 2392:                   typename __make_tuple_indices<sizeof...(_Args1)>::type(),
        -: 2393:                   typename __make_tuple_indices<sizeof...(_Args2) >::type())
        -: 2394:            {}
        -: 2395:
        -: 2396:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 2397:
      111: 2398:    _LIBCPP_INLINE_VISIBILITY _T1_reference       first() _NOEXCEPT       {return base::first();}
     1049: 2399:    _LIBCPP_INLINE_VISIBILITY _T1_const_reference first() const _NOEXCEPT {return base::first();}
        -: 2400:
        9: 2401:    _LIBCPP_INLINE_VISIBILITY _T2_reference       second() _NOEXCEPT       {return base::second();}
      102: 2402:    _LIBCPP_INLINE_VISIBILITY _T2_const_reference second() const _NOEXCEPT {return base::second();}
        -: 2403:
        -: 2404:    _LIBCPP_INLINE_VISIBILITY void swap(__compressed_pair& __x)
        -: 2405:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2406:                   __is_nothrow_swappable<_T2>::value)
        -: 2407:        {base::swap(__x);}
        -: 2408:};
        -: 2409:
        -: 2410:template <class _T1, class _T2>
        -: 2411:inline _LIBCPP_INLINE_VISIBILITY
        -: 2412:void
        -: 2413:swap(__compressed_pair<_T1, _T2>& __x, __compressed_pair<_T1, _T2>& __y)
        -: 2414:        _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2415:                   __is_nothrow_swappable<_T2>::value)
        -: 2416:    {__x.swap(__y);}
        -: 2417:
        -: 2418:// __same_or_less_cv_qualified
        -: 2419:
        -: 2420:template <class _Ptr1, class _Ptr2,
        -: 2421:          bool = is_same<typename remove_cv<typename pointer_traits<_Ptr1>::element_type>::type,
        -: 2422:                         typename remove_cv<typename pointer_traits<_Ptr2>::element_type>::type
        -: 2423:                        >::value
        -: 2424:         >
        -: 2425:struct __same_or_less_cv_qualified_imp
        -: 2426:    : is_convertible<_Ptr1, _Ptr2> {};
        -: 2427:
        -: 2428:template <class _Ptr1, class _Ptr2>
        -: 2429:struct __same_or_less_cv_qualified_imp<_Ptr1, _Ptr2, false>
        -: 2430:    : false_type {};
        -: 2431:
        -: 2432:template <class _Ptr1, class _Ptr2, bool = is_pointer<_Ptr1>::value ||
        -: 2433:                                           is_same<_Ptr1, _Ptr2>::value ||
        -: 2434:                                           __has_element_type<_Ptr1>::value>
        -: 2435:struct __same_or_less_cv_qualified
        -: 2436:    : __same_or_less_cv_qualified_imp<_Ptr1, _Ptr2> {};
        -: 2437:
        -: 2438:template <class _Ptr1, class _Ptr2>
        -: 2439:struct __same_or_less_cv_qualified<_Ptr1, _Ptr2, false>
        -: 2440:    : false_type {};
        -: 2441:
        -: 2442:// default_delete
        -: 2443:
        -: 2444:template <class _Tp>
        -: 2445:struct _LIBCPP_TYPE_VIS_ONLY default_delete
        -: 2446:{
        -: 2447:#ifndef _LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS
        -: 2448:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT = default;
        -: 2449:#else
        -: 2450:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT {}
        -: 2451:#endif
        -: 2452:    template <class _Up>
        -: 2453:        _LIBCPP_INLINE_VISIBILITY default_delete(const default_delete<_Up>&,
        -: 2454:             typename enable_if<is_convertible<_Up*, _Tp*>::value>::type* = 0) _NOEXCEPT {}
        -: 2455:    _LIBCPP_INLINE_VISIBILITY void operator() (_Tp* __ptr) const _NOEXCEPT
        -: 2456:        {
        -: 2457:            static_assert(sizeof(_Tp) > 0, "default_delete can not delete incomplete type");
        -: 2458:            static_assert(!is_void<_Tp>::value, "default_delete can not delete incomplete type");
        -: 2459:            delete __ptr;
        -: 2460:        }
        -: 2461:};
        -: 2462:
        -: 2463:template <class _Tp>
        -: 2464:struct _LIBCPP_TYPE_VIS_ONLY default_delete<_Tp[]>
        -: 2465:{
        -: 2466:public:
        -: 2467:#ifndef _LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS
        -: 2468:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT = default;
        -: 2469:#else
        -: 2470:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR default_delete() _NOEXCEPT {}
        -: 2471:#endif
        -: 2472:    template <class _Up>
        -: 2473:        _LIBCPP_INLINE_VISIBILITY default_delete(const default_delete<_Up[]>&,
        -: 2474:             typename enable_if<__same_or_less_cv_qualified<_Up*, _Tp*>::value>::type* = 0) _NOEXCEPT {}
        -: 2475:    template <class _Up>
        -: 2476:        _LIBCPP_INLINE_VISIBILITY
        -: 2477:        void operator() (_Up* __ptr,
        -: 2478:                         typename enable_if<__same_or_less_cv_qualified<_Up*, _Tp*>::value>::type* = 0) const _NOEXCEPT
        -: 2479:        {
        -: 2480:            static_assert(sizeof(_Tp) > 0, "default_delete can not delete incomplete type");
        -: 2481:            static_assert(!is_void<_Tp>::value, "default_delete can not delete incomplete type");
        -: 2482:            delete [] __ptr;
        -: 2483:        }
        -: 2484:};
        -: 2485:
        -: 2486:template <class _Tp, class _Dp = default_delete<_Tp> >
        -: 2487:class _LIBCPP_TYPE_VIS_ONLY unique_ptr
        -: 2488:{
        -: 2489:public:
        -: 2490:    typedef _Tp element_type;
        -: 2491:    typedef _Dp deleter_type;
        -: 2492:    typedef typename __pointer_type<_Tp, deleter_type>::type pointer;
        -: 2493:private:
        -: 2494:    __compressed_pair<pointer, deleter_type> __ptr_;
        -: 2495:
        -: 2496:#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2497:    unique_ptr(unique_ptr&);
        -: 2498:    template <class _Up, class _Ep>
        -: 2499:        unique_ptr(unique_ptr<_Up, _Ep>&);
        -: 2500:    unique_ptr& operator=(unique_ptr&);
        -: 2501:    template <class _Up, class _Ep>
        -: 2502:        unique_ptr& operator=(unique_ptr<_Up, _Ep>&);
        -: 2503:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2504:
        -: 2505:    struct __nat {int __for_bool_;};
        -: 2506:
        -: 2507:    typedef       typename remove_reference<deleter_type>::type& _Dp_reference;
        -: 2508:    typedef const typename remove_reference<deleter_type>::type& _Dp_const_reference;
        -: 2509:public:
        -: 2510:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT
        -: 2511:        : __ptr_(pointer())
        -: 2512:        {
        -: 2513:            static_assert(!is_pointer<deleter_type>::value,
        -: 2514:                "unique_ptr constructed with null function pointer deleter");
        -: 2515:        }
        -: 2516:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT
        -: 2517:        : __ptr_(pointer())
        -: 2518:        {
        -: 2519:            static_assert(!is_pointer<deleter_type>::value,
        -: 2520:                "unique_ptr constructed with null function pointer deleter");
        -: 2521:        }
        -: 2522:    _LIBCPP_INLINE_VISIBILITY explicit unique_ptr(pointer __p) _NOEXCEPT
        -: 2523:        : __ptr_(_VSTD::move(__p))
        -: 2524:        {
        -: 2525:            static_assert(!is_pointer<deleter_type>::value,
        -: 2526:                "unique_ptr constructed with null function pointer deleter");
        -: 2527:        }
        -: 2528:
        -: 2529:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2530:    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, typename conditional<
        -: 2531:                                        is_reference<deleter_type>::value,
        -: 2532:                                        deleter_type,
        -: 2533:                                        typename add_lvalue_reference<const deleter_type>::type>::type __d)
        -: 2534:             _NOEXCEPT
        -: 2535:        : __ptr_(__p, __d) {}
        -: 2536:
        -: 2537:    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, typename remove_reference<deleter_type>::type&& __d)
        -: 2538:             _NOEXCEPT
        -: 2539:        : __ptr_(__p, _VSTD::move(__d))
        -: 2540:        {
        -: 2541:            static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
        -: 2542:        }
        -: 2543:    _LIBCPP_INLINE_VISIBILITY unique_ptr(unique_ptr&& __u) _NOEXCEPT
        -: 2544:        : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {}
        -: 2545:    template <class _Up, class _Ep>
        -: 2546:        _LIBCPP_INLINE_VISIBILITY
        -: 2547:        unique_ptr(unique_ptr<_Up, _Ep>&& __u,
        -: 2548:                   typename enable_if
        -: 2549:                      <
        -: 2550:                        !is_array<_Up>::value &&
        -: 2551:                         is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value &&
        -: 2552:                         is_convertible<_Ep, deleter_type>::value &&
        -: 2553:                         (
        -: 2554:                            !is_reference<deleter_type>::value ||
        -: 2555:                            is_same<deleter_type, _Ep>::value
        -: 2556:                         ),
        -: 2557:                         __nat
        -: 2558:                      >::type = __nat()) _NOEXCEPT
        -: 2559:            : __ptr_(__u.release(), _VSTD::forward<_Ep>(__u.get_deleter())) {}
        -: 2560:
        -: 2561:    template <class _Up>
        -: 2562:        _LIBCPP_INLINE_VISIBILITY unique_ptr(auto_ptr<_Up>&& __p,
        -: 2563:                typename enable_if<
        -: 2564:                                      is_convertible<_Up*, _Tp*>::value &&
        -: 2565:                                      is_same<_Dp, default_delete<_Tp> >::value,
        -: 2566:                                      __nat
        -: 2567:                                  >::type = __nat()) _NOEXCEPT
        -: 2568:            : __ptr_(__p.release())
        -: 2569:            {
        -: 2570:            }
        -: 2571:
        -: 2572:        _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT
        -: 2573:            {
        -: 2574:                reset(__u.release());
        -: 2575:                __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 2576:                return *this;
        -: 2577:            }
        -: 2578:
        -: 2579:        template <class _Up, class _Ep>
        -: 2580:            _LIBCPP_INLINE_VISIBILITY
        -: 2581:            typename enable_if
        -: 2582:            <
        -: 2583:                !is_array<_Up>::value &&
        -: 2584:                is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value &&
        -: 2585:                is_assignable<deleter_type&, _Ep&&>::value,
        -: 2586:                unique_ptr&
        -: 2587:            >::type
        -: 2588:            operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT
        -: 2589:            {
        -: 2590:                reset(__u.release());
        -: 2591:                __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());
        -: 2592:                return *this;
        -: 2593:            }
        -: 2594:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2595:
        -: 2596:    _LIBCPP_INLINE_VISIBILITY operator __rv<unique_ptr>()
        -: 2597:    {
        -: 2598:        return __rv<unique_ptr>(*this);
        -: 2599:    }
        -: 2600:
        -: 2601:    _LIBCPP_INLINE_VISIBILITY unique_ptr(__rv<unique_ptr> __u)
        -: 2602:        : __ptr_(__u->release(), _VSTD::forward<deleter_type>(__u->get_deleter())) {}
        -: 2603:
        -: 2604:    template <class _Up, class _Ep>
        -: 2605:    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(unique_ptr<_Up, _Ep> __u)
        -: 2606:    {
        -: 2607:        reset(__u.release());
        -: 2608:        __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 2609:        return *this;
        -: 2610:    }
        -: 2611:
        -: 2612:    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, deleter_type __d)
        -: 2613:        : __ptr_(_VSTD::move(__p), _VSTD::move(__d)) {}
        -: 2614:
        -: 2615:    template <class _Up>
        -: 2616:        _LIBCPP_INLINE_VISIBILITY
        -: 2617:                typename enable_if<
        -: 2618:                                      is_convertible<_Up*, _Tp*>::value &&
        -: 2619:                                      is_same<_Dp, default_delete<_Tp> >::value,
        -: 2620:                                      unique_ptr&
        -: 2621:                                  >::type
        -: 2622:        operator=(auto_ptr<_Up> __p)
        -: 2623:            {reset(__p.release()); return *this;}
        -: 2624:
        -: 2625:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2626:    _LIBCPP_INLINE_VISIBILITY ~unique_ptr() {reset();}
        -: 2627:
        -: 2628:    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(nullptr_t) _NOEXCEPT
        -: 2629:    {
        -: 2630:        reset();
        -: 2631:        return *this;
        -: 2632:    }
        -: 2633:
        -: 2634:    _LIBCPP_INLINE_VISIBILITY typename add_lvalue_reference<_Tp>::type operator*() const
        -: 2635:        {return *__ptr_.first();}
        -: 2636:    _LIBCPP_INLINE_VISIBILITY pointer operator->() const _NOEXCEPT {return __ptr_.first();}
        -: 2637:    _LIBCPP_INLINE_VISIBILITY pointer get() const _NOEXCEPT {return __ptr_.first();}
        -: 2638:    _LIBCPP_INLINE_VISIBILITY       _Dp_reference get_deleter() _NOEXCEPT
        -: 2639:        {return __ptr_.second();}
        -: 2640:    _LIBCPP_INLINE_VISIBILITY _Dp_const_reference get_deleter() const _NOEXCEPT
        -: 2641:        {return __ptr_.second();}
        -: 2642:    _LIBCPP_INLINE_VISIBILITY
        -: 2643:        _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT
        -: 2644:        {return __ptr_.first() != nullptr;}
        -: 2645:
        -: 2646:    _LIBCPP_INLINE_VISIBILITY pointer release() _NOEXCEPT
        -: 2647:    {
        -: 2648:        pointer __t = __ptr_.first();
        -: 2649:        __ptr_.first() = pointer();
        -: 2650:        return __t;
        -: 2651:    }
        -: 2652:
        -: 2653:    _LIBCPP_INLINE_VISIBILITY void reset(pointer __p = pointer()) _NOEXCEPT
        -: 2654:    {
        -: 2655:        pointer __tmp = __ptr_.first();
        -: 2656:        __ptr_.first() = __p;
        -: 2657:        if (__tmp)
        -: 2658:            __ptr_.second()(__tmp);
        -: 2659:    }
        -: 2660:
        -: 2661:    _LIBCPP_INLINE_VISIBILITY void swap(unique_ptr& __u) _NOEXCEPT
        -: 2662:        {__ptr_.swap(__u.__ptr_);}
        -: 2663:};
        -: 2664:
        -: 2665:template <class _Tp, class _Dp>
        -: 2666:class _LIBCPP_TYPE_VIS_ONLY unique_ptr<_Tp[], _Dp>
        -: 2667:{
        -: 2668:public:
        -: 2669:    typedef _Tp element_type;
        -: 2670:    typedef _Dp deleter_type;
        -: 2671:    typedef typename __pointer_type<_Tp, deleter_type>::type pointer;
        -: 2672:private:
        -: 2673:    __compressed_pair<pointer, deleter_type> __ptr_;
        -: 2674:
        -: 2675:#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2676:    unique_ptr(unique_ptr&);
        -: 2677:    template <class _Up>
        -: 2678:        unique_ptr(unique_ptr<_Up>&);
        -: 2679:    unique_ptr& operator=(unique_ptr&);
        -: 2680:    template <class _Up>
        -: 2681:        unique_ptr& operator=(unique_ptr<_Up>&);
        -: 2682:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2683:
        -: 2684:    struct __nat {int __for_bool_;};
        -: 2685:
        -: 2686:    typedef       typename remove_reference<deleter_type>::type& _Dp_reference;
        -: 2687:    typedef const typename remove_reference<deleter_type>::type& _Dp_const_reference;
        -: 2688:public:
        -: 2689:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT
        -: 2690:        : __ptr_(pointer())
        -: 2691:        {
        -: 2692:            static_assert(!is_pointer<deleter_type>::value,
        -: 2693:                "unique_ptr constructed with null function pointer deleter");
        -: 2694:        }
        -: 2695:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT
        -: 2696:        : __ptr_(pointer())
        -: 2697:        {
        -: 2698:            static_assert(!is_pointer<deleter_type>::value,
        -: 2699:                "unique_ptr constructed with null function pointer deleter");
        -: 2700:        }
        -: 2701:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2702:    template <class _Pp>
        -: 2703:    _LIBCPP_INLINE_VISIBILITY explicit unique_ptr(_Pp __p,
        -: 2704:            typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, __nat>::type = __nat()) _NOEXCEPT
        -: 2705:        : __ptr_(__p)
        -: 2706:        {
        -: 2707:            static_assert(!is_pointer<deleter_type>::value,
        -: 2708:                "unique_ptr constructed with null function pointer deleter");
        -: 2709:        }
        -: 2710:
        -: 2711:    template <class _Pp>
        -: 2712:    _LIBCPP_INLINE_VISIBILITY unique_ptr(_Pp __p, typename conditional<
        -: 2713:                                       is_reference<deleter_type>::value,
        -: 2714:                                       deleter_type,
        -: 2715:                                       typename add_lvalue_reference<const deleter_type>::type>::type __d,
        -: 2716:                                       typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, __nat>::type = __nat())
        -: 2717:             _NOEXCEPT
        -: 2718:        : __ptr_(__p, __d) {}
        -: 2719:
        -: 2720:    _LIBCPP_INLINE_VISIBILITY unique_ptr(nullptr_t, typename conditional<
        -: 2721:                                       is_reference<deleter_type>::value,
        -: 2722:                                       deleter_type,
        -: 2723:                                       typename add_lvalue_reference<const deleter_type>::type>::type __d)
        -: 2724:             _NOEXCEPT
        -: 2725:        : __ptr_(pointer(), __d) {}
        -: 2726:
        -: 2727:    template <class _Pp>
        -: 2728:    _LIBCPP_INLINE_VISIBILITY unique_ptr(_Pp __p,
        -: 2729:                                         typename remove_reference<deleter_type>::type&& __d,
        -: 2730:                                         typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, __nat>::type = __nat())
        -: 2731:             _NOEXCEPT
        -: 2732:        : __ptr_(__p, _VSTD::move(__d))
        -: 2733:        {
        -: 2734:            static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
        -: 2735:        }
        -: 2736:
        -: 2737:    _LIBCPP_INLINE_VISIBILITY unique_ptr(nullptr_t, typename remove_reference<deleter_type>::type&& __d)
        -: 2738:             _NOEXCEPT
        -: 2739:        : __ptr_(pointer(), _VSTD::move(__d))
        -: 2740:        {
        -: 2741:            static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
        -: 2742:        }
        -: 2743:
        -: 2744:    _LIBCPP_INLINE_VISIBILITY unique_ptr(unique_ptr&& __u) _NOEXCEPT
        -: 2745:        : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {}
        -: 2746:
        -: 2747:    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT
        -: 2748:        {
        -: 2749:            reset(__u.release());
        -: 2750:            __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 2751:            return *this;
        -: 2752:        }
        -: 2753:
        -: 2754:    template <class _Up, class _Ep>
        -: 2755:        _LIBCPP_INLINE_VISIBILITY
        -: 2756:        unique_ptr(unique_ptr<_Up, _Ep>&& __u,
        -: 2757:                   typename enable_if
        -: 2758:                            <
        -: 2759:                                is_array<_Up>::value &&
        -: 2760:                                __same_or_less_cv_qualified<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value
        -: 2761:                                && is_convertible<_Ep, deleter_type>::value &&
        -: 2762:                                (
        -: 2763:                                    !is_reference<deleter_type>::value ||
        -: 2764:                                    is_same<deleter_type, _Ep>::value
        -: 2765:                                ),
        -: 2766:                                __nat
        -: 2767:                            >::type = __nat()
        -: 2768:                  ) _NOEXCEPT
        -: 2769:        : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {}
        -: 2770:
        -: 2771:
        -: 2772:        template <class _Up, class _Ep>
        -: 2773:            _LIBCPP_INLINE_VISIBILITY
        -: 2774:            typename enable_if
        -: 2775:            <
        -: 2776:                is_array<_Up>::value &&
        -: 2777:                __same_or_less_cv_qualified<typename unique_ptr<_Up, _Ep>::pointer, pointer>::value &&
        -: 2778:                is_assignable<deleter_type&, _Ep&&>::value,
        -: 2779:                unique_ptr&
        -: 2780:            >::type
        -: 2781:            operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT
        -: 2782:            {
        -: 2783:                reset(__u.release());
        -: 2784:                __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());
        -: 2785:                return *this;
        -: 2786:            }
        -: 2787:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2788:
        -: 2789:    _LIBCPP_INLINE_VISIBILITY explicit unique_ptr(pointer __p)
        -: 2790:        : __ptr_(__p)
        -: 2791:        {
        -: 2792:            static_assert(!is_pointer<deleter_type>::value,
        -: 2793:                "unique_ptr constructed with null function pointer deleter");
        -: 2794:        }
        -: 2795:
        -: 2796:    _LIBCPP_INLINE_VISIBILITY unique_ptr(pointer __p, deleter_type __d)
        -: 2797:        : __ptr_(__p, _VSTD::forward<deleter_type>(__d)) {}
        -: 2798:
        -: 2799:    _LIBCPP_INLINE_VISIBILITY unique_ptr(nullptr_t, deleter_type __d)
        -: 2800:        : __ptr_(pointer(), _VSTD::forward<deleter_type>(__d)) {}
        -: 2801:
        -: 2802:    _LIBCPP_INLINE_VISIBILITY operator __rv<unique_ptr>()
        -: 2803:    {
        -: 2804:        return __rv<unique_ptr>(*this);
        -: 2805:    }
        -: 2806:
        -: 2807:    _LIBCPP_INLINE_VISIBILITY unique_ptr(__rv<unique_ptr> __u)
        -: 2808:        : __ptr_(__u->release(), _VSTD::forward<deleter_type>(__u->get_deleter())) {}
        -: 2809:
        -: 2810:    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(__rv<unique_ptr> __u)
        -: 2811:    {
        -: 2812:        reset(__u->release());
        -: 2813:        __ptr_.second() = _VSTD::forward<deleter_type>(__u->get_deleter());
        -: 2814:        return *this;
        -: 2815:    }
        -: 2816:
        -: 2817:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2818:    _LIBCPP_INLINE_VISIBILITY ~unique_ptr() {reset();}
        -: 2819:
        -: 2820:    _LIBCPP_INLINE_VISIBILITY unique_ptr& operator=(nullptr_t) _NOEXCEPT
        -: 2821:    {
        -: 2822:        reset();
        -: 2823:        return *this;
        -: 2824:    }
        -: 2825:
        -: 2826:    _LIBCPP_INLINE_VISIBILITY typename add_lvalue_reference<_Tp>::type operator[](size_t __i) const
        -: 2827:        {return __ptr_.first()[__i];}
        -: 2828:    _LIBCPP_INLINE_VISIBILITY pointer get() const _NOEXCEPT {return __ptr_.first();}
        -: 2829:    _LIBCPP_INLINE_VISIBILITY       _Dp_reference get_deleter() _NOEXCEPT
        -: 2830:        {return __ptr_.second();}
        -: 2831:    _LIBCPP_INLINE_VISIBILITY _Dp_const_reference get_deleter() const _NOEXCEPT
        -: 2832:        {return __ptr_.second();}
        -: 2833:    _LIBCPP_INLINE_VISIBILITY
        -: 2834:        _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT
        -: 2835:        {return __ptr_.first() != nullptr;}
        -: 2836:
        -: 2837:    _LIBCPP_INLINE_VISIBILITY pointer release() _NOEXCEPT
        -: 2838:    {
        -: 2839:        pointer __t = __ptr_.first();
        -: 2840:        __ptr_.first() = pointer();
        -: 2841:        return __t;
        -: 2842:    }
        -: 2843:
        -: 2844:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2845:    template <class _Pp>
        -: 2846:    _LIBCPP_INLINE_VISIBILITY
        -: 2847:    typename enable_if<__same_or_less_cv_qualified<_Pp, pointer>::value, void>::type
        -: 2848:    reset(_Pp __p) _NOEXCEPT
        -: 2849:    {
        -: 2850:        pointer __tmp = __ptr_.first();
        -: 2851:        __ptr_.first() = __p;
        -: 2852:        if (__tmp)
        -: 2853:            __ptr_.second()(__tmp);
        -: 2854:    }
        -: 2855:    _LIBCPP_INLINE_VISIBILITY void reset(nullptr_t) _NOEXCEPT
        -: 2856:    {
        -: 2857:        pointer __tmp = __ptr_.first();
        -: 2858:        __ptr_.first() = nullptr;
        -: 2859:        if (__tmp)
        -: 2860:            __ptr_.second()(__tmp);
        -: 2861:    }
        -: 2862:    _LIBCPP_INLINE_VISIBILITY void reset() _NOEXCEPT
        -: 2863:    {
        -: 2864:        pointer __tmp = __ptr_.first();
        -: 2865:        __ptr_.first() = nullptr;
        -: 2866:        if (__tmp)
        -: 2867:            __ptr_.second()(__tmp);
        -: 2868:    }
        -: 2869:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2870:    _LIBCPP_INLINE_VISIBILITY void reset(pointer __p = pointer())
        -: 2871:    {
        -: 2872:        pointer __tmp = __ptr_.first();
        -: 2873:        __ptr_.first() = __p;
        -: 2874:        if (__tmp)
        -: 2875:            __ptr_.second()(__tmp);
        -: 2876:    }
        -: 2877:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2878:
        -: 2879:    _LIBCPP_INLINE_VISIBILITY void swap(unique_ptr& __u) {__ptr_.swap(__u.__ptr_);}
        -: 2880:private:
        -: 2881:
        -: 2882:#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2883:    template <class _Up>
        -: 2884:        explicit unique_ptr(_Up);
        -: 2885:    template <class _Up>
        -: 2886:        unique_ptr(_Up __u,
        -: 2887:                   typename conditional<
        -: 2888:                                       is_reference<deleter_type>::value,
        -: 2889:                                       deleter_type,
        -: 2890:                                       typename add_lvalue_reference<const deleter_type>::type>::type,
        -: 2891:                   typename enable_if
        -: 2892:                      <
        -: 2893:                         is_convertible<_Up, pointer>::value,
        -: 2894:                         __nat
        -: 2895:                      >::type = __nat());
        -: 2896:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 2897:};
        -: 2898:
        -: 2899:template <class _Tp, class _Dp>
        -: 2900:inline _LIBCPP_INLINE_VISIBILITY
        -: 2901:void
        -: 2902:swap(unique_ptr<_Tp, _Dp>& __x, unique_ptr<_Tp, _Dp>& __y) _NOEXCEPT {__x.swap(__y);}
        -: 2903:
        -: 2904:template <class _T1, class _D1, class _T2, class _D2>
        -: 2905:inline _LIBCPP_INLINE_VISIBILITY
        -: 2906:bool
        -: 2907:operator==(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __x.get() == __y.get();}
        -: 2908:
        -: 2909:template <class _T1, class _D1, class _T2, class _D2>
        -: 2910:inline _LIBCPP_INLINE_VISIBILITY
        -: 2911:bool
        -: 2912:operator!=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x == __y);}
        -: 2913:
        -: 2914:template <class _T1, class _D1, class _T2, class _D2>
        -: 2915:inline _LIBCPP_INLINE_VISIBILITY
        -: 2916:bool
        -: 2917:operator< (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y)
        -: 2918:{
        -: 2919:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 2920:    typedef typename unique_ptr<_T2, _D2>::pointer _P2;
        -: 2921:    typedef typename common_type<_P1, _P2>::type _Vp;
        -: 2922:    return less<_Vp>()(__x.get(), __y.get());
        -: 2923:}
        -: 2924:
        -: 2925:template <class _T1, class _D1, class _T2, class _D2>
        -: 2926:inline _LIBCPP_INLINE_VISIBILITY
        -: 2927:bool
        -: 2928:operator> (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __y < __x;}
        -: 2929:
        -: 2930:template <class _T1, class _D1, class _T2, class _D2>
        -: 2931:inline _LIBCPP_INLINE_VISIBILITY
        -: 2932:bool
        -: 2933:operator<=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__y < __x);}
        -: 2934:
        -: 2935:template <class _T1, class _D1, class _T2, class _D2>
        -: 2936:inline _LIBCPP_INLINE_VISIBILITY
        -: 2937:bool
        -: 2938:operator>=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x < __y);}
        -: 2939:
        -: 2940:template <class _T1, class _D1>
        -: 2941:inline _LIBCPP_INLINE_VISIBILITY
        -: 2942:bool
        -: 2943:operator==(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT
        -: 2944:{
        -: 2945:    return !__x;
        -: 2946:}
        -: 2947:
        -: 2948:template <class _T1, class _D1>
        -: 2949:inline _LIBCPP_INLINE_VISIBILITY
        -: 2950:bool
        -: 2951:operator==(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT
        -: 2952:{
        -: 2953:    return !__x;
        -: 2954:}
        -: 2955:
        -: 2956:template <class _T1, class _D1>
        -: 2957:inline _LIBCPP_INLINE_VISIBILITY
        -: 2958:bool
        -: 2959:operator!=(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT
        -: 2960:{
        -: 2961:    return static_cast<bool>(__x);
        -: 2962:}
        -: 2963:
        -: 2964:template <class _T1, class _D1>
        -: 2965:inline _LIBCPP_INLINE_VISIBILITY
        -: 2966:bool
        -: 2967:operator!=(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT
        -: 2968:{
        -: 2969:    return static_cast<bool>(__x);
        -: 2970:}
        -: 2971:
        -: 2972:template <class _T1, class _D1>
        -: 2973:inline _LIBCPP_INLINE_VISIBILITY
        -: 2974:bool
        -: 2975:operator<(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 2976:{
        -: 2977:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 2978:    return less<_P1>()(__x.get(), nullptr);
        -: 2979:}
        -: 2980:
        -: 2981:template <class _T1, class _D1>
        -: 2982:inline _LIBCPP_INLINE_VISIBILITY
        -: 2983:bool
        -: 2984:operator<(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 2985:{
        -: 2986:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 2987:    return less<_P1>()(nullptr, __x.get());
        -: 2988:}
        -: 2989:
        -: 2990:template <class _T1, class _D1>
        -: 2991:inline _LIBCPP_INLINE_VISIBILITY
        -: 2992:bool
        -: 2993:operator>(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 2994:{
        -: 2995:    return nullptr < __x;
        -: 2996:}
        -: 2997:
        -: 2998:template <class _T1, class _D1>
        -: 2999:inline _LIBCPP_INLINE_VISIBILITY
        -: 3000:bool
        -: 3001:operator>(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3002:{
        -: 3003:    return __x < nullptr;
        -: 3004:}
        -: 3005:
        -: 3006:template <class _T1, class _D1>
        -: 3007:inline _LIBCPP_INLINE_VISIBILITY
        -: 3008:bool
        -: 3009:operator<=(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 3010:{
        -: 3011:    return !(nullptr < __x);
        -: 3012:}
        -: 3013:
        -: 3014:template <class _T1, class _D1>
        -: 3015:inline _LIBCPP_INLINE_VISIBILITY
        -: 3016:bool
        -: 3017:operator<=(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3018:{
        -: 3019:    return !(__x < nullptr);
        -: 3020:}
        -: 3021:
        -: 3022:template <class _T1, class _D1>
        -: 3023:inline _LIBCPP_INLINE_VISIBILITY
        -: 3024:bool
        -: 3025:operator>=(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 3026:{
        -: 3027:    return !(__x < nullptr);
        -: 3028:}
        -: 3029:
        -: 3030:template <class _T1, class _D1>
        -: 3031:inline _LIBCPP_INLINE_VISIBILITY
        -: 3032:bool
        -: 3033:operator>=(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3034:{
        -: 3035:    return !(nullptr < __x);
        -: 3036:}
        -: 3037:
        -: 3038:#ifdef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3039:
        -: 3040:template <class _Tp, class _Dp>
        -: 3041:inline _LIBCPP_INLINE_VISIBILITY
        -: 3042:unique_ptr<_Tp, _Dp>
        -: 3043:move(unique_ptr<_Tp, _Dp>& __t)
        -: 3044:{
        -: 3045:    return unique_ptr<_Tp, _Dp>(__rv<unique_ptr<_Tp, _Dp> >(__t));
        -: 3046:}
        -: 3047:
        -: 3048:#endif
        -: 3049:
        -: 3050:#if _LIBCPP_STD_VER > 11
        -: 3051:
        -: 3052:template<class _Tp>
        -: 3053:struct __unique_if
        -: 3054:{
        -: 3055:    typedef unique_ptr<_Tp> __unique_single;
        -: 3056:};
        -: 3057:
        -: 3058:template<class _Tp>
        -: 3059:struct __unique_if<_Tp[]>
        -: 3060:{
        -: 3061:    typedef unique_ptr<_Tp[]> __unique_array_unknown_bound;
        -: 3062:};
        -: 3063:
        -: 3064:template<class _Tp, size_t _Np>
        -: 3065:struct __unique_if<_Tp[_Np]>
        -: 3066:{
        -: 3067:    typedef void __unique_array_known_bound;
        -: 3068:};
        -: 3069:
        -: 3070:template<class _Tp, class... _Args>
        -: 3071:inline _LIBCPP_INLINE_VISIBILITY
        -: 3072:typename __unique_if<_Tp>::__unique_single
        -: 3073:make_unique(_Args&&... __args)
        -: 3074:{
        -: 3075:    return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));
        -: 3076:}
        -: 3077:
        -: 3078:template<class _Tp>
        -: 3079:inline _LIBCPP_INLINE_VISIBILITY
        -: 3080:typename __unique_if<_Tp>::__unique_array_unknown_bound
        -: 3081:make_unique(size_t __n)
        -: 3082:{
        -: 3083:    typedef typename remove_extent<_Tp>::type _Up;
        -: 3084:    return unique_ptr<_Tp>(new _Up[__n]());
        -: 3085:}
        -: 3086:
        -: 3087:template<class _Tp, class... _Args>
        -: 3088:    typename __unique_if<_Tp>::__unique_array_known_bound
        -: 3089:    make_unique(_Args&&...) = delete;
        -: 3090:
        -: 3091:#endif  // _LIBCPP_STD_VER > 11
        -: 3092:
        -: 3093:template <class _Tp> struct hash;
        -: 3094:
        -: 3095:template <class _Size>
        -: 3096:inline _LIBCPP_INLINE_VISIBILITY
        -: 3097:_Size
        -: 3098:__loadword(const void* __p)
        -: 3099:{
        -: 3100:    _Size __r;
        -: 3101:    std::memcpy(&__r, __p, sizeof(__r));
        -: 3102:    return __r;
        -: 3103:}
        -: 3104:
        -: 3105:// We use murmur2 when size_t is 32 bits, and cityhash64 when size_t
        -: 3106:// is 64 bits.  This is because cityhash64 uses 64bit x 64bit
        -: 3107:// multiplication, which can be very slow on 32-bit systems.
        -: 3108:template <class _Size, size_t = sizeof(_Size)*__CHAR_BIT__>
        -: 3109:struct __murmur2_or_cityhash;
        -: 3110:
        -: 3111:template <class _Size>
        -: 3112:struct __murmur2_or_cityhash<_Size, 32>
        -: 3113:{
        -: 3114:    _Size operator()(const void* __key, _Size __len);
        -: 3115:};
        -: 3116:
        -: 3117:// murmur2
        -: 3118:template <class _Size>
        -: 3119:_Size
        -: 3120:__murmur2_or_cityhash<_Size, 32>::operator()(const void* __key, _Size __len)
        -: 3121:{
        -: 3122:    const _Size __m = 0x5bd1e995;
        -: 3123:    const _Size __r = 24;
        -: 3124:    _Size __h = __len;
        -: 3125:    const unsigned char* __data = static_cast<const unsigned char*>(__key);
        -: 3126:    for (; __len >= 4; __data += 4, __len -= 4)
        -: 3127:    {
        -: 3128:        _Size __k = __loadword<_Size>(__data);
        -: 3129:        __k *= __m;
        -: 3130:        __k ^= __k >> __r;
        -: 3131:        __k *= __m;
        -: 3132:        __h *= __m;
        -: 3133:        __h ^= __k;
        -: 3134:    }
        -: 3135:    switch (__len)
        -: 3136:    {
        -: 3137:    case 3:
        -: 3138:        __h ^= __data[2] << 16;
        -: 3139:    case 2:
        -: 3140:        __h ^= __data[1] << 8;
        -: 3141:    case 1:
        -: 3142:        __h ^= __data[0];
        -: 3143:        __h *= __m;
        -: 3144:    }
        -: 3145:    __h ^= __h >> 13;
        -: 3146:    __h *= __m;
        -: 3147:    __h ^= __h >> 15;
        -: 3148:    return __h;
        -: 3149:}
        -: 3150:
        -: 3151:template <class _Size>
        -: 3152:struct __murmur2_or_cityhash<_Size, 64>
        -: 3153:{
        -: 3154:    _Size operator()(const void* __key, _Size __len);
        -: 3155:
        -: 3156: private:
        -: 3157:  // Some primes between 2^63 and 2^64.
        -: 3158:  static const _Size __k0 = 0xc3a5c85c97cb3127ULL;
        -: 3159:  static const _Size __k1 = 0xb492b66fbe98f273ULL;
        -: 3160:  static const _Size __k2 = 0x9ae16a3b2f90404fULL;
        -: 3161:  static const _Size __k3 = 0xc949d7c7509e6557ULL;
        -: 3162:
        -: 3163:  static _Size __rotate(_Size __val, int __shift) {
        -: 3164:    return __shift == 0 ? __val : ((__val >> __shift) | (__val << (64 - __shift)));
        -: 3165:  }
        -: 3166:
        -: 3167:  static _Size __rotate_by_at_least_1(_Size __val, int __shift) {
        -: 3168:    return (__val >> __shift) | (__val << (64 - __shift));
        -: 3169:  }
        -: 3170:
        -: 3171:  static _Size __shift_mix(_Size __val) {
        -: 3172:    return __val ^ (__val >> 47);
        -: 3173:  }
        -: 3174:
        -: 3175:  static _Size __hash_len_16(_Size __u, _Size __v) {
        -: 3176:    const _Size __mul = 0x9ddfea08eb382d69ULL;
        -: 3177:    _Size __a = (__u ^ __v) * __mul;
        -: 3178:    __a ^= (__a >> 47);
        -: 3179:    _Size __b = (__v ^ __a) * __mul;
        -: 3180:    __b ^= (__b >> 47);
        -: 3181:    __b *= __mul;
        -: 3182:    return __b;
        -: 3183:  }
        -: 3184:
        -: 3185:  static _Size __hash_len_0_to_16(const char* __s, _Size __len) {
        -: 3186:    if (__len > 8) {
        -: 3187:      const _Size __a = __loadword<_Size>(__s);
        -: 3188:      const _Size __b = __loadword<_Size>(__s + __len - 8);
        -: 3189:      return __hash_len_16(__a, __rotate_by_at_least_1(__b + __len, __len)) ^ __b;
        -: 3190:    }
        -: 3191:    if (__len >= 4) {
        -: 3192:      const uint32_t __a = __loadword<uint32_t>(__s);
        -: 3193:      const uint32_t __b = __loadword<uint32_t>(__s + __len - 4);
        -: 3194:      return __hash_len_16(__len + (__a << 3), __b);
        -: 3195:    }
        -: 3196:    if (__len > 0) {
        -: 3197:      const unsigned char __a = __s[0];
        -: 3198:      const unsigned char __b = __s[__len >> 1];
        -: 3199:      const unsigned char __c = __s[__len - 1];
        -: 3200:      const uint32_t __y = static_cast<uint32_t>(__a) +
        -: 3201:                           (static_cast<uint32_t>(__b) << 8);
        -: 3202:      const uint32_t __z = __len + (static_cast<uint32_t>(__c) << 2);
        -: 3203:      return __shift_mix(__y * __k2 ^ __z * __k3) * __k2;
        -: 3204:    }
        -: 3205:    return __k2;
        -: 3206:  }
        -: 3207:
        -: 3208:  static _Size __hash_len_17_to_32(const char *__s, _Size __len) {
        -: 3209:    const _Size __a = __loadword<_Size>(__s) * __k1;
        -: 3210:    const _Size __b = __loadword<_Size>(__s + 8);
        -: 3211:    const _Size __c = __loadword<_Size>(__s + __len - 8) * __k2;
        -: 3212:    const _Size __d = __loadword<_Size>(__s + __len - 16) * __k0;
        -: 3213:    return __hash_len_16(__rotate(__a - __b, 43) + __rotate(__c, 30) + __d,
        -: 3214:                         __a + __rotate(__b ^ __k3, 20) - __c + __len);
        -: 3215:  }
        -: 3216:
        -: 3217:  // Return a 16-byte hash for 48 bytes.  Quick and dirty.
        -: 3218:  // Callers do best to use "random-looking" values for a and b.
        -: 3219:  static pair<_Size, _Size> __weak_hash_len_32_with_seeds(
        -: 3220:      _Size __w, _Size __x, _Size __y, _Size __z, _Size __a, _Size __b) {
        -: 3221:    __a += __w;
        -: 3222:    __b = __rotate(__b + __a + __z, 21);
        -: 3223:    const _Size __c = __a;
        -: 3224:    __a += __x;
        -: 3225:    __a += __y;
        -: 3226:    __b += __rotate(__a, 44);
        -: 3227:    return pair<_Size, _Size>(__a + __z, __b + __c);
        -: 3228:  }
        -: 3229:
        -: 3230:  // Return a 16-byte hash for s[0] ... s[31], a, and b.  Quick and dirty.
        -: 3231:  static pair<_Size, _Size> __weak_hash_len_32_with_seeds(
        -: 3232:      const char* __s, _Size __a, _Size __b) {
        -: 3233:    return __weak_hash_len_32_with_seeds(__loadword<_Size>(__s),
        -: 3234:                                         __loadword<_Size>(__s + 8),
        -: 3235:                                         __loadword<_Size>(__s + 16),
        -: 3236:                                         __loadword<_Size>(__s + 24),
        -: 3237:                                         __a,
        -: 3238:                                         __b);
        -: 3239:  }
        -: 3240:
        -: 3241:  // Return an 8-byte hash for 33 to 64 bytes.
        -: 3242:  static _Size __hash_len_33_to_64(const char *__s, size_t __len) {
        -: 3243:    _Size __z = __loadword<_Size>(__s + 24);
        -: 3244:    _Size __a = __loadword<_Size>(__s) +
        -: 3245:                (__len + __loadword<_Size>(__s + __len - 16)) * __k0;
        -: 3246:    _Size __b = __rotate(__a + __z, 52);
        -: 3247:    _Size __c = __rotate(__a, 37);
        -: 3248:    __a += __loadword<_Size>(__s + 8);
        -: 3249:    __c += __rotate(__a, 7);
        -: 3250:    __a += __loadword<_Size>(__s + 16);
        -: 3251:    _Size __vf = __a + __z;
        -: 3252:    _Size __vs = __b + __rotate(__a, 31) + __c;
        -: 3253:    __a = __loadword<_Size>(__s + 16) + __loadword<_Size>(__s + __len - 32);
        -: 3254:    __z += __loadword<_Size>(__s + __len - 8);
        -: 3255:    __b = __rotate(__a + __z, 52);
        -: 3256:    __c = __rotate(__a, 37);
        -: 3257:    __a += __loadword<_Size>(__s + __len - 24);
        -: 3258:    __c += __rotate(__a, 7);
        -: 3259:    __a += __loadword<_Size>(__s + __len - 16);
        -: 3260:    _Size __wf = __a + __z;
        -: 3261:    _Size __ws = __b + __rotate(__a, 31) + __c;
        -: 3262:    _Size __r = __shift_mix((__vf + __ws) * __k2 + (__wf + __vs) * __k0);
        -: 3263:    return __shift_mix(__r * __k0 + __vs) * __k2;
        -: 3264:  }
        -: 3265:};
        -: 3266:
        -: 3267:// cityhash64
        -: 3268:template <class _Size>
        -: 3269:_Size
        -: 3270:__murmur2_or_cityhash<_Size, 64>::operator()(const void* __key, _Size __len)
        -: 3271:{
        -: 3272:  const char* __s = static_cast<const char*>(__key);
        -: 3273:  if (__len <= 32) {
        -: 3274:    if (__len <= 16) {
        -: 3275:      return __hash_len_0_to_16(__s, __len);
        -: 3276:    } else {
        -: 3277:      return __hash_len_17_to_32(__s, __len);
        -: 3278:    }
        -: 3279:  } else if (__len <= 64) {
        -: 3280:    return __hash_len_33_to_64(__s, __len);
        -: 3281:  }
        -: 3282:
        -: 3283:  // For strings over 64 bytes we hash the end first, and then as we
        -: 3284:  // loop we keep 56 bytes of state: v, w, x, y, and z.
        -: 3285:  _Size __x = __loadword<_Size>(__s + __len - 40);
        -: 3286:  _Size __y = __loadword<_Size>(__s + __len - 16) +
        -: 3287:              __loadword<_Size>(__s + __len - 56);
        -: 3288:  _Size __z = __hash_len_16(__loadword<_Size>(__s + __len - 48) + __len,
        -: 3289:                          __loadword<_Size>(__s + __len - 24));
        -: 3290:  pair<_Size, _Size> __v = __weak_hash_len_32_with_seeds(__s + __len - 64, __len, __z);
        -: 3291:  pair<_Size, _Size> __w = __weak_hash_len_32_with_seeds(__s + __len - 32, __y + __k1, __x);
        -: 3292:  __x = __x * __k1 + __loadword<_Size>(__s);
        -: 3293:
        -: 3294:  // Decrease len to the nearest multiple of 64, and operate on 64-byte chunks.
        -: 3295:  __len = (__len - 1) & ~static_cast<_Size>(63);
        -: 3296:  do {
        -: 3297:    __x = __rotate(__x + __y + __v.first + __loadword<_Size>(__s + 8), 37) * __k1;
        -: 3298:    __y = __rotate(__y + __v.second + __loadword<_Size>(__s + 48), 42) * __k1;
        -: 3299:    __x ^= __w.second;
        -: 3300:    __y += __v.first + __loadword<_Size>(__s + 40);
        -: 3301:    __z = __rotate(__z + __w.first, 33) * __k1;
        -: 3302:    __v = __weak_hash_len_32_with_seeds(__s, __v.second * __k1, __x + __w.first);
        -: 3303:    __w = __weak_hash_len_32_with_seeds(__s + 32, __z + __w.second,
        -: 3304:                                        __y + __loadword<_Size>(__s + 16));
        -: 3305:    std::swap(__z, __x);
        -: 3306:    __s += 64;
        -: 3307:    __len -= 64;
        -: 3308:  } while (__len != 0);
        -: 3309:  return __hash_len_16(
        -: 3310:      __hash_len_16(__v.first, __w.first) + __shift_mix(__y) * __k1 + __z,
        -: 3311:      __hash_len_16(__v.second, __w.second) + __x);
        -: 3312:}
        -: 3313:
        -: 3314:template <class _Tp, size_t = sizeof(_Tp) / sizeof(size_t)>
        -: 3315:struct __scalar_hash;
        -: 3316:
        -: 3317:template <class _Tp>
        -: 3318:struct __scalar_hash<_Tp, 0>
        -: 3319:    : public unary_function<_Tp, size_t>
        -: 3320:{
        -: 3321:    _LIBCPP_INLINE_VISIBILITY
        -: 3322:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 3323:    {
        -: 3324:        union
        -: 3325:        {
        -: 3326:            _Tp    __t;
        -: 3327:            size_t __a;
        -: 3328:        } __u;
        -: 3329:        __u.__a = 0;
        -: 3330:        __u.__t = __v;
        -: 3331:        return __u.__a;
        -: 3332:    }
        -: 3333:};
        -: 3334:
        -: 3335:template <class _Tp>
        -: 3336:struct __scalar_hash<_Tp, 1>
        -: 3337:    : public unary_function<_Tp, size_t>
        -: 3338:{
        -: 3339:    _LIBCPP_INLINE_VISIBILITY
        -: 3340:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 3341:    {
        -: 3342:        union
        -: 3343:        {
        -: 3344:            _Tp    __t;
        -: 3345:            size_t __a;
        -: 3346:        } __u;
        -: 3347:        __u.__t = __v;
        -: 3348:        return __u.__a;
        -: 3349:    }
        -: 3350:};
        -: 3351:
        -: 3352:template <class _Tp>
        -: 3353:struct __scalar_hash<_Tp, 2>
        -: 3354:    : public unary_function<_Tp, size_t>
        -: 3355:{
        -: 3356:    _LIBCPP_INLINE_VISIBILITY
        -: 3357:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 3358:    {
        -: 3359:        union
        -: 3360:        {
        -: 3361:            _Tp __t;
        -: 3362:            struct
        -: 3363:            {
        -: 3364:                size_t __a;
        -: 3365:                size_t __b;
        -: 3366:            };
        -: 3367:        } __u;
        -: 3368:        __u.__t = __v;
        -: 3369:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 3370:    }
        -: 3371:};
        -: 3372:
        -: 3373:template <class _Tp>
        -: 3374:struct __scalar_hash<_Tp, 3>
        -: 3375:    : public unary_function<_Tp, size_t>
        -: 3376:{
        -: 3377:    _LIBCPP_INLINE_VISIBILITY
        -: 3378:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 3379:    {
        -: 3380:        union
        -: 3381:        {
        -: 3382:            _Tp __t;
        -: 3383:            struct
        -: 3384:            {
        -: 3385:                size_t __a;
        -: 3386:                size_t __b;
        -: 3387:                size_t __c;
        -: 3388:            };
        -: 3389:        } __u;
        -: 3390:        __u.__t = __v;
        -: 3391:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 3392:    }
        -: 3393:};
        -: 3394:
        -: 3395:template <class _Tp>
        -: 3396:struct __scalar_hash<_Tp, 4>
        -: 3397:    : public unary_function<_Tp, size_t>
        -: 3398:{
        -: 3399:    _LIBCPP_INLINE_VISIBILITY
        -: 3400:    size_t operator()(_Tp __v) const _NOEXCEPT
        -: 3401:    {
        -: 3402:        union
        -: 3403:        {
        -: 3404:            _Tp __t;
        -: 3405:            struct
        -: 3406:            {
        -: 3407:                size_t __a;
        -: 3408:                size_t __b;
        -: 3409:                size_t __c;
        -: 3410:                size_t __d;
        -: 3411:            };
        -: 3412:        } __u;
        -: 3413:        __u.__t = __v;
        -: 3414:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 3415:    }
        -: 3416:};
        -: 3417:
        -: 3418:template<class _Tp>
        -: 3419:struct _LIBCPP_TYPE_VIS_ONLY hash<_Tp*>
        -: 3420:    : public unary_function<_Tp*, size_t>
        -: 3421:{
        -: 3422:    _LIBCPP_INLINE_VISIBILITY
        -: 3423:    size_t operator()(_Tp* __v) const _NOEXCEPT
        -: 3424:    {
        -: 3425:        union
        -: 3426:        {
        -: 3427:            _Tp* __t;
        -: 3428:            size_t __a;
        -: 3429:        } __u;
        -: 3430:        __u.__t = __v;
        -: 3431:        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
        -: 3432:    }
        -: 3433:};
        -: 3434:
        -: 3435:template <class _Tp, class _Dp>
        -: 3436:struct _LIBCPP_TYPE_VIS_ONLY hash<unique_ptr<_Tp, _Dp> >
        -: 3437:{
        -: 3438:    typedef unique_ptr<_Tp, _Dp> argument_type;
        -: 3439:    typedef size_t               result_type;
        -: 3440:    _LIBCPP_INLINE_VISIBILITY
        -: 3441:    result_type operator()(const argument_type& __ptr) const _NOEXCEPT
        -: 3442:    {
        -: 3443:        typedef typename argument_type::pointer pointer;
        -: 3444:        return hash<pointer>()(__ptr.get());
        -: 3445:    }
        -: 3446:};
        -: 3447:
        -: 3448:struct __destruct_n
        -: 3449:{
        -: 3450:private:
        -: 3451:    size_t size;
        -: 3452:
        -: 3453:    template <class _Tp>
        -: 3454:    _LIBCPP_INLINE_VISIBILITY void __process(_Tp* __p, false_type) _NOEXCEPT
        -: 3455:        {for (size_t __i = 0; __i < size; ++__i, ++__p) __p->~_Tp();}
        -: 3456:
        -: 3457:    template <class _Tp>
        -: 3458:    _LIBCPP_INLINE_VISIBILITY void __process(_Tp*, true_type) _NOEXCEPT
        -: 3459:        {}
        -: 3460:
        -: 3461:    _LIBCPP_INLINE_VISIBILITY void __incr(false_type) _NOEXCEPT
        -: 3462:        {++size;}
        -: 3463:    _LIBCPP_INLINE_VISIBILITY void __incr(true_type) _NOEXCEPT
        -: 3464:        {}
        -: 3465:
        -: 3466:    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, false_type) _NOEXCEPT
        -: 3467:        {size = __s;}
        -: 3468:    _LIBCPP_INLINE_VISIBILITY void __set(size_t, true_type) _NOEXCEPT
        -: 3469:        {}
        -: 3470:public:
        -: 3471:    _LIBCPP_INLINE_VISIBILITY explicit __destruct_n(size_t __s) _NOEXCEPT
        -: 3472:        : size(__s) {}
        -: 3473:
        -: 3474:    template <class _Tp>
        -: 3475:    _LIBCPP_INLINE_VISIBILITY void __incr(_Tp*) _NOEXCEPT
        -: 3476:        {__incr(integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 3477:
        -: 3478:    template <class _Tp>
        -: 3479:    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, _Tp*) _NOEXCEPT
        -: 3480:        {__set(__s, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 3481:
        -: 3482:    template <class _Tp>
        -: 3483:    _LIBCPP_INLINE_VISIBILITY void operator()(_Tp* __p) _NOEXCEPT
        -: 3484:        {__process(__p, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 3485:};
        -: 3486:
        -: 3487:template <class _Alloc>
        -: 3488:class __allocator_destructor
        -: 3489:{
        -: 3490:    typedef allocator_traits<_Alloc> __alloc_traits;
        -: 3491:public:
        -: 3492:    typedef typename __alloc_traits::pointer pointer;
        -: 3493:    typedef typename __alloc_traits::size_type size_type;
        -: 3494:private:
        -: 3495:    _Alloc& __alloc_;
        -: 3496:    size_type __s_;
        -: 3497:public:
        -: 3498:    _LIBCPP_INLINE_VISIBILITY __allocator_destructor(_Alloc& __a, size_type __s)
        -: 3499:             _NOEXCEPT
        -: 3500:        : __alloc_(__a), __s_(__s) {}
        -: 3501:    _LIBCPP_INLINE_VISIBILITY
        -: 3502:    void operator()(pointer __p) _NOEXCEPT
        -: 3503:        {__alloc_traits::deallocate(__alloc_, __p, __s_);}
        -: 3504:};
        -: 3505:
        -: 3506:template <class _InputIterator, class _ForwardIterator>
        -: 3507:_ForwardIterator
        -: 3508:uninitialized_copy(_InputIterator __f, _InputIterator __l, _ForwardIterator __r)
        -: 3509:{
        -: 3510:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3511:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3512:    _ForwardIterator __s = __r;
        -: 3513:    try
        -: 3514:    {
        -: 3515:#endif
        -: 3516:        for (; __f != __l; ++__f, ++__r)
        -: 3517:            ::new(&*__r) value_type(*__f);
        -: 3518:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3519:    }
        -: 3520:    catch (...)
        -: 3521:    {
        -: 3522:        for (; __s != __r; ++__s)
        -: 3523:            __s->~value_type();
        -: 3524:        throw;
        -: 3525:    }
        -: 3526:#endif
        -: 3527:    return __r;
        -: 3528:}
        -: 3529:
        -: 3530:template <class _InputIterator, class _Size, class _ForwardIterator>
        -: 3531:_ForwardIterator
        -: 3532:uninitialized_copy_n(_InputIterator __f, _Size __n, _ForwardIterator __r)
        -: 3533:{
        -: 3534:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3535:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3536:    _ForwardIterator __s = __r;
        -: 3537:    try
        -: 3538:    {
        -: 3539:#endif
        -: 3540:        for (; __n > 0; ++__f, ++__r, --__n)
        -: 3541:            ::new(&*__r) value_type(*__f);
        -: 3542:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3543:    }
        -: 3544:    catch (...)
        -: 3545:    {
        -: 3546:        for (; __s != __r; ++__s)
        -: 3547:            __s->~value_type();
        -: 3548:        throw;
        -: 3549:    }
        -: 3550:#endif
        -: 3551:    return __r;
        -: 3552:}
        -: 3553:
        -: 3554:template <class _ForwardIterator, class _Tp>
        -: 3555:void
        -: 3556:uninitialized_fill(_ForwardIterator __f, _ForwardIterator __l, const _Tp& __x)
        -: 3557:{
        -: 3558:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3559:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3560:    _ForwardIterator __s = __f;
        -: 3561:    try
        -: 3562:    {
        -: 3563:#endif
        -: 3564:        for (; __f != __l; ++__f)
        -: 3565:            ::new(&*__f) value_type(__x);
        -: 3566:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3567:    }
        -: 3568:    catch (...)
        -: 3569:    {
        -: 3570:        for (; __s != __f; ++__s)
        -: 3571:            __s->~value_type();
        -: 3572:        throw;
        -: 3573:    }
        -: 3574:#endif
        -: 3575:}
        -: 3576:
        -: 3577:template <class _ForwardIterator, class _Size, class _Tp>
        -: 3578:_ForwardIterator
        -: 3579:uninitialized_fill_n(_ForwardIterator __f, _Size __n, const _Tp& __x)
        -: 3580:{
        -: 3581:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3582:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3583:    _ForwardIterator __s = __f;
        -: 3584:    try
        -: 3585:    {
        -: 3586:#endif
        -: 3587:        for (; __n > 0; ++__f, --__n)
        -: 3588:            ::new(&*__f) value_type(__x);
        -: 3589:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3590:    }
        -: 3591:    catch (...)
        -: 3592:    {
        -: 3593:        for (; __s != __f; ++__s)
        -: 3594:            __s->~value_type();
        -: 3595:        throw;
        -: 3596:    }
        -: 3597:#endif
        -: 3598:    return __f;
        -: 3599:}
        -: 3600:
        -: 3601:class _LIBCPP_EXCEPTION_ABI bad_weak_ptr
        -: 3602:    : public std::exception
        -: 3603:{
        -: 3604:public:
        -: 3605:    virtual ~bad_weak_ptr() _NOEXCEPT;
        -: 3606:    virtual const char* what() const  _NOEXCEPT;
        -: 3607:};
        -: 3608:
        -: 3609:template<class _Tp> class _LIBCPP_TYPE_VIS_ONLY weak_ptr;
        -: 3610:
        -: 3611:class _LIBCPP_TYPE_VIS __shared_count
        -: 3612:{
        -: 3613:    __shared_count(const __shared_count&);
        -: 3614:    __shared_count& operator=(const __shared_count&);
        -: 3615:
        -: 3616:protected:
        -: 3617:    long __shared_owners_;
        -: 3618:    virtual ~__shared_count();
        -: 3619:private:
        -: 3620:    virtual void __on_zero_shared() _NOEXCEPT = 0;
        -: 3621:
        -: 3622:public:
        -: 3623:    _LIBCPP_INLINE_VISIBILITY
        -: 3624:    explicit __shared_count(long __refs = 0) _NOEXCEPT
        -: 3625:        : __shared_owners_(__refs) {}
        -: 3626:
        -: 3627:    void __add_shared() _NOEXCEPT;
        -: 3628:    bool __release_shared() _NOEXCEPT;
        -: 3629:    _LIBCPP_INLINE_VISIBILITY
        -: 3630:    long use_count() const _NOEXCEPT {return __shared_owners_ + 1;}
        -: 3631:};
        -: 3632:
        -: 3633:class _LIBCPP_TYPE_VIS __shared_weak_count
        -: 3634:    : private __shared_count
        -: 3635:{
        -: 3636:    long __shared_weak_owners_;
        -: 3637:
        -: 3638:public:
        -: 3639:    _LIBCPP_INLINE_VISIBILITY
        -: 3640:    explicit __shared_weak_count(long __refs = 0) _NOEXCEPT
        -: 3641:        : __shared_count(__refs),
        -: 3642:          __shared_weak_owners_(__refs) {}
        -: 3643:protected:
        -: 3644:    virtual ~__shared_weak_count();
        -: 3645:
        -: 3646:public:
        -: 3647:    void __add_shared() _NOEXCEPT;
        -: 3648:    void __add_weak() _NOEXCEPT;
        -: 3649:    void __release_shared() _NOEXCEPT;
        -: 3650:    void __release_weak() _NOEXCEPT;
        -: 3651:    _LIBCPP_INLINE_VISIBILITY
        -: 3652:    long use_count() const _NOEXCEPT {return __shared_count::use_count();}
        -: 3653:    __shared_weak_count* lock() _NOEXCEPT;
        -: 3654:
        -: 3655:    // Define the function out only if we build static libc++ without RTTI.
        -: 3656:    // Otherwise we may break clients who need to compile their projects with
        -: 3657:    // -fno-rtti and yet link against a libc++.dylib compiled
        -: 3658:    // without -fno-rtti.
        -: 3659:#if !defined(_LIBCPP_NO_RTTI) || !defined(_LIBCPP_BUILD_STATIC)
        -: 3660:    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;
        -: 3661:#endif
        -: 3662:private:
        -: 3663:    virtual void __on_zero_shared_weak() _NOEXCEPT = 0;
        -: 3664:};
        -: 3665:
        -: 3666:template <class _Tp, class _Dp, class _Alloc>
        -: 3667:class __shared_ptr_pointer
        -: 3668:    : public __shared_weak_count
        -: 3669:{
        -: 3670:    __compressed_pair<__compressed_pair<_Tp, _Dp>, _Alloc> __data_;
        -: 3671:public:
        -: 3672:    _LIBCPP_INLINE_VISIBILITY
        -: 3673:    __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a)
        -: 3674:        :  __data_(__compressed_pair<_Tp, _Dp>(__p, _VSTD::move(__d)), _VSTD::move(__a)) {}
        -: 3675:
        -: 3676:#ifndef _LIBCPP_NO_RTTI
        -: 3677:    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;
        -: 3678:#endif
        -: 3679:
        -: 3680:private:
        -: 3681:    virtual void __on_zero_shared() _NOEXCEPT;
        -: 3682:    virtual void __on_zero_shared_weak() _NOEXCEPT;
        -: 3683:};
        -: 3684:
        -: 3685:#ifndef _LIBCPP_NO_RTTI
        -: 3686:
        -: 3687:template <class _Tp, class _Dp, class _Alloc>
        -: 3688:const void*
        -: 3689:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__get_deleter(const type_info& __t) const _NOEXCEPT
        -: 3690:{
        -: 3691:    return __t == typeid(_Dp) ? _VSTD::addressof(__data_.first().second()) : 0;
        -: 3692:}
        -: 3693:
        -: 3694:#endif  // _LIBCPP_NO_RTTI
        -: 3695:
        -: 3696:template <class _Tp, class _Dp, class _Alloc>
        -: 3697:void
        -: 3698:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared() _NOEXCEPT
        -: 3699:{
        -: 3700:    __data_.first().second()(__data_.first().first());
        -: 3701:    __data_.first().second().~_Dp();
        -: 3702:}
        -: 3703:
        -: 3704:template <class _Tp, class _Dp, class _Alloc>
        -: 3705:void
        -: 3706:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT
        -: 3707:{
        -: 3708:    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_pointer>::type _Al;
        -: 3709:    typedef allocator_traits<_Al> _ATraits;
        -: 3710:    typedef pointer_traits<typename _ATraits::pointer> _PTraits;
        -: 3711:
        -: 3712:    _Al __a(__data_.second());
        -: 3713:    __data_.second().~_Alloc();
        -: 3714:    __a.deallocate(_PTraits::pointer_to(*this), 1);
        -: 3715:}
        -: 3716:
        -: 3717:template <class _Tp, class _Alloc>
        -: 3718:class __shared_ptr_emplace
        -: 3719:    : public __shared_weak_count
        -: 3720:{
        -: 3721:    __compressed_pair<_Alloc, _Tp> __data_;
        -: 3722:public:
        -: 3723:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 3724:
        -: 3725:    _LIBCPP_INLINE_VISIBILITY
        -: 3726:    __shared_ptr_emplace(_Alloc __a)
        -: 3727:        :  __data_(_VSTD::move(__a)) {}
        -: 3728:
        -: 3729:    template <class ..._Args>
        -: 3730:        _LIBCPP_INLINE_VISIBILITY
        -: 3731:        __shared_ptr_emplace(_Alloc __a, _Args&& ...__args)
        -: 3732:            :  __data_(piecewise_construct, _VSTD::forward_as_tuple(__a),
        -: 3733:                   _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...)) {}
        -: 3734:
        -: 3735:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 3736:
        -: 3737:    _LIBCPP_INLINE_VISIBILITY
        -: 3738:    __shared_ptr_emplace(_Alloc __a)
        -: 3739:        :  __data_(__a) {}
        -: 3740:
        -: 3741:    template <class _A0>
        -: 3742:        _LIBCPP_INLINE_VISIBILITY
        -: 3743:        __shared_ptr_emplace(_Alloc __a, _A0& __a0)
        -: 3744:            :  __data_(__a, _Tp(__a0)) {}
        -: 3745:
        -: 3746:    template <class _A0, class _A1>
        -: 3747:        _LIBCPP_INLINE_VISIBILITY
        -: 3748:        __shared_ptr_emplace(_Alloc __a, _A0& __a0, _A1& __a1)
        -: 3749:            :  __data_(__a, _Tp(__a0, __a1)) {}
        -: 3750:
        -: 3751:    template <class _A0, class _A1, class _A2>
        -: 3752:        _LIBCPP_INLINE_VISIBILITY
        -: 3753:        __shared_ptr_emplace(_Alloc __a, _A0& __a0, _A1& __a1, _A2& __a2)
        -: 3754:            :  __data_(__a, _Tp(__a0, __a1, __a2)) {}
        -: 3755:
        -: 3756:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 3757:
        -: 3758:private:
        -: 3759:    virtual void __on_zero_shared() _NOEXCEPT;
        -: 3760:    virtual void __on_zero_shared_weak() _NOEXCEPT;
        -: 3761:public:
        -: 3762:    _LIBCPP_INLINE_VISIBILITY
        -: 3763:    _Tp* get() _NOEXCEPT {return &__data_.second();}
        -: 3764:};
        -: 3765:
        -: 3766:template <class _Tp, class _Alloc>
        -: 3767:void
        -: 3768:__shared_ptr_emplace<_Tp, _Alloc>::__on_zero_shared() _NOEXCEPT
        -: 3769:{
        -: 3770:    __data_.second().~_Tp();
        -: 3771:}
        -: 3772:
        -: 3773:template <class _Tp, class _Alloc>
        -: 3774:void
        -: 3775:__shared_ptr_emplace<_Tp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT
        -: 3776:{
        -: 3777:    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type _Al;
        -: 3778:    typedef allocator_traits<_Al> _ATraits;
        -: 3779:    typedef pointer_traits<typename _ATraits::pointer> _PTraits;
        -: 3780:    _Al __a(__data_.first());
        -: 3781:    __data_.first().~_Alloc();
        -: 3782:    __a.deallocate(_PTraits::pointer_to(*this), 1);
        -: 3783:}
        -: 3784:
        -: 3785:template<class _Tp> class _LIBCPP_TYPE_VIS_ONLY enable_shared_from_this;
        -: 3786:
        -: 3787:template<class _Tp>
        -: 3788:class _LIBCPP_TYPE_VIS_ONLY shared_ptr
        -: 3789:{
        -: 3790:public:
        -: 3791:    typedef _Tp element_type;
        -: 3792:private:
        -: 3793:    element_type*      __ptr_;
        -: 3794:    __shared_weak_count* __cntrl_;
        -: 3795:
        -: 3796:    struct __nat {int __for_bool_;};
        -: 3797:public:
        -: 3798:    _LIBCPP_CONSTEXPR shared_ptr() _NOEXCEPT;
        -: 3799:    _LIBCPP_CONSTEXPR shared_ptr(nullptr_t) _NOEXCEPT;
        -: 3800:    template<class _Yp>
        -: 3801:        explicit shared_ptr(_Yp* __p,
        -: 3802:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3803:    template<class _Yp, class _Dp>
        -: 3804:        shared_ptr(_Yp* __p, _Dp __d,
        -: 3805:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3806:    template<class _Yp, class _Dp, class _Alloc>
        -: 3807:        shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,
        -: 3808:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3809:    template <class _Dp> shared_ptr(nullptr_t __p, _Dp __d);
        -: 3810:    template <class _Dp, class _Alloc> shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a);
        -: 3811:    template<class _Yp> shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) _NOEXCEPT;
        -: 3812:    shared_ptr(const shared_ptr& __r) _NOEXCEPT;
        -: 3813:    template<class _Yp>
        -: 3814:        shared_ptr(const shared_ptr<_Yp>& __r,
        -: 3815:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type = __nat())
        -: 3816:                       _NOEXCEPT;
        -: 3817:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3818:    shared_ptr(shared_ptr&& __r) _NOEXCEPT;
        -: 3819:    template<class _Yp> shared_ptr(shared_ptr<_Yp>&& __r,
        -: 3820:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type = __nat())
        -: 3821:                       _NOEXCEPT;
        -: 3822:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3823:    template<class _Yp> explicit shared_ptr(const weak_ptr<_Yp>& __r,
        -: 3824:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type= __nat());
        -: 3825:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3826:    template<class _Yp>
        -: 3827:        shared_ptr(auto_ptr<_Yp>&& __r,
        -: 3828:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3829:#else
        -: 3830:    template<class _Yp>
        -: 3831:        shared_ptr(auto_ptr<_Yp> __r,
        -: 3832:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3833:#endif
        -: 3834:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3835:    template <class _Yp, class _Dp>
        -: 3836:        shared_ptr(unique_ptr<_Yp, _Dp>&&,
        -: 3837:                   typename enable_if
        -: 3838:                   <
        -: 3839:                       !is_lvalue_reference<_Dp>::value &&
        -: 3840:                       !is_array<_Yp>::value &&
        -: 3841:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3842:                       __nat
        -: 3843:                   >::type = __nat());
        -: 3844:    template <class _Yp, class _Dp>
        -: 3845:        shared_ptr(unique_ptr<_Yp, _Dp>&&,
        -: 3846:                   typename enable_if
        -: 3847:                   <
        -: 3848:                       is_lvalue_reference<_Dp>::value &&
        -: 3849:                       !is_array<_Yp>::value &&
        -: 3850:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3851:                       __nat
        -: 3852:                   >::type = __nat());
        -: 3853:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3854:    template <class _Yp, class _Dp>
        -: 3855:        shared_ptr(unique_ptr<_Yp, _Dp>,
        -: 3856:                   typename enable_if
        -: 3857:                   <
        -: 3858:                       !is_lvalue_reference<_Dp>::value &&
        -: 3859:                       !is_array<_Yp>::value &&
        -: 3860:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3861:                       __nat
        -: 3862:                   >::type = __nat());
        -: 3863:    template <class _Yp, class _Dp>
        -: 3864:        shared_ptr(unique_ptr<_Yp, _Dp>,
        -: 3865:                   typename enable_if
        -: 3866:                   <
        -: 3867:                       is_lvalue_reference<_Dp>::value &&
        -: 3868:                       !is_array<_Yp>::value &&
        -: 3869:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3870:                       __nat
        -: 3871:                   >::type = __nat());
        -: 3872:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3873:
        -: 3874:    ~shared_ptr();
        -: 3875:
        -: 3876:    shared_ptr& operator=(const shared_ptr& __r) _NOEXCEPT;
        -: 3877:    template<class _Yp>
        -: 3878:        typename enable_if
        -: 3879:        <
        -: 3880:            is_convertible<_Yp*, element_type*>::value,
        -: 3881:            shared_ptr&
        -: 3882:        >::type
        -: 3883:        operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT;
        -: 3884:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3885:    shared_ptr& operator=(shared_ptr&& __r) _NOEXCEPT;
        -: 3886:    template<class _Yp>
        -: 3887:        typename enable_if
        -: 3888:        <
        -: 3889:            is_convertible<_Yp*, element_type*>::value,
        -: 3890:            shared_ptr<_Tp>&
        -: 3891:        >::type
        -: 3892:        operator=(shared_ptr<_Yp>&& __r);
        -: 3893:    template<class _Yp>
        -: 3894:        typename enable_if
        -: 3895:        <
        -: 3896:            !is_array<_Yp>::value &&
        -: 3897:            is_convertible<_Yp*, element_type*>::value,
        -: 3898:            shared_ptr
        -: 3899:        >::type&
        -: 3900:        operator=(auto_ptr<_Yp>&& __r);
        -: 3901:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3902:    template<class _Yp>
        -: 3903:        typename enable_if
        -: 3904:        <
        -: 3905:            !is_array<_Yp>::value &&
        -: 3906:            is_convertible<_Yp*, element_type*>::value,
        -: 3907:            shared_ptr&
        -: 3908:        >::type
        -: 3909:        operator=(auto_ptr<_Yp> __r);
        -: 3910:#endif
        -: 3911:    template <class _Yp, class _Dp>
        -: 3912:        typename enable_if
        -: 3913:        <
        -: 3914:            !is_array<_Yp>::value &&
        -: 3915:            is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3916:            shared_ptr&
        -: 3917:        >::type
        -: 3918:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3919:        operator=(unique_ptr<_Yp, _Dp>&& __r);
        -: 3920:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3921:        operator=(unique_ptr<_Yp, _Dp> __r);
        -: 3922:#endif
        -: 3923:
        -: 3924:    void swap(shared_ptr& __r) _NOEXCEPT;
        -: 3925:    void reset() _NOEXCEPT;
        -: 3926:    template<class _Yp>
        -: 3927:        typename enable_if
        -: 3928:        <
        -: 3929:            is_convertible<_Yp*, element_type*>::value,
        -: 3930:            void
        -: 3931:        >::type
        -: 3932:        reset(_Yp* __p);
        -: 3933:    template<class _Yp, class _Dp>
        -: 3934:        typename enable_if
        -: 3935:        <
        -: 3936:            is_convertible<_Yp*, element_type*>::value,
        -: 3937:            void
        -: 3938:        >::type
        -: 3939:        reset(_Yp* __p, _Dp __d);
        -: 3940:    template<class _Yp, class _Dp, class _Alloc>
        -: 3941:        typename enable_if
        -: 3942:        <
        -: 3943:            is_convertible<_Yp*, element_type*>::value,
        -: 3944:            void
        -: 3945:        >::type
        -: 3946:        reset(_Yp* __p, _Dp __d, _Alloc __a);
        -: 3947:
        -: 3948:    _LIBCPP_INLINE_VISIBILITY
        -: 3949:    element_type* get() const _NOEXCEPT {return __ptr_;}
        -: 3950:    _LIBCPP_INLINE_VISIBILITY
        -: 3951:    typename add_lvalue_reference<element_type>::type operator*() const _NOEXCEPT
        -: 3952:        {return *__ptr_;}
        -: 3953:    _LIBCPP_INLINE_VISIBILITY
        -: 3954:    element_type* operator->() const _NOEXCEPT {return __ptr_;}
        -: 3955:    _LIBCPP_INLINE_VISIBILITY
        -: 3956:    long use_count() const _NOEXCEPT {return __cntrl_ ? __cntrl_->use_count() : 0;}
        -: 3957:    _LIBCPP_INLINE_VISIBILITY
        -: 3958:    bool unique() const _NOEXCEPT {return use_count() == 1;}
        -: 3959:    _LIBCPP_INLINE_VISIBILITY
        -: 3960:    _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {return get() != 0;}
        -: 3961:    template <class _Up>
        -: 3962:        _LIBCPP_INLINE_VISIBILITY
        -: 3963:        bool owner_before(shared_ptr<_Up> const& __p) const
        -: 3964:        {return __cntrl_ < __p.__cntrl_;}
        -: 3965:    template <class _Up>
        -: 3966:        _LIBCPP_INLINE_VISIBILITY
        -: 3967:        bool owner_before(weak_ptr<_Up> const& __p) const
        -: 3968:        {return __cntrl_ < __p.__cntrl_;}
        -: 3969:    _LIBCPP_INLINE_VISIBILITY
        -: 3970:    bool
        -: 3971:    __owner_equivalent(const shared_ptr& __p) const
        -: 3972:        {return __cntrl_ == __p.__cntrl_;}
        -: 3973:
        -: 3974:#ifndef _LIBCPP_NO_RTTI
        -: 3975:    template <class _Dp>
        -: 3976:        _LIBCPP_INLINE_VISIBILITY
        -: 3977:        _Dp* __get_deleter() const _NOEXCEPT
        -: 3978:            {return (_Dp*)(__cntrl_ ? __cntrl_->__get_deleter(typeid(_Dp)) : 0);}
        -: 3979:#endif  // _LIBCPP_NO_RTTI
        -: 3980:
        -: 3981:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 3982:
        -: 3983:    template<class ..._Args>
        -: 3984:        static
        -: 3985:        shared_ptr<_Tp>
        -: 3986:        make_shared(_Args&& ...__args);
        -: 3987:
        -: 3988:    template<class _Alloc, class ..._Args>
        -: 3989:        static
        -: 3990:        shared_ptr<_Tp>
        -: 3991:        allocate_shared(const _Alloc& __a, _Args&& ...__args);
        -: 3992:
        -: 3993:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 3994:
        -: 3995:    static shared_ptr<_Tp> make_shared();
        -: 3996:
        -: 3997:    template<class _A0>
        -: 3998:        static shared_ptr<_Tp> make_shared(_A0&);
        -: 3999:
        -: 4000:    template<class _A0, class _A1>
        -: 4001:        static shared_ptr<_Tp> make_shared(_A0&, _A1&);
        -: 4002:
        -: 4003:    template<class _A0, class _A1, class _A2>
        -: 4004:        static shared_ptr<_Tp> make_shared(_A0&, _A1&, _A2&);
        -: 4005:
        -: 4006:    template<class _Alloc>
        -: 4007:        static shared_ptr<_Tp>
        -: 4008:        allocate_shared(const _Alloc& __a);
        -: 4009:
        -: 4010:    template<class _Alloc, class _A0>
        -: 4011:        static shared_ptr<_Tp>
        -: 4012:        allocate_shared(const _Alloc& __a, _A0& __a0);
        -: 4013:
        -: 4014:    template<class _Alloc, class _A0, class _A1>
        -: 4015:        static shared_ptr<_Tp>
        -: 4016:        allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1);
        -: 4017:
        -: 4018:    template<class _Alloc, class _A0, class _A1, class _A2>
        -: 4019:        static shared_ptr<_Tp>
        -: 4020:        allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1, _A2& __a2);
        -: 4021:
        -: 4022:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 4023:
        -: 4024:private:
        -: 4025:
        -: 4026:    template <class _Yp>
        -: 4027:        _LIBCPP_INLINE_VISIBILITY
        -: 4028:        void
        -: 4029:        __enable_weak_this(const enable_shared_from_this<_Yp>* __e) _NOEXCEPT
        -: 4030:        {
        -: 4031:            if (__e)
        -: 4032:                __e->__weak_this_ = *this;
        -: 4033:        }
        -: 4034:
        -: 4035:    _LIBCPP_INLINE_VISIBILITY
        -: 4036:    void __enable_weak_this(const void*) _NOEXCEPT {}
        -: 4037:
        -: 4038:    template <class _Up> friend class _LIBCPP_TYPE_VIS_ONLY shared_ptr;
        -: 4039:    template <class _Up> friend class _LIBCPP_TYPE_VIS_ONLY weak_ptr;
        -: 4040:};
        -: 4041:
        -: 4042:template<class _Tp>
        -: 4043:inline _LIBCPP_INLINE_VISIBILITY
        -: 4044:_LIBCPP_CONSTEXPR
        -: 4045:shared_ptr<_Tp>::shared_ptr() _NOEXCEPT
        -: 4046:    : __ptr_(0),
        -: 4047:      __cntrl_(0)
        -: 4048:{
        -: 4049:}
        -: 4050:
        -: 4051:template<class _Tp>
        -: 4052:inline _LIBCPP_INLINE_VISIBILITY
        -: 4053:_LIBCPP_CONSTEXPR
        -: 4054:shared_ptr<_Tp>::shared_ptr(nullptr_t) _NOEXCEPT
        -: 4055:    : __ptr_(0),
        -: 4056:      __cntrl_(0)
        -: 4057:{
        -: 4058:}
        -: 4059:
        -: 4060:template<class _Tp>
        -: 4061:template<class _Yp>
        -: 4062:shared_ptr<_Tp>::shared_ptr(_Yp* __p,
        -: 4063:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4064:    : __ptr_(__p)
        -: 4065:{
        -: 4066:    unique_ptr<_Yp> __hold(__p);
        -: 4067:    typedef __shared_ptr_pointer<_Yp*, default_delete<_Yp>, allocator<_Yp> > _CntrlBlk;
        -: 4068:    __cntrl_ = new _CntrlBlk(__p, default_delete<_Yp>(), allocator<_Yp>());
        -: 4069:    __hold.release();
        -: 4070:    __enable_weak_this(__p);
        -: 4071:}
        -: 4072:
        -: 4073:template<class _Tp>
        -: 4074:template<class _Yp, class _Dp>
        -: 4075:shared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d,
        -: 4076:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4077:    : __ptr_(__p)
        -: 4078:{
        -: 4079:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4080:    try
        -: 4081:    {
        -: 4082:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4083:        typedef __shared_ptr_pointer<_Yp*, _Dp, allocator<_Yp> > _CntrlBlk;
        -: 4084:        __cntrl_ = new _CntrlBlk(__p, __d, allocator<_Yp>());
        -: 4085:        __enable_weak_this(__p);
        -: 4086:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4087:    }
        -: 4088:    catch (...)
        -: 4089:    {
        -: 4090:        __d(__p);
        -: 4091:        throw;
        -: 4092:    }
        -: 4093:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4094:}
        -: 4095:
        -: 4096:template<class _Tp>
        -: 4097:template<class _Dp>
        -: 4098:shared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d)
        -: 4099:    : __ptr_(0)
        -: 4100:{
        -: 4101:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4102:    try
        -: 4103:    {
        -: 4104:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4105:        typedef __shared_ptr_pointer<nullptr_t, _Dp, allocator<_Tp> > _CntrlBlk;
        -: 4106:        __cntrl_ = new _CntrlBlk(__p, __d, allocator<_Tp>());
        -: 4107:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4108:    }
        -: 4109:    catch (...)
        -: 4110:    {
        -: 4111:        __d(__p);
        -: 4112:        throw;
        -: 4113:    }
        -: 4114:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4115:}
        -: 4116:
        -: 4117:template<class _Tp>
        -: 4118:template<class _Yp, class _Dp, class _Alloc>
        -: 4119:shared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,
        -: 4120:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4121:    : __ptr_(__p)
        -: 4122:{
        -: 4123:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4124:    try
        -: 4125:    {
        -: 4126:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4127:        typedef __shared_ptr_pointer<_Yp*, _Dp, _Alloc> _CntrlBlk;
        -: 4128:        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4129:        typedef __allocator_destructor<_A2> _D2;
        -: 4130:        _A2 __a2(__a);
        -: 4131:        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4132:        ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4133:            _CntrlBlk(__p, __d, __a);
        -: 4134:        __cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4135:        __enable_weak_this(__p);
        -: 4136:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4137:    }
        -: 4138:    catch (...)
        -: 4139:    {
        -: 4140:        __d(__p);
        -: 4141:        throw;
        -: 4142:    }
        -: 4143:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4144:}
        -: 4145:
        -: 4146:template<class _Tp>
        -: 4147:template<class _Dp, class _Alloc>
        -: 4148:shared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a)
        -: 4149:    : __ptr_(0)
        -: 4150:{
        -: 4151:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4152:    try
        -: 4153:    {
        -: 4154:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4155:        typedef __shared_ptr_pointer<nullptr_t, _Dp, _Alloc> _CntrlBlk;
        -: 4156:        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4157:        typedef __allocator_destructor<_A2> _D2;
        -: 4158:        _A2 __a2(__a);
        -: 4159:        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4160:        ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4161:            _CntrlBlk(__p, __d, __a);
        -: 4162:        __cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4163:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4164:    }
        -: 4165:    catch (...)
        -: 4166:    {
        -: 4167:        __d(__p);
        -: 4168:        throw;
        -: 4169:    }
        -: 4170:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4171:}
        -: 4172:
        -: 4173:template<class _Tp>
        -: 4174:template<class _Yp>
        -: 4175:inline _LIBCPP_INLINE_VISIBILITY
        -: 4176:shared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r, element_type *__p) _NOEXCEPT
        -: 4177:    : __ptr_(__p),
        -: 4178:      __cntrl_(__r.__cntrl_)
        -: 4179:{
        -: 4180:    if (__cntrl_)
        -: 4181:        __cntrl_->__add_shared();
        -: 4182:}
        -: 4183:
        -: 4184:template<class _Tp>
        -: 4185:inline _LIBCPP_INLINE_VISIBILITY
        -: 4186:shared_ptr<_Tp>::shared_ptr(const shared_ptr& __r) _NOEXCEPT
        -: 4187:    : __ptr_(__r.__ptr_),
        -: 4188:      __cntrl_(__r.__cntrl_)
        -: 4189:{
        -: 4190:    if (__cntrl_)
        -: 4191:        __cntrl_->__add_shared();
        -: 4192:}
        -: 4193:
        -: 4194:template<class _Tp>
        -: 4195:template<class _Yp>
        -: 4196:inline _LIBCPP_INLINE_VISIBILITY
        -: 4197:shared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r,
        -: 4198:                            typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type)
        -: 4199:         _NOEXCEPT
        -: 4200:    : __ptr_(__r.__ptr_),
        -: 4201:      __cntrl_(__r.__cntrl_)
        -: 4202:{
        -: 4203:    if (__cntrl_)
        -: 4204:        __cntrl_->__add_shared();
        -: 4205:}
        -: 4206:
        -: 4207:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4208:
        -: 4209:template<class _Tp>
        -: 4210:inline _LIBCPP_INLINE_VISIBILITY
        -: 4211:shared_ptr<_Tp>::shared_ptr(shared_ptr&& __r) _NOEXCEPT
        -: 4212:    : __ptr_(__r.__ptr_),
        -: 4213:      __cntrl_(__r.__cntrl_)
        -: 4214:{
        -: 4215:    __r.__ptr_ = 0;
        -: 4216:    __r.__cntrl_ = 0;
        -: 4217:}
        -: 4218:
        -: 4219:template<class _Tp>
        -: 4220:template<class _Yp>
        -: 4221:inline _LIBCPP_INLINE_VISIBILITY
        -: 4222:shared_ptr<_Tp>::shared_ptr(shared_ptr<_Yp>&& __r,
        -: 4223:                            typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type)
        -: 4224:         _NOEXCEPT
        -: 4225:    : __ptr_(__r.__ptr_),
        -: 4226:      __cntrl_(__r.__cntrl_)
        -: 4227:{
        -: 4228:    __r.__ptr_ = 0;
        -: 4229:    __r.__cntrl_ = 0;
        -: 4230:}
        -: 4231:
        -: 4232:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4233:
        -: 4234:template<class _Tp>
        -: 4235:template<class _Yp>
        -: 4236:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4237:shared_ptr<_Tp>::shared_ptr(auto_ptr<_Yp>&& __r,
        -: 4238:#else
        -: 4239:shared_ptr<_Tp>::shared_ptr(auto_ptr<_Yp> __r,
        -: 4240:#endif
        -: 4241:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4242:    : __ptr_(__r.get())
        -: 4243:{
        -: 4244:    typedef __shared_ptr_pointer<_Yp*, default_delete<_Yp>, allocator<_Yp> > _CntrlBlk;
        -: 4245:    __cntrl_ = new _CntrlBlk(__r.get(), default_delete<_Yp>(), allocator<_Yp>());
        -: 4246:    __enable_weak_this(__r.get());
        -: 4247:    __r.release();
        -: 4248:}
        -: 4249:
        -: 4250:template<class _Tp>
        -: 4251:template <class _Yp, class _Dp>
        -: 4252:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4253:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,
        -: 4254:#else
        -: 4255:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp> __r,
        -: 4256:#endif
        -: 4257:                            typename enable_if
        -: 4258:                            <
        -: 4259:                                !is_lvalue_reference<_Dp>::value &&
        -: 4260:                                !is_array<_Yp>::value &&
        -: 4261:                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 4262:                                __nat
        -: 4263:                            >::type)
        -: 4264:    : __ptr_(__r.get())
        -: 4265:{
        -: 4266:    typedef __shared_ptr_pointer<_Yp*, _Dp, allocator<_Yp> > _CntrlBlk;
        -: 4267:    __cntrl_ = new _CntrlBlk(__r.get(), __r.get_deleter(), allocator<_Yp>());
        -: 4268:    __enable_weak_this(__r.get());
        -: 4269:    __r.release();
        -: 4270:}
        -: 4271:
        -: 4272:template<class _Tp>
        -: 4273:template <class _Yp, class _Dp>
        -: 4274:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4275:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,
        -: 4276:#else
        -: 4277:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp> __r,
        -: 4278:#endif
        -: 4279:                            typename enable_if
        -: 4280:                            <
        -: 4281:                                is_lvalue_reference<_Dp>::value &&
        -: 4282:                                !is_array<_Yp>::value &&
        -: 4283:                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 4284:                                __nat
        -: 4285:                            >::type)
        -: 4286:    : __ptr_(__r.get())
        -: 4287:{
        -: 4288:    typedef __shared_ptr_pointer<_Yp*,
        -: 4289:                                 reference_wrapper<typename remove_reference<_Dp>::type>,
        -: 4290:                                 allocator<_Yp> > _CntrlBlk;
        -: 4291:    __cntrl_ = new _CntrlBlk(__r.get(), ref(__r.get_deleter()), allocator<_Yp>());
        -: 4292:    __enable_weak_this(__r.get());
        -: 4293:    __r.release();
        -: 4294:}
        -: 4295:
        -: 4296:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 4297:
        -: 4298:template<class _Tp>
        -: 4299:template<class ..._Args>
        -: 4300:shared_ptr<_Tp>
        -: 4301:shared_ptr<_Tp>::make_shared(_Args&& ...__args)
        -: 4302:{
        -: 4303:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4304:    typedef allocator<_CntrlBlk> _A2;
        -: 4305:    typedef __allocator_destructor<_A2> _D2;
        -: 4306:    _A2 __a2;
        -: 4307:    unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4308:    ::new(__hold2.get()) _CntrlBlk(__a2, _VSTD::forward<_Args>(__args)...);
        -: 4309:    shared_ptr<_Tp> __r;
        -: 4310:    __r.__ptr_ = __hold2.get()->get();
        -: 4311:    __r.__cntrl_ = __hold2.release();
        -: 4312:    __r.__enable_weak_this(__r.__ptr_);
        -: 4313:    return __r;
        -: 4314:}
        -: 4315:
        -: 4316:template<class _Tp>
        -: 4317:template<class _Alloc, class ..._Args>
        -: 4318:shared_ptr<_Tp>
        -: 4319:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _Args&& ...__args)
        -: 4320:{
        -: 4321:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4322:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4323:    typedef __allocator_destructor<_A2> _D2;
        -: 4324:    _A2 __a2(__a);
        -: 4325:    unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4326:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4327:        _CntrlBlk(__a, _VSTD::forward<_Args>(__args)...);
        -: 4328:    shared_ptr<_Tp> __r;
        -: 4329:    __r.__ptr_ = __hold2.get()->get();
        -: 4330:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4331:    __r.__enable_weak_this(__r.__ptr_);
        -: 4332:    return __r;
        -: 4333:}
        -: 4334:
        -: 4335:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 4336:
        -: 4337:template<class _Tp>
        -: 4338:shared_ptr<_Tp>
        -: 4339:shared_ptr<_Tp>::make_shared()
        -: 4340:{
        -: 4341:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4342:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4343:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4344:    _Alloc2 __alloc2;
        -: 4345:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4346:    ::new(__hold2.get()) _CntrlBlk(__alloc2);
        -: 4347:    shared_ptr<_Tp> __r;
        -: 4348:    __r.__ptr_ = __hold2.get()->get();
        -: 4349:    __r.__cntrl_ = __hold2.release();
        -: 4350:    __r.__enable_weak_this(__r.__ptr_);
        -: 4351:    return __r;
        -: 4352:}
        -: 4353:
        -: 4354:template<class _Tp>
        -: 4355:template<class _A0>
        -: 4356:shared_ptr<_Tp>
        -: 4357:shared_ptr<_Tp>::make_shared(_A0& __a0)
        -: 4358:{
        -: 4359:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4360:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4361:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4362:    _Alloc2 __alloc2;
        -: 4363:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4364:    ::new(__hold2.get()) _CntrlBlk(__alloc2, __a0);
        -: 4365:    shared_ptr<_Tp> __r;
        -: 4366:    __r.__ptr_ = __hold2.get()->get();
        -: 4367:    __r.__cntrl_ = __hold2.release();
        -: 4368:    __r.__enable_weak_this(__r.__ptr_);
        -: 4369:    return __r;
        -: 4370:}
        -: 4371:
        -: 4372:template<class _Tp>
        -: 4373:template<class _A0, class _A1>
        -: 4374:shared_ptr<_Tp>
        -: 4375:shared_ptr<_Tp>::make_shared(_A0& __a0, _A1& __a1)
        -: 4376:{
        -: 4377:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4378:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4379:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4380:    _Alloc2 __alloc2;
        -: 4381:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4382:    ::new(__hold2.get()) _CntrlBlk(__alloc2, __a0, __a1);
        -: 4383:    shared_ptr<_Tp> __r;
        -: 4384:    __r.__ptr_ = __hold2.get()->get();
        -: 4385:    __r.__cntrl_ = __hold2.release();
        -: 4386:    __r.__enable_weak_this(__r.__ptr_);
        -: 4387:    return __r;
        -: 4388:}
        -: 4389:
        -: 4390:template<class _Tp>
        -: 4391:template<class _A0, class _A1, class _A2>
        -: 4392:shared_ptr<_Tp>
        -: 4393:shared_ptr<_Tp>::make_shared(_A0& __a0, _A1& __a1, _A2& __a2)
        -: 4394:{
        -: 4395:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4396:    typedef allocator<_CntrlBlk> _Alloc2;
        -: 4397:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4398:    _Alloc2 __alloc2;
        -: 4399:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4400:    ::new(__hold2.get()) _CntrlBlk(__alloc2, __a0, __a1, __a2);
        -: 4401:    shared_ptr<_Tp> __r;
        -: 4402:    __r.__ptr_ = __hold2.get()->get();
        -: 4403:    __r.__cntrl_ = __hold2.release();
        -: 4404:    __r.__enable_weak_this(__r.__ptr_);
        -: 4405:    return __r;
        -: 4406:}
        -: 4407:
        -: 4408:template<class _Tp>
        -: 4409:template<class _Alloc>
        -: 4410:shared_ptr<_Tp>
        -: 4411:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a)
        -: 4412:{
        -: 4413:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4414:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4415:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4416:    _Alloc2 __alloc2(__a);
        -: 4417:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4418:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4419:        _CntrlBlk(__a);
        -: 4420:    shared_ptr<_Tp> __r;
        -: 4421:    __r.__ptr_ = __hold2.get()->get();
        -: 4422:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4423:    __r.__enable_weak_this(__r.__ptr_);
        -: 4424:    return __r;
        -: 4425:}
        -: 4426:
        -: 4427:template<class _Tp>
        -: 4428:template<class _Alloc, class _A0>
        -: 4429:shared_ptr<_Tp>
        -: 4430:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _A0& __a0)
        -: 4431:{
        -: 4432:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4433:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4434:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4435:    _Alloc2 __alloc2(__a);
        -: 4436:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4437:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4438:        _CntrlBlk(__a, __a0);
        -: 4439:    shared_ptr<_Tp> __r;
        -: 4440:    __r.__ptr_ = __hold2.get()->get();
        -: 4441:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4442:    __r.__enable_weak_this(__r.__ptr_);
        -: 4443:    return __r;
        -: 4444:}
        -: 4445:
        -: 4446:template<class _Tp>
        -: 4447:template<class _Alloc, class _A0, class _A1>
        -: 4448:shared_ptr<_Tp>
        -: 4449:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1)
        -: 4450:{
        -: 4451:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4452:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4453:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4454:    _Alloc2 __alloc2(__a);
        -: 4455:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4456:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4457:        _CntrlBlk(__a, __a0, __a1);
        -: 4458:    shared_ptr<_Tp> __r;
        -: 4459:    __r.__ptr_ = __hold2.get()->get();
        -: 4460:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4461:    __r.__enable_weak_this(__r.__ptr_);
        -: 4462:    return __r;
        -: 4463:}
        -: 4464:
        -: 4465:template<class _Tp>
        -: 4466:template<class _Alloc, class _A0, class _A1, class _A2>
        -: 4467:shared_ptr<_Tp>
        -: 4468:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1, _A2& __a2)
        -: 4469:{
        -: 4470:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4471:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _Alloc2;
        -: 4472:    typedef __allocator_destructor<_Alloc2> _D2;
        -: 4473:    _Alloc2 __alloc2(__a);
        -: 4474:    unique_ptr<_CntrlBlk, _D2> __hold2(__alloc2.allocate(1), _D2(__alloc2, 1));
        -: 4475:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4476:        _CntrlBlk(__a, __a0, __a1, __a2);
        -: 4477:    shared_ptr<_Tp> __r;
        -: 4478:    __r.__ptr_ = __hold2.get()->get();
        -: 4479:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4480:    __r.__enable_weak_this(__r.__ptr_);
        -: 4481:    return __r;
        -: 4482:}
        -: 4483:
        -: 4484:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 4485:
        -: 4486:template<class _Tp>
        -: 4487:shared_ptr<_Tp>::~shared_ptr()
        -: 4488:{
        -: 4489:    if (__cntrl_)
        -: 4490:        __cntrl_->__release_shared();
        -: 4491:}
        -: 4492:
        -: 4493:template<class _Tp>
        -: 4494:inline _LIBCPP_INLINE_VISIBILITY
        -: 4495:shared_ptr<_Tp>&
        -: 4496:shared_ptr<_Tp>::operator=(const shared_ptr& __r) _NOEXCEPT
        -: 4497:{
        -: 4498:    shared_ptr(__r).swap(*this);
        -: 4499:    return *this;
        -: 4500:}
        -: 4501:
        -: 4502:template<class _Tp>
        -: 4503:template<class _Yp>
        -: 4504:inline _LIBCPP_INLINE_VISIBILITY
        -: 4505:typename enable_if
        -: 4506:<
        -: 4507:    is_convertible<_Yp*, _Tp*>::value,
        -: 4508:    shared_ptr<_Tp>&
        -: 4509:>::type
        -: 4510:shared_ptr<_Tp>::operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT
        -: 4511:{
        -: 4512:    shared_ptr(__r).swap(*this);
        -: 4513:    return *this;
        -: 4514:}
        -: 4515:
        -: 4516:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4517:
        -: 4518:template<class _Tp>
        -: 4519:inline _LIBCPP_INLINE_VISIBILITY
        -: 4520:shared_ptr<_Tp>&
        -: 4521:shared_ptr<_Tp>::operator=(shared_ptr&& __r) _NOEXCEPT
        -: 4522:{
        -: 4523:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4524:    return *this;
        -: 4525:}
        -: 4526:
        -: 4527:template<class _Tp>
        -: 4528:template<class _Yp>
        -: 4529:inline _LIBCPP_INLINE_VISIBILITY
        -: 4530:typename enable_if
        -: 4531:<
        -: 4532:    is_convertible<_Yp*, _Tp*>::value,
        -: 4533:    shared_ptr<_Tp>&
        -: 4534:>::type
        -: 4535:shared_ptr<_Tp>::operator=(shared_ptr<_Yp>&& __r)
        -: 4536:{
        -: 4537:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4538:    return *this;
        -: 4539:}
        -: 4540:
        -: 4541:template<class _Tp>
        -: 4542:template<class _Yp>
        -: 4543:inline _LIBCPP_INLINE_VISIBILITY
        -: 4544:typename enable_if
        -: 4545:<
        -: 4546:    !is_array<_Yp>::value &&
        -: 4547:    is_convertible<_Yp*, _Tp*>::value,
        -: 4548:    shared_ptr<_Tp>
        -: 4549:>::type&
        -: 4550:shared_ptr<_Tp>::operator=(auto_ptr<_Yp>&& __r)
        -: 4551:{
        -: 4552:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4553:    return *this;
        -: 4554:}
        -: 4555:
        -: 4556:template<class _Tp>
        -: 4557:template <class _Yp, class _Dp>
        -: 4558:inline _LIBCPP_INLINE_VISIBILITY
        -: 4559:typename enable_if
        -: 4560:<
        -: 4561:    !is_array<_Yp>::value &&
        -: 4562:    is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, _Tp*>::value,
        -: 4563:    shared_ptr<_Tp>&
        -: 4564:>::type
        -: 4565:shared_ptr<_Tp>::operator=(unique_ptr<_Yp, _Dp>&& __r)
        -: 4566:{
        -: 4567:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4568:    return *this;
        -: 4569:}
        -: 4570:
        -: 4571:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4572:
        -: 4573:template<class _Tp>
        -: 4574:template<class _Yp>
        -: 4575:inline _LIBCPP_INLINE_VISIBILITY
        -: 4576:typename enable_if
        -: 4577:<
        -: 4578:    !is_array<_Yp>::value &&
        -: 4579:    is_convertible<_Yp*, _Tp*>::value,
        -: 4580:    shared_ptr<_Tp>&
        -: 4581:>::type
        -: 4582:shared_ptr<_Tp>::operator=(auto_ptr<_Yp> __r)
        -: 4583:{
        -: 4584:    shared_ptr(__r).swap(*this);
        -: 4585:    return *this;
        -: 4586:}
        -: 4587:
        -: 4588:template<class _Tp>
        -: 4589:template <class _Yp, class _Dp>
        -: 4590:inline _LIBCPP_INLINE_VISIBILITY
        -: 4591:typename enable_if
        -: 4592:<
        -: 4593:    !is_array<_Yp>::value &&
        -: 4594:    is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, _Tp*>::value,
        -: 4595:    shared_ptr<_Tp>&
        -: 4596:>::type
        -: 4597:shared_ptr<_Tp>::operator=(unique_ptr<_Yp, _Dp> __r)
        -: 4598:{
        -: 4599:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4600:    return *this;
        -: 4601:}
        -: 4602:
        -: 4603:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4604:
        -: 4605:template<class _Tp>
        -: 4606:inline _LIBCPP_INLINE_VISIBILITY
        -: 4607:void
        -: 4608:shared_ptr<_Tp>::swap(shared_ptr& __r) _NOEXCEPT
        -: 4609:{
        -: 4610:    _VSTD::swap(__ptr_, __r.__ptr_);
        -: 4611:    _VSTD::swap(__cntrl_, __r.__cntrl_);
        -: 4612:}
        -: 4613:
        -: 4614:template<class _Tp>
        -: 4615:inline _LIBCPP_INLINE_VISIBILITY
        -: 4616:void
        -: 4617:shared_ptr<_Tp>::reset() _NOEXCEPT
        -: 4618:{
        -: 4619:    shared_ptr().swap(*this);
        -: 4620:}
        -: 4621:
        -: 4622:template<class _Tp>
        -: 4623:template<class _Yp>
        -: 4624:inline _LIBCPP_INLINE_VISIBILITY
        -: 4625:typename enable_if
        -: 4626:<
        -: 4627:    is_convertible<_Yp*, _Tp*>::value,
        -: 4628:    void
        -: 4629:>::type
        -: 4630:shared_ptr<_Tp>::reset(_Yp* __p)
        -: 4631:{
        -: 4632:    shared_ptr(__p).swap(*this);
        -: 4633:}
        -: 4634:
        -: 4635:template<class _Tp>
        -: 4636:template<class _Yp, class _Dp>
        -: 4637:inline _LIBCPP_INLINE_VISIBILITY
        -: 4638:typename enable_if
        -: 4639:<
        -: 4640:    is_convertible<_Yp*, _Tp*>::value,
        -: 4641:    void
        -: 4642:>::type
        -: 4643:shared_ptr<_Tp>::reset(_Yp* __p, _Dp __d)
        -: 4644:{
        -: 4645:    shared_ptr(__p, __d).swap(*this);
        -: 4646:}
        -: 4647:
        -: 4648:template<class _Tp>
        -: 4649:template<class _Yp, class _Dp, class _Alloc>
        -: 4650:inline _LIBCPP_INLINE_VISIBILITY
        -: 4651:typename enable_if
        -: 4652:<
        -: 4653:    is_convertible<_Yp*, _Tp*>::value,
        -: 4654:    void
        -: 4655:>::type
        -: 4656:shared_ptr<_Tp>::reset(_Yp* __p, _Dp __d, _Alloc __a)
        -: 4657:{
        -: 4658:    shared_ptr(__p, __d, __a).swap(*this);
        -: 4659:}
        -: 4660:
        -: 4661:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 4662:
        -: 4663:template<class _Tp, class ..._Args>
        -: 4664:inline _LIBCPP_INLINE_VISIBILITY
        -: 4665:typename enable_if
        -: 4666:<
        -: 4667:    !is_array<_Tp>::value,
        -: 4668:    shared_ptr<_Tp>
        -: 4669:>::type
        -: 4670:make_shared(_Args&& ...__args)
        -: 4671:{
        -: 4672:    return shared_ptr<_Tp>::make_shared(_VSTD::forward<_Args>(__args)...);
        -: 4673:}
        -: 4674:
        -: 4675:template<class _Tp, class _Alloc, class ..._Args>
        -: 4676:inline _LIBCPP_INLINE_VISIBILITY
        -: 4677:typename enable_if
        -: 4678:<
        -: 4679:    !is_array<_Tp>::value,
        -: 4680:    shared_ptr<_Tp>
        -: 4681:>::type
        -: 4682:allocate_shared(const _Alloc& __a, _Args&& ...__args)
        -: 4683:{
        -: 4684:    return shared_ptr<_Tp>::allocate_shared(__a, _VSTD::forward<_Args>(__args)...);
        -: 4685:}
        -: 4686:
        -: 4687:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 4688:
        -: 4689:template<class _Tp>
        -: 4690:inline _LIBCPP_INLINE_VISIBILITY
        -: 4691:shared_ptr<_Tp>
        -: 4692:make_shared()
        -: 4693:{
        -: 4694:    return shared_ptr<_Tp>::make_shared();
        -: 4695:}
        -: 4696:
        -: 4697:template<class _Tp, class _A0>
        -: 4698:inline _LIBCPP_INLINE_VISIBILITY
        -: 4699:shared_ptr<_Tp>
        -: 4700:make_shared(_A0& __a0)
        -: 4701:{
        -: 4702:    return shared_ptr<_Tp>::make_shared(__a0);
        -: 4703:}
        -: 4704:
        -: 4705:template<class _Tp, class _A0, class _A1>
        -: 4706:inline _LIBCPP_INLINE_VISIBILITY
        -: 4707:shared_ptr<_Tp>
        -: 4708:make_shared(_A0& __a0, _A1& __a1)
        -: 4709:{
        -: 4710:    return shared_ptr<_Tp>::make_shared(__a0, __a1);
        -: 4711:}
        -: 4712:
        -: 4713:template<class _Tp, class _A0, class _A1, class _A2>
        -: 4714:inline _LIBCPP_INLINE_VISIBILITY
        -: 4715:shared_ptr<_Tp>
        -: 4716:make_shared(_A0& __a0, _A1& __a1, _A2& __a2)
        -: 4717:{
        -: 4718:    return shared_ptr<_Tp>::make_shared(__a0, __a1, __a2);
        -: 4719:}
        -: 4720:
        -: 4721:template<class _Tp, class _Alloc>
        -: 4722:inline _LIBCPP_INLINE_VISIBILITY
        -: 4723:shared_ptr<_Tp>
        -: 4724:allocate_shared(const _Alloc& __a)
        -: 4725:{
        -: 4726:    return shared_ptr<_Tp>::allocate_shared(__a);
        -: 4727:}
        -: 4728:
        -: 4729:template<class _Tp, class _Alloc, class _A0>
        -: 4730:inline _LIBCPP_INLINE_VISIBILITY
        -: 4731:shared_ptr<_Tp>
        -: 4732:allocate_shared(const _Alloc& __a, _A0& __a0)
        -: 4733:{
        -: 4734:    return shared_ptr<_Tp>::allocate_shared(__a, __a0);
        -: 4735:}
        -: 4736:
        -: 4737:template<class _Tp, class _Alloc, class _A0, class _A1>
        -: 4738:inline _LIBCPP_INLINE_VISIBILITY
        -: 4739:shared_ptr<_Tp>
        -: 4740:allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1)
        -: 4741:{
        -: 4742:    return shared_ptr<_Tp>::allocate_shared(__a, __a0, __a1);
        -: 4743:}
        -: 4744:
        -: 4745:template<class _Tp, class _Alloc, class _A0, class _A1, class _A2>
        -: 4746:inline _LIBCPP_INLINE_VISIBILITY
        -: 4747:shared_ptr<_Tp>
        -: 4748:allocate_shared(const _Alloc& __a, _A0& __a0, _A1& __a1, _A2& __a2)
        -: 4749:{
        -: 4750:    return shared_ptr<_Tp>::allocate_shared(__a, __a0, __a1, __a2);
        -: 4751:}
        -: 4752:
        -: 4753:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 4754:
        -: 4755:template<class _Tp, class _Up>
        -: 4756:inline _LIBCPP_INLINE_VISIBILITY
        -: 4757:bool
        -: 4758:operator==(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4759:{
        -: 4760:    return __x.get() == __y.get();
        -: 4761:}
        -: 4762:
        -: 4763:template<class _Tp, class _Up>
        -: 4764:inline _LIBCPP_INLINE_VISIBILITY
        -: 4765:bool
        -: 4766:operator!=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4767:{
        -: 4768:    return !(__x == __y);
        -: 4769:}
        -: 4770:
        -: 4771:template<class _Tp, class _Up>
        -: 4772:inline _LIBCPP_INLINE_VISIBILITY
        -: 4773:bool
        -: 4774:operator<(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4775:{
        -: 4776:    typedef typename common_type<_Tp*, _Up*>::type _Vp;
        -: 4777:    return less<_Vp>()(__x.get(), __y.get());
        -: 4778:}
        -: 4779:
        -: 4780:template<class _Tp, class _Up>
        -: 4781:inline _LIBCPP_INLINE_VISIBILITY
        -: 4782:bool
        -: 4783:operator>(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4784:{
        -: 4785:    return __y < __x;
        -: 4786:}
        -: 4787:
        -: 4788:template<class _Tp, class _Up>
        -: 4789:inline _LIBCPP_INLINE_VISIBILITY
        -: 4790:bool
        -: 4791:operator<=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4792:{
        -: 4793:    return !(__y < __x);
        -: 4794:}
        -: 4795:
        -: 4796:template<class _Tp, class _Up>
        -: 4797:inline _LIBCPP_INLINE_VISIBILITY
        -: 4798:bool
        -: 4799:operator>=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4800:{
        -: 4801:    return !(__x < __y);
        -: 4802:}
        -: 4803:
        -: 4804:template<class _Tp>
        -: 4805:inline _LIBCPP_INLINE_VISIBILITY
        -: 4806:bool
        -: 4807:operator==(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4808:{
        -: 4809:    return !__x;
        -: 4810:}
        -: 4811:
        -: 4812:template<class _Tp>
        -: 4813:inline _LIBCPP_INLINE_VISIBILITY
        -: 4814:bool
        -: 4815:operator==(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4816:{
        -: 4817:    return !__x;
        -: 4818:}
        -: 4819:
        -: 4820:template<class _Tp>
        -: 4821:inline _LIBCPP_INLINE_VISIBILITY
        -: 4822:bool
        -: 4823:operator!=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4824:{
        -: 4825:    return static_cast<bool>(__x);
        -: 4826:}
        -: 4827:
        -: 4828:template<class _Tp>
        -: 4829:inline _LIBCPP_INLINE_VISIBILITY
        -: 4830:bool
        -: 4831:operator!=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4832:{
        -: 4833:    return static_cast<bool>(__x);
        -: 4834:}
        -: 4835:
        -: 4836:template<class _Tp>
        -: 4837:inline _LIBCPP_INLINE_VISIBILITY
        -: 4838:bool
        -: 4839:operator<(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4840:{
        -: 4841:    return less<_Tp*>()(__x.get(), nullptr);
        -: 4842:}
        -: 4843:
        -: 4844:template<class _Tp>
        -: 4845:inline _LIBCPP_INLINE_VISIBILITY
        -: 4846:bool
        -: 4847:operator<(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4848:{
        -: 4849:    return less<_Tp*>()(nullptr, __x.get());
        -: 4850:}
        -: 4851:
        -: 4852:template<class _Tp>
        -: 4853:inline _LIBCPP_INLINE_VISIBILITY
        -: 4854:bool
        -: 4855:operator>(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4856:{
        -: 4857:    return nullptr < __x;
        -: 4858:}
        -: 4859:
        -: 4860:template<class _Tp>
        -: 4861:inline _LIBCPP_INLINE_VISIBILITY
        -: 4862:bool
        -: 4863:operator>(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4864:{
        -: 4865:    return __x < nullptr;
        -: 4866:}
        -: 4867:
        -: 4868:template<class _Tp>
        -: 4869:inline _LIBCPP_INLINE_VISIBILITY
        -: 4870:bool
        -: 4871:operator<=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4872:{
        -: 4873:    return !(nullptr < __x);
        -: 4874:}
        -: 4875:
        -: 4876:template<class _Tp>
        -: 4877:inline _LIBCPP_INLINE_VISIBILITY
        -: 4878:bool
        -: 4879:operator<=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4880:{
        -: 4881:    return !(__x < nullptr);
        -: 4882:}
        -: 4883:
        -: 4884:template<class _Tp>
        -: 4885:inline _LIBCPP_INLINE_VISIBILITY
        -: 4886:bool
        -: 4887:operator>=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4888:{
        -: 4889:    return !(__x < nullptr);
        -: 4890:}
        -: 4891:
        -: 4892:template<class _Tp>
        -: 4893:inline _LIBCPP_INLINE_VISIBILITY
        -: 4894:bool
        -: 4895:operator>=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4896:{
        -: 4897:    return !(nullptr < __x);
        -: 4898:}
        -: 4899:
        -: 4900:template<class _Tp>
        -: 4901:inline _LIBCPP_INLINE_VISIBILITY
        -: 4902:void
        -: 4903:swap(shared_ptr<_Tp>& __x, shared_ptr<_Tp>& __y) _NOEXCEPT
        -: 4904:{
        -: 4905:    __x.swap(__y);
        -: 4906:}
        -: 4907:
        -: 4908:template<class _Tp, class _Up>
        -: 4909:inline _LIBCPP_INLINE_VISIBILITY
        -: 4910:typename enable_if
        -: 4911:<
        -: 4912:    !is_array<_Tp>::value && !is_array<_Up>::value,
        -: 4913:    shared_ptr<_Tp>
        -: 4914:>::type
        -: 4915:static_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 4916:{
        -: 4917:    return shared_ptr<_Tp>(__r, static_cast<_Tp*>(__r.get()));
        -: 4918:}
        -: 4919:
        -: 4920:template<class _Tp, class _Up>
        -: 4921:inline _LIBCPP_INLINE_VISIBILITY
        -: 4922:typename enable_if
        -: 4923:<
        -: 4924:    !is_array<_Tp>::value && !is_array<_Up>::value,
        -: 4925:    shared_ptr<_Tp>
        -: 4926:>::type
        -: 4927:dynamic_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 4928:{
        -: 4929:    _Tp* __p = dynamic_cast<_Tp*>(__r.get());
        -: 4930:    return __p ? shared_ptr<_Tp>(__r, __p) : shared_ptr<_Tp>();
        -: 4931:}
        -: 4932:
        -: 4933:template<class _Tp, class _Up>
        -: 4934:typename enable_if
        -: 4935:<
        -: 4936:    is_array<_Tp>::value == is_array<_Up>::value,
        -: 4937:    shared_ptr<_Tp>
        -: 4938:>::type
        -: 4939:const_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 4940:{
        -: 4941:    typedef typename remove_extent<_Tp>::type _RTp;
        -: 4942:    return shared_ptr<_Tp>(__r, const_cast<_RTp*>(__r.get()));
        -: 4943:}
        -: 4944:
        -: 4945:#ifndef _LIBCPP_NO_RTTI
        -: 4946:
        -: 4947:template<class _Dp, class _Tp>
        -: 4948:inline _LIBCPP_INLINE_VISIBILITY
        -: 4949:_Dp*
        -: 4950:get_deleter(const shared_ptr<_Tp>& __p) _NOEXCEPT
        -: 4951:{
        -: 4952:    return __p.template __get_deleter<_Dp>();
        -: 4953:}
        -: 4954:
        -: 4955:#endif  // _LIBCPP_NO_RTTI
        -: 4956:
        -: 4957:template<class _Tp>
        -: 4958:class _LIBCPP_TYPE_VIS_ONLY weak_ptr
        -: 4959:{
        -: 4960:public:
        -: 4961:    typedef _Tp element_type;
        -: 4962:private:
        -: 4963:    element_type*        __ptr_;
        -: 4964:    __shared_weak_count* __cntrl_;
        -: 4965:
        -: 4966:public:
        -: 4967:    _LIBCPP_CONSTEXPR weak_ptr() _NOEXCEPT;
        -: 4968:    template<class _Yp> weak_ptr(shared_ptr<_Yp> const& __r,
        -: 4969:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 4970:                        _NOEXCEPT;
        -: 4971:    weak_ptr(weak_ptr const& __r) _NOEXCEPT;
        -: 4972:    template<class _Yp> weak_ptr(weak_ptr<_Yp> const& __r,
        -: 4973:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 4974:                         _NOEXCEPT;
        -: 4975:
        -: 4976:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4977:    weak_ptr(weak_ptr&& __r) _NOEXCEPT;
        -: 4978:    template<class _Yp> weak_ptr(weak_ptr<_Yp>&& __r,
        -: 4979:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 4980:                         _NOEXCEPT;
        -: 4981:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4982:    ~weak_ptr();
        -: 4983:
        -: 4984:    weak_ptr& operator=(weak_ptr const& __r) _NOEXCEPT;
        -: 4985:    template<class _Yp>
        -: 4986:        typename enable_if
        -: 4987:        <
        -: 4988:            is_convertible<_Yp*, element_type*>::value,
        -: 4989:            weak_ptr&
        -: 4990:        >::type
        -: 4991:        operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 4992:
        -: 4993:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4994:
        -: 4995:    weak_ptr& operator=(weak_ptr&& __r) _NOEXCEPT;
        -: 4996:    template<class _Yp>
        -: 4997:        typename enable_if
        -: 4998:        <
        -: 4999:            is_convertible<_Yp*, element_type*>::value,
        -: 5000:            weak_ptr&
        -: 5001:        >::type
        -: 5002:        operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT;
        -: 5003:
        -: 5004:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5005:
        -: 5006:    template<class _Yp>
        -: 5007:        typename enable_if
        -: 5008:        <
        -: 5009:            is_convertible<_Yp*, element_type*>::value,
        -: 5010:            weak_ptr&
        -: 5011:        >::type
        -: 5012:        operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 5013:
        -: 5014:    void swap(weak_ptr& __r) _NOEXCEPT;
        -: 5015:    void reset() _NOEXCEPT;
        -: 5016:
        -: 5017:    _LIBCPP_INLINE_VISIBILITY
        -: 5018:    long use_count() const _NOEXCEPT
        -: 5019:        {return __cntrl_ ? __cntrl_->use_count() : 0;}
        -: 5020:    _LIBCPP_INLINE_VISIBILITY
        -: 5021:    bool expired() const _NOEXCEPT
        -: 5022:        {return __cntrl_ == 0 || __cntrl_->use_count() == 0;}
        -: 5023:    shared_ptr<_Tp> lock() const _NOEXCEPT;
        -: 5024:    template<class _Up>
        -: 5025:        _LIBCPP_INLINE_VISIBILITY
        -: 5026:        bool owner_before(const shared_ptr<_Up>& __r) const
        -: 5027:        {return __cntrl_ < __r.__cntrl_;}
        -: 5028:    template<class _Up>
        -: 5029:        _LIBCPP_INLINE_VISIBILITY
        -: 5030:        bool owner_before(const weak_ptr<_Up>& __r) const
        -: 5031:        {return __cntrl_ < __r.__cntrl_;}
        -: 5032:
        -: 5033:    template <class _Up> friend class _LIBCPP_TYPE_VIS_ONLY weak_ptr;
        -: 5034:    template <class _Up> friend class _LIBCPP_TYPE_VIS_ONLY shared_ptr;
        -: 5035:};
        -: 5036:
        -: 5037:template<class _Tp>
        -: 5038:inline _LIBCPP_INLINE_VISIBILITY
        -: 5039:_LIBCPP_CONSTEXPR
        -: 5040:weak_ptr<_Tp>::weak_ptr() _NOEXCEPT
        -: 5041:    : __ptr_(0),
        -: 5042:      __cntrl_(0)
        -: 5043:{
        -: 5044:}
        -: 5045:
        -: 5046:template<class _Tp>
        -: 5047:inline _LIBCPP_INLINE_VISIBILITY
        -: 5048:weak_ptr<_Tp>::weak_ptr(weak_ptr const& __r) _NOEXCEPT
        -: 5049:    : __ptr_(__r.__ptr_),
        -: 5050:      __cntrl_(__r.__cntrl_)
        -: 5051:{
        -: 5052:    if (__cntrl_)
        -: 5053:        __cntrl_->__add_weak();
        -: 5054:}
        -: 5055:
        -: 5056:template<class _Tp>
        -: 5057:template<class _Yp>
        -: 5058:inline _LIBCPP_INLINE_VISIBILITY
        -: 5059:weak_ptr<_Tp>::weak_ptr(shared_ptr<_Yp> const& __r,
        -: 5060:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 5061:                         _NOEXCEPT
        -: 5062:    : __ptr_(__r.__ptr_),
        -: 5063:      __cntrl_(__r.__cntrl_)
        -: 5064:{
        -: 5065:    if (__cntrl_)
        -: 5066:        __cntrl_->__add_weak();
        -: 5067:}
        -: 5068:
        -: 5069:template<class _Tp>
        -: 5070:template<class _Yp>
        -: 5071:inline _LIBCPP_INLINE_VISIBILITY
        -: 5072:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp> const& __r,
        -: 5073:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 5074:         _NOEXCEPT
        -: 5075:    : __ptr_(__r.__ptr_),
        -: 5076:      __cntrl_(__r.__cntrl_)
        -: 5077:{
        -: 5078:    if (__cntrl_)
        -: 5079:        __cntrl_->__add_weak();
        -: 5080:}
        -: 5081:
        -: 5082:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5083:
        -: 5084:template<class _Tp>
        -: 5085:inline _LIBCPP_INLINE_VISIBILITY
        -: 5086:weak_ptr<_Tp>::weak_ptr(weak_ptr&& __r) _NOEXCEPT
        -: 5087:    : __ptr_(__r.__ptr_),
        -: 5088:      __cntrl_(__r.__cntrl_)
        -: 5089:{
        -: 5090:    __r.__ptr_ = 0;
        -: 5091:    __r.__cntrl_ = 0;
        -: 5092:}
        -: 5093:
        -: 5094:template<class _Tp>
        -: 5095:template<class _Yp>
        -: 5096:inline _LIBCPP_INLINE_VISIBILITY
        -: 5097:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp>&& __r,
        -: 5098:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 5099:         _NOEXCEPT
        -: 5100:    : __ptr_(__r.__ptr_),
        -: 5101:      __cntrl_(__r.__cntrl_)
        -: 5102:{
        -: 5103:    __r.__ptr_ = 0;
        -: 5104:    __r.__cntrl_ = 0;
        -: 5105:}
        -: 5106:
        -: 5107:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5108:
        -: 5109:template<class _Tp>
        -: 5110:weak_ptr<_Tp>::~weak_ptr()
        -: 5111:{
        -: 5112:    if (__cntrl_)
        -: 5113:        __cntrl_->__release_weak();
        -: 5114:}
        -: 5115:
        -: 5116:template<class _Tp>
        -: 5117:inline _LIBCPP_INLINE_VISIBILITY
        -: 5118:weak_ptr<_Tp>&
        -: 5119:weak_ptr<_Tp>::operator=(weak_ptr const& __r) _NOEXCEPT
        -: 5120:{
        -: 5121:    weak_ptr(__r).swap(*this);
        -: 5122:    return *this;
        -: 5123:}
        -: 5124:
        -: 5125:template<class _Tp>
        -: 5126:template<class _Yp>
        -: 5127:inline _LIBCPP_INLINE_VISIBILITY
        -: 5128:typename enable_if
        -: 5129:<
        -: 5130:    is_convertible<_Yp*, _Tp*>::value,
        -: 5131:    weak_ptr<_Tp>&
        -: 5132:>::type
        -: 5133:weak_ptr<_Tp>::operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT
        -: 5134:{
        -: 5135:    weak_ptr(__r).swap(*this);
        -: 5136:    return *this;
        -: 5137:}
        -: 5138:
        -: 5139:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5140:
        -: 5141:template<class _Tp>
        -: 5142:inline _LIBCPP_INLINE_VISIBILITY
        -: 5143:weak_ptr<_Tp>&
        -: 5144:weak_ptr<_Tp>::operator=(weak_ptr&& __r) _NOEXCEPT
        -: 5145:{
        -: 5146:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 5147:    return *this;
        -: 5148:}
        -: 5149:
        -: 5150:template<class _Tp>
        -: 5151:template<class _Yp>
        -: 5152:inline _LIBCPP_INLINE_VISIBILITY
        -: 5153:typename enable_if
        -: 5154:<
        -: 5155:    is_convertible<_Yp*, _Tp*>::value,
        -: 5156:    weak_ptr<_Tp>&
        -: 5157:>::type
        -: 5158:weak_ptr<_Tp>::operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT
        -: 5159:{
        -: 5160:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 5161:    return *this;
        -: 5162:}
        -: 5163:
        -: 5164:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 5165:
        -: 5166:template<class _Tp>
        -: 5167:template<class _Yp>
        -: 5168:inline _LIBCPP_INLINE_VISIBILITY
        -: 5169:typename enable_if
        -: 5170:<
        -: 5171:    is_convertible<_Yp*, _Tp*>::value,
        -: 5172:    weak_ptr<_Tp>&
        -: 5173:>::type
        -: 5174:weak_ptr<_Tp>::operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT
        -: 5175:{
        -: 5176:    weak_ptr(__r).swap(*this);
        -: 5177:    return *this;
        -: 5178:}
        -: 5179:
        -: 5180:template<class _Tp>
        -: 5181:inline _LIBCPP_INLINE_VISIBILITY
        -: 5182:void
        -: 5183:weak_ptr<_Tp>::swap(weak_ptr& __r) _NOEXCEPT
        -: 5184:{
        -: 5185:    _VSTD::swap(__ptr_, __r.__ptr_);
        -: 5186:    _VSTD::swap(__cntrl_, __r.__cntrl_);
        -: 5187:}
        -: 5188:
        -: 5189:template<class _Tp>
        -: 5190:inline _LIBCPP_INLINE_VISIBILITY
        -: 5191:void
        -: 5192:swap(weak_ptr<_Tp>& __x, weak_ptr<_Tp>& __y) _NOEXCEPT
        -: 5193:{
        -: 5194:    __x.swap(__y);
        -: 5195:}
        -: 5196:
        -: 5197:template<class _Tp>
        -: 5198:inline _LIBCPP_INLINE_VISIBILITY
        -: 5199:void
        -: 5200:weak_ptr<_Tp>::reset() _NOEXCEPT
        -: 5201:{
        -: 5202:    weak_ptr().swap(*this);
        -: 5203:}
        -: 5204:
        -: 5205:template<class _Tp>
        -: 5206:template<class _Yp>
        -: 5207:shared_ptr<_Tp>::shared_ptr(const weak_ptr<_Yp>& __r,
        -: 5208:                            typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat>::type)
        -: 5209:    : __ptr_(__r.__ptr_),
        -: 5210:      __cntrl_(__r.__cntrl_ ? __r.__cntrl_->lock() : __r.__cntrl_)
        -: 5211:{
        -: 5212:    if (__cntrl_ == 0)
        -: 5213:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 5214:        throw bad_weak_ptr();
        -: 5215:#else
        -: 5216:        assert(!"bad_weak_ptr");
        -: 5217:#endif
        -: 5218:}
        -: 5219:
        -: 5220:template<class _Tp>
        -: 5221:shared_ptr<_Tp>
        -: 5222:weak_ptr<_Tp>::lock() const _NOEXCEPT
        -: 5223:{
        -: 5224:    shared_ptr<_Tp> __r;
        -: 5225:    __r.__cntrl_ = __cntrl_ ? __cntrl_->lock() : __cntrl_;
        -: 5226:    if (__r.__cntrl_)
        -: 5227:        __r.__ptr_ = __ptr_;
        -: 5228:    return __r;
        -: 5229:}
        -: 5230:
        -: 5231:template <class _Tp> struct owner_less;
        -: 5232:
        -: 5233:template <class _Tp>
        -: 5234:struct _LIBCPP_TYPE_VIS_ONLY owner_less<shared_ptr<_Tp> >
        -: 5235:    : binary_function<shared_ptr<_Tp>, shared_ptr<_Tp>, bool>
        -: 5236:{
        -: 5237:    typedef bool result_type;
        -: 5238:    _LIBCPP_INLINE_VISIBILITY
        -: 5239:    bool operator()(shared_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const
        -: 5240:        {return __x.owner_before(__y);}
        -: 5241:    _LIBCPP_INLINE_VISIBILITY
        -: 5242:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const
        -: 5243:        {return __x.owner_before(__y);}
        -: 5244:    _LIBCPP_INLINE_VISIBILITY
        -: 5245:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const
        -: 5246:        {return __x.owner_before(__y);}
        -: 5247:};
        -: 5248:
        -: 5249:template <class _Tp>
        -: 5250:struct _LIBCPP_TYPE_VIS_ONLY owner_less<weak_ptr<_Tp> >
        -: 5251:    : binary_function<weak_ptr<_Tp>, weak_ptr<_Tp>, bool>
        -: 5252:{
        -: 5253:    typedef bool result_type;
        -: 5254:    _LIBCPP_INLINE_VISIBILITY
        -: 5255:    bool operator()(  weak_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const
        -: 5256:        {return __x.owner_before(__y);}
        -: 5257:    _LIBCPP_INLINE_VISIBILITY
        -: 5258:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const
        -: 5259:        {return __x.owner_before(__y);}
        -: 5260:    _LIBCPP_INLINE_VISIBILITY
        -: 5261:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const
        -: 5262:        {return __x.owner_before(__y);}
        -: 5263:};
        -: 5264:
        -: 5265:template<class _Tp>
        -: 5266:class _LIBCPP_TYPE_VIS_ONLY enable_shared_from_this
        -: 5267:{
        -: 5268:    mutable weak_ptr<_Tp> __weak_this_;
        -: 5269:protected:
        -: 5270:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 5271:    enable_shared_from_this() _NOEXCEPT {}
        -: 5272:    _LIBCPP_INLINE_VISIBILITY
        -: 5273:    enable_shared_from_this(enable_shared_from_this const&) _NOEXCEPT {}
        -: 5274:    _LIBCPP_INLINE_VISIBILITY
        -: 5275:    enable_shared_from_this& operator=(enable_shared_from_this const&) _NOEXCEPT
        -: 5276:        {return *this;}
        -: 5277:    _LIBCPP_INLINE_VISIBILITY
        -: 5278:    ~enable_shared_from_this() {}
        -: 5279:public:
        -: 5280:    _LIBCPP_INLINE_VISIBILITY
        -: 5281:    shared_ptr<_Tp> shared_from_this()
        -: 5282:        {return shared_ptr<_Tp>(__weak_this_);}
        -: 5283:    _LIBCPP_INLINE_VISIBILITY
        -: 5284:    shared_ptr<_Tp const> shared_from_this() const
        -: 5285:        {return shared_ptr<const _Tp>(__weak_this_);}
        -: 5286:
        -: 5287:    template <class _Up> friend class shared_ptr;
        -: 5288:};
        -: 5289:
        -: 5290:template <class _Tp>
        -: 5291:struct _LIBCPP_TYPE_VIS_ONLY hash<shared_ptr<_Tp> >
        -: 5292:{
        -: 5293:    typedef shared_ptr<_Tp>      argument_type;
        -: 5294:    typedef size_t               result_type;
        -: 5295:    _LIBCPP_INLINE_VISIBILITY
        -: 5296:    result_type operator()(const argument_type& __ptr) const _NOEXCEPT
        -: 5297:    {
        -: 5298:        return hash<_Tp*>()(__ptr.get());
        -: 5299:    }
        -: 5300:};
        -: 5301:
        -: 5302:template<class _CharT, class _Traits, class _Yp>
        -: 5303:inline _LIBCPP_INLINE_VISIBILITY
        -: 5304:basic_ostream<_CharT, _Traits>&
        -: 5305:operator<<(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p);
        -: 5306:
        -: 5307:#if __has_feature(cxx_atomic) && !defined(_LIBCPP_HAS_NO_THREADS)
        -: 5308:
        -: 5309:class _LIBCPP_TYPE_VIS __sp_mut
        -: 5310:{
        -: 5311:    void* __lx;
        -: 5312:public:
        -: 5313:    void lock() _NOEXCEPT;
        -: 5314:    void unlock() _NOEXCEPT;
        -: 5315:
        -: 5316:private:
        -: 5317:    _LIBCPP_CONSTEXPR __sp_mut(void*) _NOEXCEPT;
        -: 5318:    __sp_mut(const __sp_mut&);
        -: 5319:    __sp_mut& operator=(const __sp_mut&);
        -: 5320:
        -: 5321:    friend _LIBCPP_FUNC_VIS __sp_mut& __get_sp_mut(const void*);
        -: 5322:};
        -: 5323:
        -: 5324:_LIBCPP_FUNC_VIS __sp_mut& __get_sp_mut(const void*);
        -: 5325:
        -: 5326:template <class _Tp>
        -: 5327:inline _LIBCPP_INLINE_VISIBILITY
        -: 5328:bool
        -: 5329:atomic_is_lock_free(const shared_ptr<_Tp>*)
        -: 5330:{
        -: 5331:    return false;
        -: 5332:}
        -: 5333:
        -: 5334:template <class _Tp>
        -: 5335:shared_ptr<_Tp>
        -: 5336:atomic_load(const shared_ptr<_Tp>* __p)
        -: 5337:{
        -: 5338:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5339:    __m.lock();
        -: 5340:    shared_ptr<_Tp> __q = *__p;
        -: 5341:    __m.unlock();
        -: 5342:    return __q;
        -: 5343:}
        -: 5344:  
        -: 5345:template <class _Tp>
        -: 5346:inline _LIBCPP_INLINE_VISIBILITY
        -: 5347:shared_ptr<_Tp>
        -: 5348:atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)
        -: 5349:{
        -: 5350:    return atomic_load(__p);
        -: 5351:}
        -: 5352:
        -: 5353:template <class _Tp>
        -: 5354:void
        -: 5355:atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 5356:{
        -: 5357:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5358:    __m.lock();
        -: 5359:    __p->swap(__r);
        -: 5360:    __m.unlock();
        -: 5361:}
        -: 5362:
        -: 5363:template <class _Tp>
        -: 5364:inline _LIBCPP_INLINE_VISIBILITY
        -: 5365:void
        -: 5366:atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 5367:{
        -: 5368:    atomic_store(__p, __r);
        -: 5369:}
        -: 5370:
        -: 5371:template <class _Tp>
        -: 5372:shared_ptr<_Tp>
        -: 5373:atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 5374:{
        -: 5375:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5376:    __m.lock();
        -: 5377:    __p->swap(__r);
        -: 5378:    __m.unlock();
        -: 5379:    return __r;
        -: 5380:}
        -: 5381:  
        -: 5382:template <class _Tp>
        -: 5383:inline _LIBCPP_INLINE_VISIBILITY
        -: 5384:shared_ptr<_Tp>
        -: 5385:atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 5386:{
        -: 5387:    return atomic_exchange(__p, __r);
        -: 5388:}
        -: 5389:
        -: 5390:template <class _Tp>
        -: 5391:bool
        -: 5392:atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 5393:{
        -: 5394:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5395:    __m.lock();
        -: 5396:    if (__p->__owner_equivalent(*__v))
        -: 5397:    {
        -: 5398:        *__p = __w;
        -: 5399:        __m.unlock();
        -: 5400:        return true;
        -: 5401:    }
        -: 5402:    *__v = *__p;
        -: 5403:    __m.unlock();
        -: 5404:    return false;
        -: 5405:}
        -: 5406:
        -: 5407:template <class _Tp>
        -: 5408:inline _LIBCPP_INLINE_VISIBILITY
        -: 5409:bool
        -: 5410:atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 5411:{
        -: 5412:    return atomic_compare_exchange_strong(__p, __v, __w);
        -: 5413:}
        -: 5414:
        -: 5415:template <class _Tp>
        -: 5416:inline _LIBCPP_INLINE_VISIBILITY
        -: 5417:bool
        -: 5418:atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 5419:                                        shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 5420:{
        -: 5421:    return atomic_compare_exchange_strong(__p, __v, __w);
        -: 5422:}
        -: 5423:
        -: 5424:template <class _Tp>
        -: 5425:inline _LIBCPP_INLINE_VISIBILITY
        -: 5426:bool
        -: 5427:atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 5428:                                      shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 5429:{
        -: 5430:    return atomic_compare_exchange_weak(__p, __v, __w);
        -: 5431:}
        -: 5432:
        -: 5433:#endif  // __has_feature(cxx_atomic) && !defined(_LIBCPP_HAS_NO_THREADS)
        -: 5434:
        -: 5435://enum class
        -: 5436:struct _LIBCPP_TYPE_VIS pointer_safety
        -: 5437:{
        -: 5438:    enum __lx
        -: 5439:    {
        -: 5440:        relaxed,
        -: 5441:        preferred,
        -: 5442:        strict
        -: 5443:    };
        -: 5444:
        -: 5445:    __lx __v_;
        -: 5446:
        -: 5447:    _LIBCPP_INLINE_VISIBILITY
        -: 5448:    pointer_safety(__lx __v) : __v_(__v) {}
        -: 5449:    _LIBCPP_INLINE_VISIBILITY
        -: 5450:    operator int() const {return __v_;}
        -: 5451:};
        -: 5452:
        -: 5453:_LIBCPP_FUNC_VIS void declare_reachable(void* __p);
        -: 5454:_LIBCPP_FUNC_VIS void declare_no_pointers(char* __p, size_t __n);
        -: 5455:_LIBCPP_FUNC_VIS void undeclare_no_pointers(char* __p, size_t __n);
        -: 5456:_LIBCPP_FUNC_VIS pointer_safety get_pointer_safety() _NOEXCEPT;
        -: 5457:_LIBCPP_FUNC_VIS void* __undeclare_reachable(void* __p);
        -: 5458:
        -: 5459:template <class _Tp>
        -: 5460:inline _LIBCPP_INLINE_VISIBILITY
        -: 5461:_Tp*
        -: 5462:undeclare_reachable(_Tp* __p)
        -: 5463:{
        -: 5464:    return static_cast<_Tp*>(__undeclare_reachable(__p));
        -: 5465:}
        -: 5466:
        -: 5467:_LIBCPP_FUNC_VIS void* align(size_t __align, size_t __sz, void*& __ptr, size_t& __space);
        -: 5468:
        -: 5469:_LIBCPP_END_NAMESPACE_STD
        -: 5470:
        -: 5471:#endif  // _LIBCPP_MEMORY
